
Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a57c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000271ac  0800a764  0800a764  0001a764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08031910  08031910  00050070  2**0
                  CONTENTS
  4 .ARM          00000000  08031910  08031910  00050070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08031910  08031910  00050070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08031910  08031910  00041910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08031914  08031914  00041914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08031918  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000770  20000070  08031988  00050070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e0  08031988  000507e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00050070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7d6  00000000  00000000  00050099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000228f  00000000  00000000  0005c86f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007a8  00000000  00000000  0005eb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a0  00000000  00000000  0005f2a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017d59  00000000  00000000  0005f948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009709  00000000  00000000  000776a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007811c  00000000  00000000  00080daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f8ec6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025c0  00000000  00000000  000f8f44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000070 	.word	0x20000070
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a74c 	.word	0x0800a74c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000074 	.word	0x20000074
 8000224:	0800a74c 	.word	0x0800a74c

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_Init+0x28>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_Init+0x28>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 f929 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f000 f808 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f007 fe4e 	bl	80086c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x54>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x58>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f933 	bl	8000cba <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f000 f909 	bl	8000c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <HAL_InitTick+0x5c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000004 	.word	0x20000004
 8000a8c:	20000000 	.word	0x20000000

08000a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_IncTick+0x1c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <HAL_IncTick+0x20>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000004 	.word	0x20000004
 8000ab0:	200000a4 	.word	0x200000a4

08000ab4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b02      	ldr	r3, [pc, #8]	; (8000ac4 <HAL_GetTick+0x10>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	200000a4 	.word	0x200000a4

08000ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad0:	f7ff fff0 	bl	8000ab4 <HAL_GetTick>
 8000ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae0:	d005      	beq.n	8000aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_Delay+0x40>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aee:	bf00      	nop
 8000af0:	f7ff ffe0 	bl	8000ab4 <HAL_GetTick>
 8000af4:	4602      	mov	r2, r0
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d8f7      	bhi.n	8000af0 <HAL_Delay+0x28>
  {
  }
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000004 	.word	0x20000004

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	; 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff90 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff49 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff5e 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff90 	bl	8000bc4 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5f 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffb0 	bl	8000c28 <SysTick_Config>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b08b      	sub	sp, #44	; 0x2c
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce6:	e133      	b.n	8000f50 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	69fa      	ldr	r2, [r7, #28]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f040 8122 	bne.w	8000f4a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2b12      	cmp	r3, #18
 8000d0c:	d034      	beq.n	8000d78 <HAL_GPIO_Init+0xa4>
 8000d0e:	2b12      	cmp	r3, #18
 8000d10:	d80d      	bhi.n	8000d2e <HAL_GPIO_Init+0x5a>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d02b      	beq.n	8000d6e <HAL_GPIO_Init+0x9a>
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d804      	bhi.n	8000d24 <HAL_GPIO_Init+0x50>
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d031      	beq.n	8000d82 <HAL_GPIO_Init+0xae>
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d01c      	beq.n	8000d5c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d22:	e048      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	d043      	beq.n	8000db0 <HAL_GPIO_Init+0xdc>
 8000d28:	2b11      	cmp	r3, #17
 8000d2a:	d01b      	beq.n	8000d64 <HAL_GPIO_Init+0x90>
          break;
 8000d2c:	e043      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d2e:	4a8f      	ldr	r2, [pc, #572]	; (8000f6c <HAL_GPIO_Init+0x298>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d026      	beq.n	8000d82 <HAL_GPIO_Init+0xae>
 8000d34:	4a8d      	ldr	r2, [pc, #564]	; (8000f6c <HAL_GPIO_Init+0x298>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d806      	bhi.n	8000d48 <HAL_GPIO_Init+0x74>
 8000d3a:	4a8d      	ldr	r2, [pc, #564]	; (8000f70 <HAL_GPIO_Init+0x29c>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d020      	beq.n	8000d82 <HAL_GPIO_Init+0xae>
 8000d40:	4a8c      	ldr	r2, [pc, #560]	; (8000f74 <HAL_GPIO_Init+0x2a0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d01d      	beq.n	8000d82 <HAL_GPIO_Init+0xae>
          break;
 8000d46:	e036      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d48:	4a8b      	ldr	r2, [pc, #556]	; (8000f78 <HAL_GPIO_Init+0x2a4>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d019      	beq.n	8000d82 <HAL_GPIO_Init+0xae>
 8000d4e:	4a8b      	ldr	r2, [pc, #556]	; (8000f7c <HAL_GPIO_Init+0x2a8>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d016      	beq.n	8000d82 <HAL_GPIO_Init+0xae>
 8000d54:	4a8a      	ldr	r2, [pc, #552]	; (8000f80 <HAL_GPIO_Init+0x2ac>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d013      	beq.n	8000d82 <HAL_GPIO_Init+0xae>
          break;
 8000d5a:	e02c      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	623b      	str	r3, [r7, #32]
          break;
 8000d62:	e028      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	623b      	str	r3, [r7, #32]
          break;
 8000d6c:	e023      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	3308      	adds	r3, #8
 8000d74:	623b      	str	r3, [r7, #32]
          break;
 8000d76:	e01e      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	330c      	adds	r3, #12
 8000d7e:	623b      	str	r3, [r7, #32]
          break;
 8000d80:	e019      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	623b      	str	r3, [r7, #32]
          break;
 8000d8e:	e012      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d105      	bne.n	8000da4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	611a      	str	r2, [r3, #16]
          break;
 8000da2:	e008      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da4:	2308      	movs	r3, #8
 8000da6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69fa      	ldr	r2, [r7, #28]
 8000dac:	615a      	str	r2, [r3, #20]
          break;
 8000dae:	e002      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
          break;
 8000db4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	2bff      	cmp	r3, #255	; 0xff
 8000dba:	d801      	bhi.n	8000dc0 <HAL_GPIO_Init+0xec>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	e001      	b.n	8000dc4 <HAL_GPIO_Init+0xf0>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	2bff      	cmp	r3, #255	; 0xff
 8000dca:	d802      	bhi.n	8000dd2 <HAL_GPIO_Init+0xfe>
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	e002      	b.n	8000dd8 <HAL_GPIO_Init+0x104>
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	3b08      	subs	r3, #8
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	210f      	movs	r1, #15
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	401a      	ands	r2, r3
 8000dea:	6a39      	ldr	r1, [r7, #32]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	431a      	orrs	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f000 80a2 	beq.w	8000f4a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e06:	4b5f      	ldr	r3, [pc, #380]	; (8000f84 <HAL_GPIO_Init+0x2b0>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	4a5e      	ldr	r2, [pc, #376]	; (8000f84 <HAL_GPIO_Init+0x2b0>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6193      	str	r3, [r2, #24]
 8000e12:	4b5c      	ldr	r3, [pc, #368]	; (8000f84 <HAL_GPIO_Init+0x2b0>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e1e:	4a5a      	ldr	r2, [pc, #360]	; (8000f88 <HAL_GPIO_Init+0x2b4>)
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	3302      	adds	r3, #2
 8000e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	220f      	movs	r2, #15
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a51      	ldr	r2, [pc, #324]	; (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d01f      	beq.n	8000e8a <HAL_GPIO_Init+0x1b6>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a50      	ldr	r2, [pc, #320]	; (8000f90 <HAL_GPIO_Init+0x2bc>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d019      	beq.n	8000e86 <HAL_GPIO_Init+0x1b2>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4f      	ldr	r2, [pc, #316]	; (8000f94 <HAL_GPIO_Init+0x2c0>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d013      	beq.n	8000e82 <HAL_GPIO_Init+0x1ae>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4e      	ldr	r2, [pc, #312]	; (8000f98 <HAL_GPIO_Init+0x2c4>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d00d      	beq.n	8000e7e <HAL_GPIO_Init+0x1aa>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4d      	ldr	r2, [pc, #308]	; (8000f9c <HAL_GPIO_Init+0x2c8>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d007      	beq.n	8000e7a <HAL_GPIO_Init+0x1a6>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4c      	ldr	r2, [pc, #304]	; (8000fa0 <HAL_GPIO_Init+0x2cc>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d101      	bne.n	8000e76 <HAL_GPIO_Init+0x1a2>
 8000e72:	2305      	movs	r3, #5
 8000e74:	e00a      	b.n	8000e8c <HAL_GPIO_Init+0x1b8>
 8000e76:	2306      	movs	r3, #6
 8000e78:	e008      	b.n	8000e8c <HAL_GPIO_Init+0x1b8>
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	e006      	b.n	8000e8c <HAL_GPIO_Init+0x1b8>
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e004      	b.n	8000e8c <HAL_GPIO_Init+0x1b8>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e002      	b.n	8000e8c <HAL_GPIO_Init+0x1b8>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <HAL_GPIO_Init+0x1b8>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e8e:	f002 0203 	and.w	r2, r2, #3
 8000e92:	0092      	lsls	r2, r2, #2
 8000e94:	4093      	lsls	r3, r2
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e9c:	493a      	ldr	r1, [pc, #232]	; (8000f88 <HAL_GPIO_Init+0x2b4>)
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d006      	beq.n	8000ec4 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eb6:	4b3b      	ldr	r3, [pc, #236]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	493a      	ldr	r1, [pc, #232]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	600b      	str	r3, [r1, #0]
 8000ec2:	e006      	b.n	8000ed2 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ec4:	4b37      	ldr	r3, [pc, #220]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	4935      	ldr	r1, [pc, #212]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d006      	beq.n	8000eec <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ede:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	4930      	ldr	r1, [pc, #192]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	604b      	str	r3, [r1, #4]
 8000eea:	e006      	b.n	8000efa <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	492b      	ldr	r1, [pc, #172]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	4926      	ldr	r1, [pc, #152]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	608b      	str	r3, [r1, #8]
 8000f12:	e006      	b.n	8000f22 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f14:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	4921      	ldr	r1, [pc, #132]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d006      	beq.n	8000f3c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	491c      	ldr	r1, [pc, #112]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60cb      	str	r3, [r1, #12]
 8000f3a:	e006      	b.n	8000f4a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	4917      	ldr	r1, [pc, #92]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f56:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f47f aec4 	bne.w	8000ce8 <HAL_GPIO_Init+0x14>
  }
}
 8000f60:	bf00      	nop
 8000f62:	372c      	adds	r7, #44	; 0x2c
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	10210000 	.word	0x10210000
 8000f70:	10110000 	.word	0x10110000
 8000f74:	10120000 	.word	0x10120000
 8000f78:	10310000 	.word	0x10310000
 8000f7c:	10320000 	.word	0x10320000
 8000f80:	10220000 	.word	0x10220000
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010000 	.word	0x40010000
 8000f8c:	40010800 	.word	0x40010800
 8000f90:	40010c00 	.word	0x40010c00
 8000f94:	40011000 	.word	0x40011000
 8000f98:	40011400 	.word	0x40011400
 8000f9c:	40011800 	.word	0x40011800
 8000fa0:	40011c00 	.word	0x40011c00
 8000fa4:	40010400 	.word	0x40010400

08000fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e001      	b.n	8000fca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	807b      	strh	r3, [r7, #2]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fe6:	787b      	ldrb	r3, [r7, #1]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fec:	887a      	ldrh	r2, [r7, #2]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ff2:	e003      	b.n	8000ffc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	041a      	lsls	r2, r3, #16
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	611a      	str	r2, [r3, #16]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
	...

08001008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e26c      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 8087 	beq.w	8001136 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001028:	4b92      	ldr	r3, [pc, #584]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 030c 	and.w	r3, r3, #12
 8001030:	2b04      	cmp	r3, #4
 8001032:	d00c      	beq.n	800104e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001034:	4b8f      	ldr	r3, [pc, #572]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 030c 	and.w	r3, r3, #12
 800103c:	2b08      	cmp	r3, #8
 800103e:	d112      	bne.n	8001066 <HAL_RCC_OscConfig+0x5e>
 8001040:	4b8c      	ldr	r3, [pc, #560]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800104c:	d10b      	bne.n	8001066 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104e:	4b89      	ldr	r3, [pc, #548]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d06c      	beq.n	8001134 <HAL_RCC_OscConfig+0x12c>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d168      	bne.n	8001134 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e246      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106e:	d106      	bne.n	800107e <HAL_RCC_OscConfig+0x76>
 8001070:	4b80      	ldr	r3, [pc, #512]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a7f      	ldr	r2, [pc, #508]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	e02e      	b.n	80010dc <HAL_RCC_OscConfig+0xd4>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x98>
 8001086:	4b7b      	ldr	r3, [pc, #492]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a7a      	ldr	r2, [pc, #488]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 800108c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b78      	ldr	r3, [pc, #480]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a77      	ldr	r2, [pc, #476]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e01d      	b.n	80010dc <HAL_RCC_OscConfig+0xd4>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010a8:	d10c      	bne.n	80010c4 <HAL_RCC_OscConfig+0xbc>
 80010aa:	4b72      	ldr	r3, [pc, #456]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a71      	ldr	r2, [pc, #452]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	4b6f      	ldr	r3, [pc, #444]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a6e      	ldr	r2, [pc, #440]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e00b      	b.n	80010dc <HAL_RCC_OscConfig+0xd4>
 80010c4:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a6a      	ldr	r2, [pc, #424]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b68      	ldr	r3, [pc, #416]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a67      	ldr	r2, [pc, #412]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d013      	beq.n	800110c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fce6 	bl	8000ab4 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ec:	f7ff fce2 	bl	8000ab4 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b64      	cmp	r3, #100	; 0x64
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e1fa      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	4b5d      	ldr	r3, [pc, #372]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f0      	beq.n	80010ec <HAL_RCC_OscConfig+0xe4>
 800110a:	e014      	b.n	8001136 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fcd2 	bl	8000ab4 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fcce 	bl	8000ab4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b64      	cmp	r3, #100	; 0x64
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e1e6      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001126:	4b53      	ldr	r3, [pc, #332]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0x10c>
 8001132:	e000      	b.n	8001136 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d063      	beq.n	800120a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001142:	4b4c      	ldr	r3, [pc, #304]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00b      	beq.n	8001166 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800114e:	4b49      	ldr	r3, [pc, #292]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b08      	cmp	r3, #8
 8001158:	d11c      	bne.n	8001194 <HAL_RCC_OscConfig+0x18c>
 800115a:	4b46      	ldr	r3, [pc, #280]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d116      	bne.n	8001194 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001166:	4b43      	ldr	r3, [pc, #268]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <HAL_RCC_OscConfig+0x176>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d001      	beq.n	800117e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e1ba      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117e:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4939      	ldr	r1, [pc, #228]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 800118e:	4313      	orrs	r3, r2
 8001190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001192:	e03a      	b.n	800120a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d020      	beq.n	80011de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800119c:	4b36      	ldr	r3, [pc, #216]	; (8001278 <HAL_RCC_OscConfig+0x270>)
 800119e:	2201      	movs	r2, #1
 80011a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a2:	f7ff fc87 	bl	8000ab4 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011aa:	f7ff fc83 	bl	8000ab4 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e19b      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011bc:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f0      	beq.n	80011aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c8:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4927      	ldr	r1, [pc, #156]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	600b      	str	r3, [r1, #0]
 80011dc:	e015      	b.n	800120a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <HAL_RCC_OscConfig+0x270>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fc66 	bl	8000ab4 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ec:	f7ff fc62 	bl	8000ab4 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e17a      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fe:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	2b00      	cmp	r3, #0
 8001214:	d03a      	beq.n	800128c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d019      	beq.n	8001252 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_RCC_OscConfig+0x274>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001224:	f7ff fc46 	bl	8000ab4 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800122c:	f7ff fc42 	bl	8000ab4 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e15a      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800124a:	2001      	movs	r0, #1
 800124c:	f000 faa8 	bl	80017a0 <RCC_Delay>
 8001250:	e01c      	b.n	800128c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_RCC_OscConfig+0x274>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001258:	f7ff fc2c 	bl	8000ab4 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125e:	e00f      	b.n	8001280 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001260:	f7ff fc28 	bl	8000ab4 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d908      	bls.n	8001280 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e140      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	42420000 	.word	0x42420000
 800127c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001280:	4b9e      	ldr	r3, [pc, #632]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1e9      	bne.n	8001260 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 80a6 	beq.w	80013e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129e:	4b97      	ldr	r3, [pc, #604]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10d      	bne.n	80012c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	4b94      	ldr	r3, [pc, #592]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	4a93      	ldr	r2, [pc, #588]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	61d3      	str	r3, [r2, #28]
 80012b6:	4b91      	ldr	r3, [pc, #580]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012c2:	2301      	movs	r3, #1
 80012c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c6:	4b8e      	ldr	r3, [pc, #568]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d118      	bne.n	8001304 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012d2:	4b8b      	ldr	r3, [pc, #556]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a8a      	ldr	r2, [pc, #552]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80012d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012de:	f7ff fbe9 	bl	8000ab4 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e6:	f7ff fbe5 	bl	8000ab4 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b64      	cmp	r3, #100	; 0x64
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e0fd      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f8:	4b81      	ldr	r3, [pc, #516]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d106      	bne.n	800131a <HAL_RCC_OscConfig+0x312>
 800130c:	4b7b      	ldr	r3, [pc, #492]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	4a7a      	ldr	r2, [pc, #488]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6213      	str	r3, [r2, #32]
 8001318:	e02d      	b.n	8001376 <HAL_RCC_OscConfig+0x36e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x334>
 8001322:	4b76      	ldr	r3, [pc, #472]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	4a75      	ldr	r2, [pc, #468]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	6213      	str	r3, [r2, #32]
 800132e:	4b73      	ldr	r3, [pc, #460]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4a72      	ldr	r2, [pc, #456]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001334:	f023 0304 	bic.w	r3, r3, #4
 8001338:	6213      	str	r3, [r2, #32]
 800133a:	e01c      	b.n	8001376 <HAL_RCC_OscConfig+0x36e>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	2b05      	cmp	r3, #5
 8001342:	d10c      	bne.n	800135e <HAL_RCC_OscConfig+0x356>
 8001344:	4b6d      	ldr	r3, [pc, #436]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4a6c      	ldr	r2, [pc, #432]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	6213      	str	r3, [r2, #32]
 8001350:	4b6a      	ldr	r3, [pc, #424]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4a69      	ldr	r2, [pc, #420]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6213      	str	r3, [r2, #32]
 800135c:	e00b      	b.n	8001376 <HAL_RCC_OscConfig+0x36e>
 800135e:	4b67      	ldr	r3, [pc, #412]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4a66      	ldr	r2, [pc, #408]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001364:	f023 0301 	bic.w	r3, r3, #1
 8001368:	6213      	str	r3, [r2, #32]
 800136a:	4b64      	ldr	r3, [pc, #400]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4a63      	ldr	r2, [pc, #396]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001370:	f023 0304 	bic.w	r3, r3, #4
 8001374:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d015      	beq.n	80013aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137e:	f7ff fb99 	bl	8000ab4 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001384:	e00a      	b.n	800139c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001386:	f7ff fb95 	bl	8000ab4 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	f241 3288 	movw	r2, #5000	; 0x1388
 8001394:	4293      	cmp	r3, r2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e0ab      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139c:	4b57      	ldr	r3, [pc, #348]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0ee      	beq.n	8001386 <HAL_RCC_OscConfig+0x37e>
 80013a8:	e014      	b.n	80013d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fb83 	bl	8000ab4 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b0:	e00a      	b.n	80013c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b2:	f7ff fb7f 	bl	8000ab4 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e095      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c8:	4b4c      	ldr	r3, [pc, #304]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1ee      	bne.n	80013b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013d4:	7dfb      	ldrb	r3, [r7, #23]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d105      	bne.n	80013e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013da:	4b48      	ldr	r3, [pc, #288]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4a47      	ldr	r2, [pc, #284]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80013e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 8081 	beq.w	80014f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f0:	4b42      	ldr	r3, [pc, #264]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 030c 	and.w	r3, r3, #12
 80013f8:	2b08      	cmp	r3, #8
 80013fa:	d061      	beq.n	80014c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d146      	bne.n	8001492 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001404:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <HAL_RCC_OscConfig+0x4fc>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140a:	f7ff fb53 	bl	8000ab4 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001412:	f7ff fb4f 	bl	8000ab4 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e067      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001424:	4b35      	ldr	r3, [pc, #212]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001438:	d108      	bne.n	800144c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800143a:	4b30      	ldr	r3, [pc, #192]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	492d      	ldr	r1, [pc, #180]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a19      	ldr	r1, [r3, #32]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	430b      	orrs	r3, r1
 800145e:	4927      	ldr	r1, [pc, #156]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <HAL_RCC_OscConfig+0x4fc>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff fb23 	bl	8000ab4 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001472:	f7ff fb1f 	bl	8000ab4 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e037      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x46a>
 8001490:	e02f      	b.n	80014f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_RCC_OscConfig+0x4fc>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fb0c 	bl	8000ab4 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff fb08 	bl	8000ab4 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e020      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x498>
 80014be:	e018      	b.n	80014f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e013      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d106      	bne.n	80014ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d001      	beq.n	80014f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021000 	.word	0x40021000
 8001500:	40007000 	.word	0x40007000
 8001504:	42420060 	.word	0x42420060

08001508 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0d0      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800151c:	4b6a      	ldr	r3, [pc, #424]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d910      	bls.n	800154c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	4b67      	ldr	r3, [pc, #412]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 0207 	bic.w	r2, r3, #7
 8001532:	4965      	ldr	r1, [pc, #404]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800153a:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0b8      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d020      	beq.n	800159a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001564:	4b59      	ldr	r3, [pc, #356]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	4a58      	ldr	r2, [pc, #352]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800156e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800157c:	4b53      	ldr	r3, [pc, #332]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	4a52      	ldr	r2, [pc, #328]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001586:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001588:	4b50      	ldr	r3, [pc, #320]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	494d      	ldr	r1, [pc, #308]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	4313      	orrs	r3, r2
 8001598:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d040      	beq.n	8001628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d107      	bne.n	80015be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ae:	4b47      	ldr	r3, [pc, #284]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d115      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e07f      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d107      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c6:	4b41      	ldr	r3, [pc, #260]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e073      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d6:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e06b      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e6:	4b39      	ldr	r3, [pc, #228]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f023 0203 	bic.w	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4936      	ldr	r1, [pc, #216]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015f8:	f7ff fa5c 	bl	8000ab4 <HAL_GetTick>
 80015fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fe:	e00a      	b.n	8001616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001600:	f7ff fa58 	bl	8000ab4 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f241 3288 	movw	r2, #5000	; 0x1388
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e053      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001616:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 020c 	and.w	r2, r3, #12
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	429a      	cmp	r2, r3
 8001626:	d1eb      	bne.n	8001600 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001628:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d210      	bcs.n	8001658 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 0207 	bic.w	r2, r3, #7
 800163e:	4922      	ldr	r1, [pc, #136]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	4313      	orrs	r3, r2
 8001644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d001      	beq.n	8001658 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e032      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d008      	beq.n	8001676 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	4916      	ldr	r1, [pc, #88]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	4313      	orrs	r3, r2
 8001674:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d009      	beq.n	8001696 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	490e      	ldr	r1, [pc, #56]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	4313      	orrs	r3, r2
 8001694:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001696:	f000 f821 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 800169a:	4601      	mov	r1, r0
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 80016a8:	5cd3      	ldrb	r3, [r2, r3]
 80016aa:	fa21 f303 	lsr.w	r3, r1, r3
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <HAL_RCC_ClockConfig+0x1cc>)
 80016b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_RCC_ClockConfig+0x1d0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff f9ba 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40022000 	.word	0x40022000
 80016cc:	40021000 	.word	0x40021000
 80016d0:	08031868 	.word	0x08031868
 80016d4:	20000008 	.word	0x20000008
 80016d8:	20000000 	.word	0x20000000

080016dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016dc:	b490      	push	{r4, r7}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016e2:	4b2a      	ldr	r3, [pc, #168]	; (800178c <HAL_RCC_GetSysClockFreq+0xb0>)
 80016e4:	1d3c      	adds	r4, r7, #4
 80016e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016ec:	4b28      	ldr	r3, [pc, #160]	; (8001790 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
 80016fa:	2300      	movs	r3, #0
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001706:	4b23      	ldr	r3, [pc, #140]	; (8001794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b04      	cmp	r3, #4
 8001714:	d002      	beq.n	800171c <HAL_RCC_GetSysClockFreq+0x40>
 8001716:	2b08      	cmp	r3, #8
 8001718:	d003      	beq.n	8001722 <HAL_RCC_GetSysClockFreq+0x46>
 800171a:	e02d      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_RCC_GetSysClockFreq+0xbc>)
 800171e:	623b      	str	r3, [r7, #32]
      break;
 8001720:	e02d      	b.n	800177e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	0c9b      	lsrs	r3, r3, #18
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800172e:	4413      	add	r3, r2
 8001730:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001734:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d013      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	0c5b      	lsrs	r3, r3, #17
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800174e:	4413      	add	r3, r2
 8001750:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001754:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <HAL_RCC_GetSysClockFreq+0xbc>)
 800175a:	fb02 f203 	mul.w	r2, r2, r3
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	fbb2 f3f3 	udiv	r3, r2, r3
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
 8001766:	e004      	b.n	8001772 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	4a0c      	ldr	r2, [pc, #48]	; (800179c <HAL_RCC_GetSysClockFreq+0xc0>)
 800176c:	fb02 f303 	mul.w	r3, r2, r3
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	623b      	str	r3, [r7, #32]
      break;
 8001776:	e002      	b.n	800177e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <HAL_RCC_GetSysClockFreq+0xbc>)
 800177a:	623b      	str	r3, [r7, #32]
      break;
 800177c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800177e:	6a3b      	ldr	r3, [r7, #32]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3728      	adds	r7, #40	; 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bc90      	pop	{r4, r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	0800a764 	.word	0x0800a764
 8001790:	0800a774 	.word	0x0800a774
 8001794:	40021000 	.word	0x40021000
 8001798:	007a1200 	.word	0x007a1200
 800179c:	003d0900 	.word	0x003d0900

080017a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <RCC_Delay+0x34>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <RCC_Delay+0x38>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	0a5b      	lsrs	r3, r3, #9
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	fb02 f303 	mul.w	r3, r2, r3
 80017ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017bc:	bf00      	nop
  }
  while (Delay --);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1e5a      	subs	r2, r3, #1
 80017c2:	60fa      	str	r2, [r7, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f9      	bne.n	80017bc <RCC_Delay+0x1c>
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000008 	.word	0x20000008
 80017d8:	10624dd3 	.word	0x10624dd3

080017dc <left_shift_check>:
block_config block_next2;
shapes shape_list[SHAPE_NUM];

extern uint32_t uwTick;

uint8_t left_shift_check() {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
	int8_t x, y, i;
	shapes* it = &shape_list[block.shape];
 80017e2:	4b2c      	ldr	r3, [pc, #176]	; (8001894 <left_shift_check+0xb8>)
 80017e4:	789b      	ldrb	r3, [r3, #2]
 80017e6:	461a      	mov	r2, r3
 80017e8:	4613      	mov	r3, r2
 80017ea:	015b      	lsls	r3, r3, #5
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4a29      	ldr	r2, [pc, #164]	; (8001898 <left_shift_check+0xbc>)
 80017f2:	4413      	add	r3, r2
 80017f4:	60bb      	str	r3, [r7, #8]
	int8_t dir = block.direction;
 80017f6:	4b27      	ldr	r3, [pc, #156]	; (8001894 <left_shift_check+0xb8>)
 80017f8:	78db      	ldrb	r3, [r3, #3]
 80017fa:	71fb      	strb	r3, [r7, #7]
	int8_t cell_num =it->cell_num;
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001802:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<cell_num;i++)
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	e039      	b.n	800187e <left_shift_check+0xa2>
	{
		x = it->x[dir][i]+block.x;
 800180a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	68b9      	ldr	r1, [r7, #8]
 8001814:	0112      	lsls	r2, r2, #4
 8001816:	440a      	add	r2, r1
 8001818:	4413      	add	r3, r2
 800181a:	781a      	ldrb	r2, [r3, #0]
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <left_shift_check+0xb8>)
 800181e:	f993 3000 	ldrsb.w	r3, [r3]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	4413      	add	r3, r2
 8001826:	b2db      	uxtb	r3, r3
 8001828:	717b      	strb	r3, [r7, #5]
		y = it->y[dir][i]+block.y;
 800182a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800182e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001832:	68b9      	ldr	r1, [r7, #8]
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	440a      	add	r2, r1
 8001838:	4413      	add	r3, r2
 800183a:	3340      	adds	r3, #64	; 0x40
 800183c:	781a      	ldrb	r2, [r3, #0]
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <left_shift_check+0xb8>)
 8001840:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4413      	add	r3, r2
 8001848:	b2db      	uxtb	r3, r3
 800184a:	713b      	strb	r3, [r7, #4]
		x--;
 800184c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	3b01      	subs	r3, #1
 8001854:	b2db      	uxtb	r3, r3
 8001856:	717b      	strb	r3, [r7, #5]
		if (cell_occupation_check(x,y)== 1) {
 8001858:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800185c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f996 	bl	8001b94 <cell_occupation_check>
 8001868:	4603      	mov	r3, r0
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <left_shift_check+0x96>
			return 0;
 800186e:	2300      	movs	r3, #0
 8001870:	e00c      	b.n	800188c <left_shift_check+0xb0>
	for(i=0;i<cell_num;i++)
 8001872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	3301      	adds	r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001882:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001886:	429a      	cmp	r2, r3
 8001888:	dbbf      	blt.n	800180a <left_shift_check+0x2e>
		}
	}
	return 1;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000444 	.word	0x20000444
 8001898:	200000a8 	.word	0x200000a8

0800189c <right_shift_check>:

uint8_t right_shift_check() {
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
	int8_t x, y, i;
	shapes* it = &shape_list[block.shape];
 80018a2:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <right_shift_check+0xb8>)
 80018a4:	789b      	ldrb	r3, [r3, #2]
 80018a6:	461a      	mov	r2, r3
 80018a8:	4613      	mov	r3, r2
 80018aa:	015b      	lsls	r3, r3, #5
 80018ac:	4413      	add	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4a29      	ldr	r2, [pc, #164]	; (8001958 <right_shift_check+0xbc>)
 80018b2:	4413      	add	r3, r2
 80018b4:	60bb      	str	r3, [r7, #8]
	int8_t dir = block.direction;
 80018b6:	4b27      	ldr	r3, [pc, #156]	; (8001954 <right_shift_check+0xb8>)
 80018b8:	78db      	ldrb	r3, [r3, #3]
 80018ba:	71fb      	strb	r3, [r7, #7]
	int8_t cell_num =it->cell_num;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80018c2:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<cell_num;i++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	e039      	b.n	800193e <right_shift_check+0xa2>
	{
		x = it->x[dir][i]+block.x;
 80018ca:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80018ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	440a      	add	r2, r1
 80018d8:	4413      	add	r3, r2
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <right_shift_check+0xb8>)
 80018de:	f993 3000 	ldrsb.w	r3, [r3]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	717b      	strb	r3, [r7, #5]
		y = it->y[dir][i]+block.y;
 80018ea:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80018ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	440a      	add	r2, r1
 80018f8:	4413      	add	r3, r2
 80018fa:	3340      	adds	r3, #64	; 0x40
 80018fc:	781a      	ldrb	r2, [r3, #0]
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <right_shift_check+0xb8>)
 8001900:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	4413      	add	r3, r2
 8001908:	b2db      	uxtb	r3, r3
 800190a:	713b      	strb	r3, [r7, #4]
		x++;
 800190c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	3301      	adds	r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	717b      	strb	r3, [r7, #5]
		if (cell_occupation_check(x,y)== 1) {
 8001918:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800191c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001920:	4611      	mov	r1, r2
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f936 	bl	8001b94 <cell_occupation_check>
 8001928:	4603      	mov	r3, r0
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <right_shift_check+0x96>
			return 0;
 800192e:	2300      	movs	r3, #0
 8001930:	e00c      	b.n	800194c <right_shift_check+0xb0>
	for(i=0;i<cell_num;i++)
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	3301      	adds	r3, #1
 800193a:	b2db      	uxtb	r3, r3
 800193c:	73fb      	strb	r3, [r7, #15]
 800193e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001942:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001946:	429a      	cmp	r2, r3
 8001948:	dbbf      	blt.n	80018ca <right_shift_check+0x2e>
		}
	}
	return 1;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000444 	.word	0x20000444
 8001958:	200000a8 	.word	0x200000a8

0800195c <down_shift_check>:

uint8_t down_shift_check() {
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
	int8_t x, y, i;
	shapes* it = &shape_list[block.shape];
 8001962:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <down_shift_check+0xb8>)
 8001964:	789b      	ldrb	r3, [r3, #2]
 8001966:	461a      	mov	r2, r3
 8001968:	4613      	mov	r3, r2
 800196a:	015b      	lsls	r3, r3, #5
 800196c:	4413      	add	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4a29      	ldr	r2, [pc, #164]	; (8001a18 <down_shift_check+0xbc>)
 8001972:	4413      	add	r3, r2
 8001974:	60bb      	str	r3, [r7, #8]
	int8_t dir = block.direction;
 8001976:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <down_shift_check+0xb8>)
 8001978:	78db      	ldrb	r3, [r3, #3]
 800197a:	71fb      	strb	r3, [r7, #7]
	int8_t cell_num =it->cell_num;
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001982:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<cell_num;i++)
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]
 8001988:	e039      	b.n	80019fe <down_shift_check+0xa2>
	{
		x = it->x[dir][i]+block.x;
 800198a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800198e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001992:	68b9      	ldr	r1, [r7, #8]
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	440a      	add	r2, r1
 8001998:	4413      	add	r3, r2
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <down_shift_check+0xb8>)
 800199e:	f993 3000 	ldrsb.w	r3, [r3]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	717b      	strb	r3, [r7, #5]
		y = it->y[dir][i]+block.y;
 80019aa:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	68b9      	ldr	r1, [r7, #8]
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	440a      	add	r2, r1
 80019b8:	4413      	add	r3, r2
 80019ba:	3340      	adds	r3, #64	; 0x40
 80019bc:	781a      	ldrb	r2, [r3, #0]
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <down_shift_check+0xb8>)
 80019c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	713b      	strb	r3, [r7, #4]
		y--;
 80019cc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	713b      	strb	r3, [r7, #4]
		if (cell_occupation_check(x,y)== 1) {
 80019d8:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80019dc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80019e0:	4611      	mov	r1, r2
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f8d6 	bl	8001b94 <cell_occupation_check>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <down_shift_check+0x96>
			return 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e00c      	b.n	8001a0c <down_shift_check+0xb0>
	for(i=0;i<cell_num;i++)
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	3301      	adds	r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	73fb      	strb	r3, [r7, #15]
 80019fe:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001a02:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	dbbf      	blt.n	800198a <down_shift_check+0x2e>
		}
	}
	return 1;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000444 	.word	0x20000444
 8001a18:	200000a8 	.word	0x200000a8

08001a1c <rotation_check>:

uint8_t rotation_check() {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
	int8_t x, y, i;
	shapes* it = &shape_list[block.shape];
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <rotation_check+0xbc>)
 8001a24:	789b      	ldrb	r3, [r3, #2]
 8001a26:	461a      	mov	r2, r3
 8001a28:	4613      	mov	r3, r2
 8001a2a:	015b      	lsls	r3, r3, #5
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4a2a      	ldr	r2, [pc, #168]	; (8001adc <rotation_check+0xc0>)
 8001a32:	4413      	add	r3, r2
 8001a34:	60bb      	str	r3, [r7, #8]
	int8_t dir = (block.direction+1)%4;
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <rotation_check+0xbc>)
 8001a38:	78db      	ldrb	r3, [r3, #3]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	425a      	negs	r2, r3
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	f002 0203 	and.w	r2, r2, #3
 8001a46:	bf58      	it	pl
 8001a48:	4253      	negpl	r3, r2
 8001a4a:	71fb      	strb	r3, [r7, #7]
	int8_t cell_num =it->cell_num;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001a52:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<cell_num;i++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	e033      	b.n	8001ac2 <rotation_check+0xa6>
	{
		x = it->x[dir][i]+block.x;
 8001a5a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a62:	68b9      	ldr	r1, [r7, #8]
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	440a      	add	r2, r1
 8001a68:	4413      	add	r3, r2
 8001a6a:	781a      	ldrb	r2, [r3, #0]
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <rotation_check+0xbc>)
 8001a6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	717b      	strb	r3, [r7, #5]
		y = it->y[dir][i]+block.y;
 8001a7a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a82:	68b9      	ldr	r1, [r7, #8]
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	440a      	add	r2, r1
 8001a88:	4413      	add	r3, r2
 8001a8a:	3340      	adds	r3, #64	; 0x40
 8001a8c:	781a      	ldrb	r2, [r3, #0]
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <rotation_check+0xbc>)
 8001a90:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	713b      	strb	r3, [r7, #4]
		if (cell_occupation_check(x,y)== 1) {
 8001a9c:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8001aa0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f874 	bl	8001b94 <cell_occupation_check>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <rotation_check+0x9a>
			return 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e00c      	b.n	8001ad0 <rotation_check+0xb4>
	for(i=0;i<cell_num;i++)
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	3301      	adds	r3, #1
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	73fb      	strb	r3, [r7, #15]
 8001ac2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001ac6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	dbc5      	blt.n	8001a5a <rotation_check+0x3e>
		}
    }
	return 1;
 8001ace:	2301      	movs	r3, #1
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000444 	.word	0x20000444
 8001adc:	200000a8 	.word	0x200000a8

08001ae0 <intersection_check>:

// intersect with other : 1
uint8_t intersection_check() {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
	int8_t x, y, i;
	shapes* it = &shape_list[block.shape];
 8001ae6:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <intersection_check+0xac>)
 8001ae8:	789b      	ldrb	r3, [r3, #2]
 8001aea:	461a      	mov	r2, r3
 8001aec:	4613      	mov	r3, r2
 8001aee:	015b      	lsls	r3, r3, #5
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4a26      	ldr	r2, [pc, #152]	; (8001b90 <intersection_check+0xb0>)
 8001af6:	4413      	add	r3, r2
 8001af8:	60bb      	str	r3, [r7, #8]
	int8_t dir = block.direction;
 8001afa:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <intersection_check+0xac>)
 8001afc:	78db      	ldrb	r3, [r3, #3]
 8001afe:	71fb      	strb	r3, [r7, #7]
	int8_t cell_num =it->cell_num;
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001b06:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<cell_num;i++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	e033      	b.n	8001b76 <intersection_check+0x96>
	{
		x = it->x[dir][i]+block.x;
 8001b0e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b16:	68b9      	ldr	r1, [r7, #8]
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	440a      	add	r2, r1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	781a      	ldrb	r2, [r3, #0]
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <intersection_check+0xac>)
 8001b22:	f993 3000 	ldrsb.w	r3, [r3]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	717b      	strb	r3, [r7, #5]
		y = it->y[dir][i]+block.y;
 8001b2e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b36:	68b9      	ldr	r1, [r7, #8]
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	440a      	add	r2, r1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3340      	adds	r3, #64	; 0x40
 8001b40:	781a      	ldrb	r2, [r3, #0]
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <intersection_check+0xac>)
 8001b44:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	713b      	strb	r3, [r7, #4]
		if (cell_occupation_check(x,y) == 1) {
 8001b50:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8001b54:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f81a 	bl	8001b94 <cell_occupation_check>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <intersection_check+0x8a>
			return 1;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00c      	b.n	8001b84 <intersection_check+0xa4>
	for(i=0;i<cell_num;i++)
 8001b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	3301      	adds	r3, #1
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	73fb      	strb	r3, [r7, #15]
 8001b76:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001b7a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	dbc5      	blt.n	8001b0e <intersection_check+0x2e>
		}
    }
	return 0;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000444 	.word	0x20000444
 8001b90:	200000a8 	.word	0x200000a8

08001b94 <cell_occupation_check>:

// occupied 1
// not occupied 0
uint8_t cell_occupation_check(int8_t x, int8_t y){
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	460a      	mov	r2, r1
 8001b9e:	71fb      	strb	r3, [r7, #7]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	71bb      	strb	r3, [r7, #6]
	if(x>=GRID_WIDTH || x<0 || y>=GRID_HEIGHT || y<0 || !grid[y][x].isEmpty) {return 1;}
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b09      	cmp	r3, #9
 8001baa:	dc19      	bgt.n	8001be0 <cell_occupation_check+0x4c>
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	db15      	blt.n	8001be0 <cell_occupation_check+0x4c>
 8001bb4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001bb8:	2b13      	cmp	r3, #19
 8001bba:	dc11      	bgt.n	8001be0 <cell_occupation_check+0x4c>
 8001bbc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0d      	blt.n	8001be0 <cell_occupation_check+0x4c>
 8001bc4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001bc8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001bcc:	4808      	ldr	r0, [pc, #32]	; (8001bf0 <cell_occupation_check+0x5c>)
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <cell_occupation_check+0x50>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <cell_occupation_check+0x52>
	return 0;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	2000046c 	.word	0x2000046c

08001bf4 <set_block_static>:

void set_block_static(){
 8001bf4:	b490      	push	{r4, r7}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
	uint8_t i,a,b;
	shapes* it = &shape_list[block.shape];
 8001bfa:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <set_block_static+0xa8>)
 8001bfc:	789b      	ldrb	r3, [r3, #2]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4613      	mov	r3, r2
 8001c02:	015b      	lsls	r3, r3, #5
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4a25      	ldr	r2, [pc, #148]	; (8001ca0 <set_block_static+0xac>)
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60bb      	str	r3, [r7, #8]
	for(i=0;i<4;i++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]
 8001c12:	e03b      	b.n	8001c8c <set_block_static+0x98>
	{
	  a = it->x[block.direction][i]+block.x;
 8001c14:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <set_block_static+0xa8>)
 8001c16:	78db      	ldrb	r3, [r3, #3]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	0112      	lsls	r2, r2, #4
 8001c20:	440a      	add	r2, r1
 8001c22:	4413      	add	r3, r2
 8001c24:	781a      	ldrb	r2, [r3, #0]
 8001c26:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <set_block_static+0xa8>)
 8001c28:	f993 3000 	ldrsb.w	r3, [r3]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	4413      	add	r3, r2
 8001c30:	71fb      	strb	r3, [r7, #7]
	  b = it->y[block.direction][i]+block.y;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <set_block_static+0xa8>)
 8001c34:	78db      	ldrb	r3, [r3, #3]
 8001c36:	461a      	mov	r2, r3
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	68b9      	ldr	r1, [r7, #8]
 8001c3c:	0112      	lsls	r2, r2, #4
 8001c3e:	440a      	add	r2, r1
 8001c40:	4413      	add	r3, r2
 8001c42:	3340      	adds	r3, #64	; 0x40
 8001c44:	781a      	ldrb	r2, [r3, #0]
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <set_block_static+0xa8>)
 8001c48:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	4413      	add	r3, r2
 8001c50:	71bb      	strb	r3, [r7, #6]
		grid[b][a].isEmpty = 0;
 8001c52:	79ba      	ldrb	r2, [r7, #6]
 8001c54:	79f9      	ldrb	r1, [r7, #7]
 8001c56:	4813      	ldr	r0, [pc, #76]	; (8001ca4 <set_block_static+0xb0>)
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	440b      	add	r3, r1
 8001c62:	2200      	movs	r2, #0
 8001c64:	f800 2023 	strb.w	r2, [r0, r3, lsl #2]
		grid[b][a].color = it->color;
 8001c68:	79ba      	ldrb	r2, [r7, #6]
 8001c6a:	79f9      	ldrb	r1, [r7, #7]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f8b3 4080 	ldrh.w	r4, [r3, #128]	; 0x80
 8001c72:	480c      	ldr	r0, [pc, #48]	; (8001ca4 <set_block_static+0xb0>)
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	440b      	add	r3, r1
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4403      	add	r3, r0
 8001c82:	4622      	mov	r2, r4
 8001c84:	805a      	strh	r2, [r3, #2]
	for(i=0;i<4;i++)
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d9c0      	bls.n	8001c14 <set_block_static+0x20>
	}
}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc90      	pop	{r4, r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	20000444 	.word	0x20000444
 8001ca0:	200000a8 	.word	0x200000a8
 8001ca4:	2000046c 	.word	0x2000046c

08001ca8 <block_reset>:



void block_reset() {
 8001ca8:	b598      	push	{r3, r4, r7, lr}
 8001caa:	af00      	add	r7, sp, #0
    block = block_next1;
 8001cac:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <block_reset+0x78>)
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <block_reset+0x7c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6013      	str	r3, [r2, #0]
    block_next1 = block_next2;
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <block_reset+0x7c>)
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <block_reset+0x80>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6013      	str	r3, [r2, #0]
    srand(uwTick*rand());
 8001cbc:	f007 fc70 	bl	80095a0 <rand>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <block_reset+0x84>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	fb03 f302 	mul.w	r3, r3, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f007 fc43 	bl	8009558 <srand>
    block_next2 = (block_config){
        .x = 3, .y = GRID_HEIGHT-4,
        .shape = rand()%SHAPE_NUM,
 8001cd2:	f007 fc65 	bl	80095a0 <rand>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <block_reset+0x88>)
 8001cda:	fb83 1302 	smull	r1, r3, r3, r2
 8001cde:	4413      	add	r3, r2
 8001ce0:	1099      	asrs	r1, r3, #2
 8001ce2:	17d3      	asrs	r3, r2, #31
 8001ce4:	1ac9      	subs	r1, r1, r3
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	1a5b      	subs	r3, r3, r1
 8001cec:	1ad1      	subs	r1, r2, r3
    block_next2 = (block_config){
 8001cee:	b2cc      	uxtb	r4, r1
        .direction = rand()%4
 8001cf0:	f007 fc56 	bl	80095a0 <rand>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	425a      	negs	r2, r3
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	f002 0203 	and.w	r2, r2, #3
 8001d00:	bf58      	it	pl
 8001d02:	4253      	negpl	r3, r2
    block_next2 = (block_config){
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <block_reset+0x80>)
 8001d08:	2103      	movs	r1, #3
 8001d0a:	7019      	strb	r1, [r3, #0]
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <block_reset+0x80>)
 8001d0e:	2110      	movs	r1, #16
 8001d10:	7059      	strb	r1, [r3, #1]
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <block_reset+0x80>)
 8001d14:	4621      	mov	r1, r4
 8001d16:	7099      	strb	r1, [r3, #2]
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <block_reset+0x80>)
 8001d1a:	70da      	strb	r2, [r3, #3]
    };
}
 8001d1c:	bf00      	nop
 8001d1e:	bd98      	pop	{r3, r4, r7, pc}
 8001d20:	20000444 	.word	0x20000444
 8001d24:	2000044c 	.word	0x2000044c
 8001d28:	20000448 	.word	0x20000448
 8001d2c:	200000a4 	.word	0x200000a4
 8001d30:	92492493 	.word	0x92492493

08001d34 <block_init>:

void block_init() {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
    srand(uwTick*rand());
 8001d3a:	f007 fc31 	bl	80095a0 <rand>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <block_init+0x24>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	fb03 f302 	mul.w	r3, r3, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f007 fc04 	bl	8009558 <srand>
    uint8_t i;
    for(i = 0; i < 3; i++){
 8001d50:	2300      	movs	r3, #0
 8001d52:	71fb      	strb	r3, [r7, #7]
 8001d54:	e007      	b.n	8001d66 <block_init+0x32>
 8001d56:	bf00      	nop
 8001d58:	200000a4 	.word	0x200000a4
      block_reset();
 8001d5c:	f7ff ffa4 	bl	8001ca8 <block_reset>
    for(i = 0; i < 3; i++){
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	3301      	adds	r3, #1
 8001d64:	71fb      	strb	r3, [r7, #7]
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d9f7      	bls.n	8001d5c <block_init+0x28>
    }

    shape_list[SHAPE_O] = (shapes){
 8001d6c:	4bcd      	ldr	r3, [pc, #820]	; (80020a4 <block_init+0x370>)
 8001d6e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001d72:	2284      	movs	r2, #132	; 0x84
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f007 fbce 	bl	8009518 <memset>
 8001d7c:	4bc9      	ldr	r3, [pc, #804]	; (80020a4 <block_init+0x370>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
 8001d84:	4bc7      	ldr	r3, [pc, #796]	; (80020a4 <block_init+0x370>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
 8001d8c:	4bc5      	ldr	r3, [pc, #788]	; (80020a4 <block_init+0x370>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
 8001d94:	4bc3      	ldr	r3, [pc, #780]	; (80020a4 <block_init+0x370>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
 8001d9c:	4bc1      	ldr	r3, [pc, #772]	; (80020a4 <block_init+0x370>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
 8001da4:	4bbf      	ldr	r3, [pc, #764]	; (80020a4 <block_init+0x370>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
 8001dac:	4bbd      	ldr	r3, [pc, #756]	; (80020a4 <block_init+0x370>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 21bd 	strb.w	r2, [r3, #445]	; 0x1bd
 8001db4:	4bbb      	ldr	r3, [pc, #748]	; (80020a4 <block_init+0x370>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
 8001dbc:	4bb9      	ldr	r3, [pc, #740]	; (80020a4 <block_init+0x370>)
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 8001dc4:	4bb7      	ldr	r3, [pc, #732]	; (80020a4 <block_init+0x370>)
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
 8001dcc:	4bb5      	ldr	r3, [pc, #724]	; (80020a4 <block_init+0x370>)
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
 8001dd4:	4bb3      	ldr	r3, [pc, #716]	; (80020a4 <block_init+0x370>)
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
 8001ddc:	4bb1      	ldr	r3, [pc, #708]	; (80020a4 <block_init+0x370>)
 8001dde:	2203      	movs	r2, #3
 8001de0:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
 8001de4:	4baf      	ldr	r3, [pc, #700]	; (80020a4 <block_init+0x370>)
 8001de6:	2203      	movs	r2, #3
 8001de8:	f883 21dd 	strb.w	r2, [r3, #477]	; 0x1dd
 8001dec:	4bad      	ldr	r3, [pc, #692]	; (80020a4 <block_init+0x370>)
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
 8001df4:	4bab      	ldr	r3, [pc, #684]	; (80020a4 <block_init+0x370>)
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
 8001dfc:	4ba9      	ldr	r3, [pc, #676]	; (80020a4 <block_init+0x370>)
 8001dfe:	2203      	movs	r2, #3
 8001e00:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8001e04:	4ba7      	ldr	r3, [pc, #668]	; (80020a4 <block_init+0x370>)
 8001e06:	2203      	movs	r2, #3
 8001e08:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8001e0c:	4ba5      	ldr	r3, [pc, #660]	; (80020a4 <block_init+0x370>)
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8001e14:	4ba3      	ldr	r3, [pc, #652]	; (80020a4 <block_init+0x370>)
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
 8001e1c:	4ba1      	ldr	r3, [pc, #644]	; (80020a4 <block_init+0x370>)
 8001e1e:	2203      	movs	r2, #3
 8001e20:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
 8001e24:	4b9f      	ldr	r3, [pc, #636]	; (80020a4 <block_init+0x370>)
 8001e26:	2203      	movs	r2, #3
 8001e28:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
 8001e2c:	4b9d      	ldr	r3, [pc, #628]	; (80020a4 <block_init+0x370>)
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8001e34:	4b9b      	ldr	r3, [pc, #620]	; (80020a4 <block_init+0x370>)
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
 8001e3c:	4b99      	ldr	r3, [pc, #612]	; (80020a4 <block_init+0x370>)
 8001e3e:	221f      	movs	r2, #31
 8001e40:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
 8001e44:	4b97      	ldr	r3, [pc, #604]	; (80020a4 <block_init+0x370>)
 8001e46:	2204      	movs	r2, #4
 8001e48:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        .x={{0,1,0,1},{0,1,0,1},{0,1,0,1},{0,1,0,1}},
        .y={{3,3,2,2},{3,3,2,2},{3,3,2,2},{3,3,2,2}},
        .color = BLUE,
    	.cell_num = 4};
    shape_list[SHAPE_S] = (shapes){
 8001e4c:	4b95      	ldr	r3, [pc, #596]	; (80020a4 <block_init+0x370>)
 8001e4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001e52:	2284      	movs	r2, #132	; 0x84
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f007 fb5e 	bl	8009518 <memset>
 8001e5c:	4b91      	ldr	r3, [pc, #580]	; (80020a4 <block_init+0x370>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
 8001e64:	4b8f      	ldr	r3, [pc, #572]	; (80020a4 <block_init+0x370>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
 8001e6c:	4b8d      	ldr	r3, [pc, #564]	; (80020a4 <block_init+0x370>)
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
 8001e74:	4b8b      	ldr	r3, [pc, #556]	; (80020a4 <block_init+0x370>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 8001e7c:	4b89      	ldr	r3, [pc, #548]	; (80020a4 <block_init+0x370>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 8001e84:	4b87      	ldr	r3, [pc, #540]	; (80020a4 <block_init+0x370>)
 8001e86:	2202      	movs	r2, #2
 8001e88:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 8001e8c:	4b85      	ldr	r3, [pc, #532]	; (80020a4 <block_init+0x370>)
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
 8001e94:	4b83      	ldr	r3, [pc, #524]	; (80020a4 <block_init+0x370>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 8001e9c:	4b81      	ldr	r3, [pc, #516]	; (80020a4 <block_init+0x370>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 8001ea4:	4b7f      	ldr	r3, [pc, #508]	; (80020a4 <block_init+0x370>)
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
 8001eac:	4b7d      	ldr	r3, [pc, #500]	; (80020a4 <block_init+0x370>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
 8001eb4:	4b7b      	ldr	r3, [pc, #492]	; (80020a4 <block_init+0x370>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
 8001ebc:	4b79      	ldr	r3, [pc, #484]	; (80020a4 <block_init+0x370>)
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
 8001ec4:	4b77      	ldr	r3, [pc, #476]	; (80020a4 <block_init+0x370>)
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 2243 	strb.w	r2, [r3, #579]	; 0x243
 8001ecc:	4b75      	ldr	r3, [pc, #468]	; (80020a4 <block_init+0x370>)
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 8001ed4:	4b73      	ldr	r3, [pc, #460]	; (80020a4 <block_init+0x370>)
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8001edc:	4b71      	ldr	r3, [pc, #452]	; (80020a4 <block_init+0x370>)
 8001ede:	2203      	movs	r2, #3
 8001ee0:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
 8001ee4:	4b6f      	ldr	r3, [pc, #444]	; (80020a4 <block_init+0x370>)
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253
 8001eec:	4b6d      	ldr	r3, [pc, #436]	; (80020a4 <block_init+0x370>)
 8001eee:	2203      	movs	r2, #3
 8001ef0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
 8001ef4:	4b6b      	ldr	r3, [pc, #428]	; (80020a4 <block_init+0x370>)
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8001efc:	4b69      	ldr	r3, [pc, #420]	; (80020a4 <block_init+0x370>)
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8001f04:	4b67      	ldr	r3, [pc, #412]	; (80020a4 <block_init+0x370>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2263 	strb.w	r2, [r3, #611]	; 0x263
 8001f0c:	4b65      	ldr	r3, [pc, #404]	; (80020a4 <block_init+0x370>)
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
 8001f14:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <block_init+0x370>)
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
 8001f1c:	4b61      	ldr	r3, [pc, #388]	; (80020a4 <block_init+0x370>)
 8001f1e:	2203      	movs	r2, #3
 8001f20:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
 8001f24:	4b5f      	ldr	r3, [pc, #380]	; (80020a4 <block_init+0x370>)
 8001f26:	2203      	movs	r2, #3
 8001f28:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
 8001f2c:	4b5d      	ldr	r3, [pc, #372]	; (80020a4 <block_init+0x370>)
 8001f2e:	2203      	movs	r2, #3
 8001f30:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
 8001f34:	4b5b      	ldr	r3, [pc, #364]	; (80020a4 <block_init+0x370>)
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
 8001f3c:	4b59      	ldr	r3, [pc, #356]	; (80020a4 <block_init+0x370>)
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
 8001f44:	4b57      	ldr	r3, [pc, #348]	; (80020a4 <block_init+0x370>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2283 	strb.w	r2, [r3, #643]	; 0x283
 8001f4c:	4b55      	ldr	r3, [pc, #340]	; (80020a4 <block_init+0x370>)
 8001f4e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001f52:	f8a3 2290 	strh.w	r2, [r3, #656]	; 0x290
 8001f56:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <block_init+0x370>)
 8001f58:	2204      	movs	r2, #4
 8001f5a:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
        .x={{0,1,1,2},{1,1,2,2},{0,1,1,2},{1,1,2,2}},
        .y={{2,2,3,3},{3,2,2,1},{2,2,3,3},{3,2,2,1}},
		.color = GREEN,
		.cell_num = 4};
    shape_list[SHAPE_T] = (shapes){
 8001f5e:	4b51      	ldr	r3, [pc, #324]	; (80020a4 <block_init+0x370>)
 8001f60:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f64:	2284      	movs	r2, #132	; 0x84
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f007 fad5 	bl	8009518 <memset>
 8001f6e:	4b4d      	ldr	r3, [pc, #308]	; (80020a4 <block_init+0x370>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
 8001f76:	4b4b      	ldr	r3, [pc, #300]	; (80020a4 <block_init+0x370>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
 8001f7e:	4b49      	ldr	r3, [pc, #292]	; (80020a4 <block_init+0x370>)
 8001f80:	2202      	movs	r2, #2
 8001f82:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
 8001f86:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <block_init+0x370>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
 8001f8e:	4b45      	ldr	r3, [pc, #276]	; (80020a4 <block_init+0x370>)
 8001f90:	2202      	movs	r2, #2
 8001f92:	f883 22a5 	strb.w	r2, [r3, #677]	; 0x2a5
 8001f96:	4b43      	ldr	r3, [pc, #268]	; (80020a4 <block_init+0x370>)
 8001f98:	2202      	movs	r2, #2
 8001f9a:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
 8001f9e:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <block_init+0x370>)
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
 8001fa6:	4b3f      	ldr	r3, [pc, #252]	; (80020a4 <block_init+0x370>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 22b5 	strb.w	r2, [r3, #693]	; 0x2b5
 8001fae:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <block_init+0x370>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 22b6 	strb.w	r2, [r3, #694]	; 0x2b6
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <block_init+0x370>)
 8001fb8:	2202      	movs	r2, #2
 8001fba:	f883 22b7 	strb.w	r2, [r3, #695]	; 0x2b7
 8001fbe:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <block_init+0x370>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 22c7 	strb.w	r2, [r3, #711]	; 0x2c7
 8001fc6:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <block_init+0x370>)
 8001fc8:	2203      	movs	r2, #3
 8001fca:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
 8001fce:	4b35      	ldr	r3, [pc, #212]	; (80020a4 <block_init+0x370>)
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	f883 22d5 	strb.w	r2, [r3, #725]	; 0x2d5
 8001fd6:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <block_init+0x370>)
 8001fd8:	2202      	movs	r2, #2
 8001fda:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
 8001fde:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <block_init+0x370>)
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
 8001fe6:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <block_init+0x370>)
 8001fe8:	2202      	movs	r2, #2
 8001fea:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
 8001fee:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <block_init+0x370>)
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
 8001ff6:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <block_init+0x370>)
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 8001ffe:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <block_init+0x370>)
 8002000:	2201      	movs	r2, #1
 8002002:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
 8002006:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <block_init+0x370>)
 8002008:	2202      	movs	r2, #2
 800200a:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
 800200e:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <block_init+0x370>)
 8002010:	2203      	movs	r2, #3
 8002012:	f883 22f5 	strb.w	r2, [r3, #757]	; 0x2f5
 8002016:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <block_init+0x370>)
 8002018:	2202      	movs	r2, #2
 800201a:	f883 22f6 	strb.w	r2, [r3, #758]	; 0x2f6
 800201e:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <block_init+0x370>)
 8002020:	2202      	movs	r2, #2
 8002022:	f883 22f7 	strb.w	r2, [r3, #759]	; 0x2f7
 8002026:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <block_init+0x370>)
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <block_init+0x370>)
 8002030:	2202      	movs	r2, #2
 8002032:	f883 2305 	strb.w	r2, [r3, #773]	; 0x305
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <block_init+0x370>)
 8002038:	2203      	movs	r2, #3
 800203a:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <block_init+0x370>)
 8002040:	2202      	movs	r2, #2
 8002042:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <block_init+0x370>)
 8002048:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800204c:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <block_init+0x370>)
 8002052:	2204      	movs	r2, #4
 8002054:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
        .x={{0,1,1,2},{1,2,2,2},{0,1,1,2},{0,0,0,1}},
        .y={{3,3,2,3},{2,3,2,1},{2,3,2,2},{1,2,3,2}},
		.color = YELLOW,
		.cell_num = 4};
    shape_list[SHAPE_Z] = (shapes){
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <block_init+0x370>)
 800205a:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800205e:	2284      	movs	r2, #132	; 0x84
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f007 fa58 	bl	8009518 <memset>
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <block_init+0x370>)
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <block_init+0x370>)
 8002072:	2201      	movs	r2, #1
 8002074:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <block_init+0x370>)
 800207a:	2202      	movs	r2, #2
 800207c:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <block_init+0x370>)
 8002082:	2201      	movs	r2, #1
 8002084:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <block_init+0x370>)
 800208a:	2201      	movs	r2, #1
 800208c:	f883 232b 	strb.w	r2, [r3, #811]	; 0x32b
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <block_init+0x370>)
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
 8002098:	4b02      	ldr	r3, [pc, #8]	; (80020a4 <block_init+0x370>)
 800209a:	2201      	movs	r2, #1
 800209c:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
 80020a0:	e002      	b.n	80020a8 <block_init+0x374>
 80020a2:	bf00      	nop
 80020a4:	200000a8 	.word	0x200000a8
 80020a8:	4bcb      	ldr	r3, [pc, #812]	; (80023d8 <block_init+0x6a4>)
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
 80020b0:	4bc9      	ldr	r3, [pc, #804]	; (80023d8 <block_init+0x6a4>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 234a 	strb.w	r2, [r3, #842]	; 0x34a
 80020b8:	4bc7      	ldr	r3, [pc, #796]	; (80023d8 <block_init+0x6a4>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 234b 	strb.w	r2, [r3, #843]	; 0x34b
 80020c0:	4bc5      	ldr	r3, [pc, #788]	; (80023d8 <block_init+0x6a4>)
 80020c2:	2203      	movs	r2, #3
 80020c4:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
 80020c8:	4bc3      	ldr	r3, [pc, #780]	; (80023d8 <block_init+0x6a4>)
 80020ca:	2203      	movs	r2, #3
 80020cc:	f883 2359 	strb.w	r2, [r3, #857]	; 0x359
 80020d0:	4bc1      	ldr	r3, [pc, #772]	; (80023d8 <block_init+0x6a4>)
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 80020d8:	4bbf      	ldr	r3, [pc, #764]	; (80023d8 <block_init+0x6a4>)
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 235b 	strb.w	r2, [r3, #859]	; 0x35b
 80020e0:	4bbd      	ldr	r3, [pc, #756]	; (80023d8 <block_init+0x6a4>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
 80020e8:	4bbb      	ldr	r3, [pc, #748]	; (80023d8 <block_init+0x6a4>)
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 80020f0:	4bb9      	ldr	r3, [pc, #740]	; (80023d8 <block_init+0x6a4>)
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 236a 	strb.w	r2, [r3, #874]	; 0x36a
 80020f8:	4bb7      	ldr	r3, [pc, #732]	; (80023d8 <block_init+0x6a4>)
 80020fa:	2203      	movs	r2, #3
 80020fc:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b
 8002100:	4bb5      	ldr	r3, [pc, #724]	; (80023d8 <block_init+0x6a4>)
 8002102:	2203      	movs	r2, #3
 8002104:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
 8002108:	4bb3      	ldr	r3, [pc, #716]	; (80023d8 <block_init+0x6a4>)
 800210a:	2203      	movs	r2, #3
 800210c:	f883 2379 	strb.w	r2, [r3, #889]	; 0x379
 8002110:	4bb1      	ldr	r3, [pc, #708]	; (80023d8 <block_init+0x6a4>)
 8002112:	2202      	movs	r2, #2
 8002114:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
 8002118:	4baf      	ldr	r3, [pc, #700]	; (80023d8 <block_init+0x6a4>)
 800211a:	2202      	movs	r2, #2
 800211c:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
 8002120:	4bad      	ldr	r3, [pc, #692]	; (80023d8 <block_init+0x6a4>)
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2388 	strb.w	r2, [r3, #904]	; 0x388
 8002128:	4bab      	ldr	r3, [pc, #684]	; (80023d8 <block_init+0x6a4>)
 800212a:	2202      	movs	r2, #2
 800212c:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
 8002130:	4ba9      	ldr	r3, [pc, #676]	; (80023d8 <block_init+0x6a4>)
 8002132:	2202      	movs	r2, #2
 8002134:	f883 238a 	strb.w	r2, [r3, #906]	; 0x38a
 8002138:	4ba7      	ldr	r3, [pc, #668]	; (80023d8 <block_init+0x6a4>)
 800213a:	2203      	movs	r2, #3
 800213c:	f883 238b 	strb.w	r2, [r3, #907]	; 0x38b
 8002140:	4ba5      	ldr	r3, [pc, #660]	; (80023d8 <block_init+0x6a4>)
 8002142:	f64b 4240 	movw	r2, #48192	; 0xbc40
 8002146:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
 800214a:	4ba3      	ldr	r3, [pc, #652]	; (80023d8 <block_init+0x6a4>)
 800214c:	2204      	movs	r2, #4
 800214e:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a
        .x={{0,1,1,2},{0,0,1,1},{0,1,1,2},{0,0,1,1}},
        .y={{3,3,2,2},{1,2,2,3},{3,3,2,2},{1,2,2,3}},
		.color = BROWN,
		.cell_num = 4};
    shape_list[SHAPE_I] = (shapes){
 8002152:	4ba1      	ldr	r3, [pc, #644]	; (80023d8 <block_init+0x6a4>)
 8002154:	4618      	mov	r0, r3
 8002156:	2384      	movs	r3, #132	; 0x84
 8002158:	461a      	mov	r2, r3
 800215a:	2100      	movs	r1, #0
 800215c:	f007 f9dc 	bl	8009518 <memset>
 8002160:	4b9d      	ldr	r3, [pc, #628]	; (80023d8 <block_init+0x6a4>)
 8002162:	2201      	movs	r2, #1
 8002164:	705a      	strb	r2, [r3, #1]
 8002166:	4b9c      	ldr	r3, [pc, #624]	; (80023d8 <block_init+0x6a4>)
 8002168:	2202      	movs	r2, #2
 800216a:	709a      	strb	r2, [r3, #2]
 800216c:	4b9a      	ldr	r3, [pc, #616]	; (80023d8 <block_init+0x6a4>)
 800216e:	2203      	movs	r2, #3
 8002170:	70da      	strb	r2, [r3, #3]
 8002172:	4b99      	ldr	r3, [pc, #612]	; (80023d8 <block_init+0x6a4>)
 8002174:	2202      	movs	r2, #2
 8002176:	741a      	strb	r2, [r3, #16]
 8002178:	4b97      	ldr	r3, [pc, #604]	; (80023d8 <block_init+0x6a4>)
 800217a:	2202      	movs	r2, #2
 800217c:	745a      	strb	r2, [r3, #17]
 800217e:	4b96      	ldr	r3, [pc, #600]	; (80023d8 <block_init+0x6a4>)
 8002180:	2202      	movs	r2, #2
 8002182:	749a      	strb	r2, [r3, #18]
 8002184:	4b94      	ldr	r3, [pc, #592]	; (80023d8 <block_init+0x6a4>)
 8002186:	2202      	movs	r2, #2
 8002188:	74da      	strb	r2, [r3, #19]
 800218a:	4b93      	ldr	r3, [pc, #588]	; (80023d8 <block_init+0x6a4>)
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8002192:	4b91      	ldr	r3, [pc, #580]	; (80023d8 <block_init+0x6a4>)
 8002194:	2202      	movs	r2, #2
 8002196:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800219a:	4b8f      	ldr	r3, [pc, #572]	; (80023d8 <block_init+0x6a4>)
 800219c:	2203      	movs	r2, #3
 800219e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80021a2:	4b8d      	ldr	r3, [pc, #564]	; (80023d8 <block_init+0x6a4>)
 80021a4:	2202      	movs	r2, #2
 80021a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80021aa:	4b8b      	ldr	r3, [pc, #556]	; (80023d8 <block_init+0x6a4>)
 80021ac:	2202      	movs	r2, #2
 80021ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80021b2:	4b89      	ldr	r3, [pc, #548]	; (80023d8 <block_init+0x6a4>)
 80021b4:	2202      	movs	r2, #2
 80021b6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80021ba:	4b87      	ldr	r3, [pc, #540]	; (80023d8 <block_init+0x6a4>)
 80021bc:	2202      	movs	r2, #2
 80021be:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 80021c2:	4b85      	ldr	r3, [pc, #532]	; (80023d8 <block_init+0x6a4>)
 80021c4:	2203      	movs	r2, #3
 80021c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021ca:	4b83      	ldr	r3, [pc, #524]	; (80023d8 <block_init+0x6a4>)
 80021cc:	2203      	movs	r2, #3
 80021ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021d2:	4b81      	ldr	r3, [pc, #516]	; (80023d8 <block_init+0x6a4>)
 80021d4:	2203      	movs	r2, #3
 80021d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021da:	4b7f      	ldr	r3, [pc, #508]	; (80023d8 <block_init+0x6a4>)
 80021dc:	2203      	movs	r2, #3
 80021de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021e2:	4b7d      	ldr	r3, [pc, #500]	; (80023d8 <block_init+0x6a4>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80021ea:	4b7b      	ldr	r3, [pc, #492]	; (80023d8 <block_init+0x6a4>)
 80021ec:	2202      	movs	r2, #2
 80021ee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80021f2:	4b79      	ldr	r3, [pc, #484]	; (80023d8 <block_init+0x6a4>)
 80021f4:	2203      	movs	r2, #3
 80021f6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80021fa:	4b77      	ldr	r3, [pc, #476]	; (80023d8 <block_init+0x6a4>)
 80021fc:	2203      	movs	r2, #3
 80021fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002202:	4b75      	ldr	r3, [pc, #468]	; (80023d8 <block_init+0x6a4>)
 8002204:	2203      	movs	r2, #3
 8002206:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800220a:	4b73      	ldr	r3, [pc, #460]	; (80023d8 <block_init+0x6a4>)
 800220c:	2203      	movs	r2, #3
 800220e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8002212:	4b71      	ldr	r3, [pc, #452]	; (80023d8 <block_init+0x6a4>)
 8002214:	2203      	movs	r2, #3
 8002216:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 800221a:	4b6f      	ldr	r3, [pc, #444]	; (80023d8 <block_init+0x6a4>)
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002222:	4b6d      	ldr	r3, [pc, #436]	; (80023d8 <block_init+0x6a4>)
 8002224:	2202      	movs	r2, #2
 8002226:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 800222a:	4b6b      	ldr	r3, [pc, #428]	; (80023d8 <block_init+0x6a4>)
 800222c:	2203      	movs	r2, #3
 800222e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8002232:	4b69      	ldr	r3, [pc, #420]	; (80023d8 <block_init+0x6a4>)
 8002234:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002238:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 800223c:	4b66      	ldr	r3, [pc, #408]	; (80023d8 <block_init+0x6a4>)
 800223e:	2204      	movs	r2, #4
 8002240:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
        .x={{0,1,2,3},{2,2,2,2},{0,1,2,3},{2,2,2,2}},
        .y={{3,3,3,3},{0,1,2,3},{3,3,3,3},{0,1,2,3}},
		.color = RED,
		.cell_num = 4};
    shape_list[SHAPE_J] = (shapes){
 8002244:	4b64      	ldr	r3, [pc, #400]	; (80023d8 <block_init+0x6a4>)
 8002246:	3384      	adds	r3, #132	; 0x84
 8002248:	2284      	movs	r2, #132	; 0x84
 800224a:	2100      	movs	r1, #0
 800224c:	4618      	mov	r0, r3
 800224e:	f007 f963 	bl	8009518 <memset>
 8002252:	4b61      	ldr	r3, [pc, #388]	; (80023d8 <block_init+0x6a4>)
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 800225a:	4b5f      	ldr	r3, [pc, #380]	; (80023d8 <block_init+0x6a4>)
 800225c:	2202      	movs	r2, #2
 800225e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8002262:	4b5d      	ldr	r3, [pc, #372]	; (80023d8 <block_init+0x6a4>)
 8002264:	2202      	movs	r2, #2
 8002266:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 800226a:	4b5b      	ldr	r3, [pc, #364]	; (80023d8 <block_init+0x6a4>)
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8002272:	4b59      	ldr	r3, [pc, #356]	; (80023d8 <block_init+0x6a4>)
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 800227a:	4b57      	ldr	r3, [pc, #348]	; (80023d8 <block_init+0x6a4>)
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8002282:	4b55      	ldr	r3, [pc, #340]	; (80023d8 <block_init+0x6a4>)
 8002284:	2201      	movs	r2, #1
 8002286:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 800228a:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <block_init+0x6a4>)
 800228c:	2202      	movs	r2, #2
 800228e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8002292:	4b51      	ldr	r3, [pc, #324]	; (80023d8 <block_init+0x6a4>)
 8002294:	2201      	movs	r2, #1
 8002296:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 800229a:	4b4f      	ldr	r3, [pc, #316]	; (80023d8 <block_init+0x6a4>)
 800229c:	2201      	movs	r2, #1
 800229e:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 80022a2:	4b4d      	ldr	r3, [pc, #308]	; (80023d8 <block_init+0x6a4>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
 80022aa:	4b4b      	ldr	r3, [pc, #300]	; (80023d8 <block_init+0x6a4>)
 80022ac:	2202      	movs	r2, #2
 80022ae:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 80022b2:	4b49      	ldr	r3, [pc, #292]	; (80023d8 <block_init+0x6a4>)
 80022b4:	2203      	movs	r2, #3
 80022b6:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 80022ba:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <block_init+0x6a4>)
 80022bc:	2203      	movs	r2, #3
 80022be:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 80022c2:	4b45      	ldr	r3, [pc, #276]	; (80023d8 <block_init+0x6a4>)
 80022c4:	2203      	movs	r2, #3
 80022c6:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 80022ca:	4b43      	ldr	r3, [pc, #268]	; (80023d8 <block_init+0x6a4>)
 80022cc:	2202      	movs	r2, #2
 80022ce:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 80022d2:	4b41      	ldr	r3, [pc, #260]	; (80023d8 <block_init+0x6a4>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 80022da:	4b3f      	ldr	r3, [pc, #252]	; (80023d8 <block_init+0x6a4>)
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
 80022e2:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <block_init+0x6a4>)
 80022e4:	2202      	movs	r2, #2
 80022e6:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 80022ea:	4b3b      	ldr	r3, [pc, #236]	; (80023d8 <block_init+0x6a4>)
 80022ec:	2203      	movs	r2, #3
 80022ee:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
 80022f2:	4b39      	ldr	r3, [pc, #228]	; (80023d8 <block_init+0x6a4>)
 80022f4:	2203      	movs	r2, #3
 80022f6:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 80022fa:	4b37      	ldr	r3, [pc, #220]	; (80023d8 <block_init+0x6a4>)
 80022fc:	2202      	movs	r2, #2
 80022fe:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
 8002302:	4b35      	ldr	r3, [pc, #212]	; (80023d8 <block_init+0x6a4>)
 8002304:	2202      	movs	r2, #2
 8002306:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
 800230a:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <block_init+0x6a4>)
 800230c:	2202      	movs	r2, #2
 800230e:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 8002312:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <block_init+0x6a4>)
 8002314:	2201      	movs	r2, #1
 8002316:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 800231a:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <block_init+0x6a4>)
 800231c:	2202      	movs	r2, #2
 800231e:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
 8002322:	4b2d      	ldr	r3, [pc, #180]	; (80023d8 <block_init+0x6a4>)
 8002324:	2203      	movs	r2, #3
 8002326:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <block_init+0x6a4>)
 800232c:	2203      	movs	r2, #3
 800232e:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
 8002332:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <block_init+0x6a4>)
 8002334:	f64f 4207 	movw	r2, #64519	; 0xfc07
 8002338:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800233c:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <block_init+0x6a4>)
 800233e:	2204      	movs	r2, #4
 8002340:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        .x={{0,1,2,2},{0,1,1,1},{0,0,1,2},{1,1,1,2}},
        .y={{3,3,3,2},{1,1,2,3},{3,2,2,2},{1,2,3,3}},
		.color = BRRED,
		.cell_num = 4};
    shape_list[SHAPE_L] = (shapes){
 8002344:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <block_init+0x6a4>)
 8002346:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800234a:	2284      	movs	r2, #132	; 0x84
 800234c:	2100      	movs	r1, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f007 f8e2 	bl	8009518 <memset>
 8002354:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <block_init+0x6a4>)
 8002356:	2201      	movs	r2, #1
 8002358:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 800235c:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <block_init+0x6a4>)
 800235e:	2202      	movs	r2, #2
 8002360:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 8002364:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <block_init+0x6a4>)
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <block_init+0x6a4>)
 800236e:	2202      	movs	r2, #2
 8002370:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8002374:	4b18      	ldr	r3, [pc, #96]	; (80023d8 <block_init+0x6a4>)
 8002376:	2202      	movs	r2, #2
 8002378:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 800237c:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <block_init+0x6a4>)
 800237e:	2202      	movs	r2, #2
 8002380:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <block_init+0x6a4>)
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <block_init+0x6a4>)
 800238e:	2202      	movs	r2, #2
 8002390:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 8002394:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <block_init+0x6a4>)
 8002396:	2202      	movs	r2, #2
 8002398:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <block_init+0x6a4>)
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <block_init+0x6a4>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <block_init+0x6a4>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <block_init+0x6a4>)
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <block_init+0x6a4>)
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <block_init+0x6a4>)
 80023c6:	2203      	movs	r2, #3
 80023c8:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
 80023cc:	4b02      	ldr	r3, [pc, #8]	; (80023d8 <block_init+0x6a4>)
 80023ce:	2203      	movs	r2, #3
 80023d0:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
 80023d4:	e002      	b.n	80023dc <block_init+0x6a8>
 80023d6:	bf00      	nop
 80023d8:	200000a8 	.word	0x200000a8
 80023dc:	4b20      	ldr	r3, [pc, #128]	; (8002460 <block_init+0x72c>)
 80023de:	2203      	movs	r2, #3
 80023e0:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 80023e4:	4b1e      	ldr	r3, [pc, #120]	; (8002460 <block_init+0x72c>)
 80023e6:	2203      	movs	r2, #3
 80023e8:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 80023ec:	4b1c      	ldr	r3, [pc, #112]	; (8002460 <block_init+0x72c>)
 80023ee:	2203      	movs	r2, #3
 80023f0:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 80023f4:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <block_init+0x72c>)
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
 80023fc:	4b18      	ldr	r3, [pc, #96]	; (8002460 <block_init+0x72c>)
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
 8002404:	4b16      	ldr	r3, [pc, #88]	; (8002460 <block_init+0x72c>)
 8002406:	2202      	movs	r2, #2
 8002408:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
 800240c:	4b14      	ldr	r3, [pc, #80]	; (8002460 <block_init+0x72c>)
 800240e:	2202      	movs	r2, #2
 8002410:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <block_init+0x72c>)
 8002416:	2202      	movs	r2, #2
 8002418:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
 800241c:	4b10      	ldr	r3, [pc, #64]	; (8002460 <block_init+0x72c>)
 800241e:	2203      	movs	r2, #3
 8002420:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <block_init+0x72c>)
 8002426:	2203      	movs	r2, #3
 8002428:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <block_init+0x72c>)
 800242e:	2202      	movs	r2, #2
 8002430:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <block_init+0x72c>)
 8002436:	2201      	movs	r2, #1
 8002438:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <block_init+0x72c>)
 800243e:	2201      	movs	r2, #1
 8002440:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <block_init+0x72c>)
 8002446:	f248 4230 	movw	r2, #33840	; 0x8430
 800244a:	f8a3 2188 	strh.w	r2, [r3, #392]	; 0x188
 800244e:	4b04      	ldr	r3, [pc, #16]	; (8002460 <block_init+0x72c>)
 8002450:	2204      	movs	r2, #4
 8002452:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
        .x={{0,0,1,2},{1,2,2,2},{0,1,2,2},{1,1,1,2}},
        .y={{2,3,3,3},{3,3,2,1},{2,2,2,3},{3,2,1,1}},
		.color = GRAY,
		.cell_num = 4};

}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200000a8 	.word	0x200000a8

08002464 <button_update>:
	}
	button_update_interval = 40;
	button_task_stamp = 0;
}

void button_update() {
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
	if(uwTick - button_task_stamp >= button_update_interval){
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <button_update+0x28>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <button_update+0x2c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	1ad2      	subs	r2, r2, r3
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <button_update+0x30>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d305      	bcc.n	8002486 <button_update+0x22>
		button_task_stamp = uwTick;
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <button_update+0x28>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a04      	ldr	r2, [pc, #16]	; (8002490 <button_update+0x2c>)
 8002480:	6013      	str	r3, [r2, #0]
		read_button();
 8002482:	f000 f809 	bl	8002498 <read_button>
	}
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200000a4 	.word	0x200000a4
 8002490:	20000460 	.word	0x20000460
 8002494:	20000450 	.word	0x20000450

08002498 <read_button>:


void read_button() {
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<BUTTON_NUM; i++){
 800249e:	2300      	movs	r3, #0
 80024a0:	71fb      	strb	r3, [r7, #7]
 80024a2:	e01b      	b.n	80024dc <read_button+0x44>
		for(uint8_t j=BUTTON_BUFFER_SIZE-1; j>=1; j--) {
 80024a4:	2303      	movs	r3, #3
 80024a6:	71bb      	strb	r3, [r7, #6]
 80024a8:	e012      	b.n	80024d0 <read_button+0x38>
			button_state_buffer[i][j]=button_state_buffer[i][j-1];
 80024aa:	79f8      	ldrb	r0, [r7, #7]
 80024ac:	79bb      	ldrb	r3, [r7, #6]
 80024ae:	1e59      	subs	r1, r3, #1
 80024b0:	79fa      	ldrb	r2, [r7, #7]
 80024b2:	79bb      	ldrb	r3, [r7, #6]
 80024b4:	4c23      	ldr	r4, [pc, #140]	; (8002544 <read_button+0xac>)
 80024b6:	0080      	lsls	r0, r0, #2
 80024b8:	4420      	add	r0, r4
 80024ba:	4401      	add	r1, r0
 80024bc:	7808      	ldrb	r0, [r1, #0]
 80024be:	4921      	ldr	r1, [pc, #132]	; (8002544 <read_button+0xac>)
 80024c0:	0092      	lsls	r2, r2, #2
 80024c2:	440a      	add	r2, r1
 80024c4:	4413      	add	r3, r2
 80024c6:	4602      	mov	r2, r0
 80024c8:	701a      	strb	r2, [r3, #0]
		for(uint8_t j=BUTTON_BUFFER_SIZE-1; j>=1; j--) {
 80024ca:	79bb      	ldrb	r3, [r7, #6]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	71bb      	strb	r3, [r7, #6]
 80024d0:	79bb      	ldrb	r3, [r7, #6]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1e9      	bne.n	80024aa <read_button+0x12>
	for(uint8_t i=0; i<BUTTON_NUM; i++){
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	3301      	adds	r3, #1
 80024da:	71fb      	strb	r3, [r7, #7]
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d9e0      	bls.n	80024a4 <read_button+0xc>
		}
	}
	// left
	if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_SET) {
 80024e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024e6:	4818      	ldr	r0, [pc, #96]	; (8002548 <read_button+0xb0>)
 80024e8:	f7fe fd5e 	bl	8000fa8 <HAL_GPIO_ReadPin>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d103      	bne.n	80024fa <read_button+0x62>
		button_state_buffer[0][0]=1;
 80024f2:	4b14      	ldr	r3, [pc, #80]	; (8002544 <read_button+0xac>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	e002      	b.n	8002500 <read_button+0x68>
	} else {
		button_state_buffer[0][0]=0;
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <read_button+0xac>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
	}
	// right
	if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_SET) {
 8002500:	2120      	movs	r1, #32
 8002502:	4812      	ldr	r0, [pc, #72]	; (800254c <read_button+0xb4>)
 8002504:	f7fe fd50 	bl	8000fa8 <HAL_GPIO_ReadPin>
 8002508:	4603      	mov	r3, r0
 800250a:	2b01      	cmp	r3, #1
 800250c:	d103      	bne.n	8002516 <read_button+0x7e>
		button_state_buffer[1][0]=1;
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <read_button+0xac>)
 8002510:	2201      	movs	r2, #1
 8002512:	711a      	strb	r2, [r3, #4]
 8002514:	e002      	b.n	800251c <read_button+0x84>
	} else {
		button_state_buffer[1][0]=0;
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <read_button+0xac>)
 8002518:	2200      	movs	r2, #0
 800251a:	711a      	strb	r2, [r3, #4]
	}
	if (HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin) == GPIO_PIN_SET) {
 800251c:	2101      	movs	r1, #1
 800251e:	480a      	ldr	r0, [pc, #40]	; (8002548 <read_button+0xb0>)
 8002520:	f7fe fd42 	bl	8000fa8 <HAL_GPIO_ReadPin>
 8002524:	4603      	mov	r3, r0
 8002526:	2b01      	cmp	r3, #1
 8002528:	d103      	bne.n	8002532 <read_button+0x9a>
		button_state_buffer[2][0]=1;
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <read_button+0xac>)
 800252c:	2201      	movs	r2, #1
 800252e:	721a      	strb	r2, [r3, #8]
 8002530:	e002      	b.n	8002538 <read_button+0xa0>
	} else {
		button_state_buffer[2][0]=0;
 8002532:	4b04      	ldr	r3, [pc, #16]	; (8002544 <read_button+0xac>)
 8002534:	2200      	movs	r2, #0
 8002536:	721a      	strb	r2, [r3, #8]
	}

	button_action();
 8002538:	f000 f80a 	bl	8002550 <button_action>
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bd90      	pop	{r4, r7, pc}
 8002544:	20000454 	.word	0x20000454
 8002548:	40010800 	.word	0x40010800
 800254c:	40011000 	.word	0x40011000

08002550 <button_action>:

void button_action() {
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
	if (button_state_buffer[0][0]==0 && button_state_buffer[0][1]==1 && button_state_buffer[0][2]==1 && button_state_buffer[0][3]==1) {
 8002554:	4b34      	ldr	r3, [pc, #208]	; (8002628 <button_action+0xd8>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d120      	bne.n	800259e <button_action+0x4e>
 800255c:	4b32      	ldr	r3, [pc, #200]	; (8002628 <button_action+0xd8>)
 800255e:	785b      	ldrb	r3, [r3, #1]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d11c      	bne.n	800259e <button_action+0x4e>
 8002564:	4b30      	ldr	r3, [pc, #192]	; (8002628 <button_action+0xd8>)
 8002566:	789b      	ldrb	r3, [r3, #2]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d118      	bne.n	800259e <button_action+0x4e>
 800256c:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <button_action+0xd8>)
 800256e:	78db      	ldrb	r3, [r3, #3]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d114      	bne.n	800259e <button_action+0x4e>
		if (button_state_buffer[2][0]==0 && button_state_buffer[2][1]==0 && button_state_buffer[2][2]==0 && button_state_buffer[2][3]==0) {
 8002574:	4b2c      	ldr	r3, [pc, #176]	; (8002628 <button_action+0xd8>)
 8002576:	7a1b      	ldrb	r3, [r3, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10e      	bne.n	800259a <button_action+0x4a>
 800257c:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <button_action+0xd8>)
 800257e:	7a5b      	ldrb	r3, [r3, #9]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10a      	bne.n	800259a <button_action+0x4a>
 8002584:	4b28      	ldr	r3, [pc, #160]	; (8002628 <button_action+0xd8>)
 8002586:	7a9b      	ldrb	r3, [r3, #10]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d106      	bne.n	800259a <button_action+0x4a>
 800258c:	4b26      	ldr	r3, [pc, #152]	; (8002628 <button_action+0xd8>)
 800258e:	7adb      	ldrb	r3, [r3, #11]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <button_action+0x4a>
			// left shift
			grid_move_left();
 8002594:	f000 f866 	bl	8002664 <grid_move_left>
 8002598:	e001      	b.n	800259e <button_action+0x4e>
		} else {
			// rotate;
			grid_rotation();
 800259a:	f000 f8b5 	bl	8002708 <grid_rotation>
		}
	}
	if (button_state_buffer[1][0]==0 && button_state_buffer[1][1]==1 && button_state_buffer[1][2]==1 && button_state_buffer[1][3]==1) {
 800259e:	4b22      	ldr	r3, [pc, #136]	; (8002628 <button_action+0xd8>)
 80025a0:	791b      	ldrb	r3, [r3, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d120      	bne.n	80025e8 <button_action+0x98>
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <button_action+0xd8>)
 80025a8:	795b      	ldrb	r3, [r3, #5]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d11c      	bne.n	80025e8 <button_action+0x98>
 80025ae:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <button_action+0xd8>)
 80025b0:	799b      	ldrb	r3, [r3, #6]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d118      	bne.n	80025e8 <button_action+0x98>
 80025b6:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <button_action+0xd8>)
 80025b8:	79db      	ldrb	r3, [r3, #7]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d114      	bne.n	80025e8 <button_action+0x98>
		if (button_state_buffer[2][0]==0 && button_state_buffer[2][1]==0 && button_state_buffer[2][2]==0 && button_state_buffer[2][3]==0) {
 80025be:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <button_action+0xd8>)
 80025c0:	7a1b      	ldrb	r3, [r3, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10e      	bne.n	80025e4 <button_action+0x94>
 80025c6:	4b18      	ldr	r3, [pc, #96]	; (8002628 <button_action+0xd8>)
 80025c8:	7a5b      	ldrb	r3, [r3, #9]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10a      	bne.n	80025e4 <button_action+0x94>
 80025ce:	4b16      	ldr	r3, [pc, #88]	; (8002628 <button_action+0xd8>)
 80025d0:	7a9b      	ldrb	r3, [r3, #10]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <button_action+0x94>
 80025d6:	4b14      	ldr	r3, [pc, #80]	; (8002628 <button_action+0xd8>)
 80025d8:	7adb      	ldrb	r3, [r3, #11]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d102      	bne.n	80025e4 <button_action+0x94>
			// right shift
			grid_move_right();
 80025de:	f000 f85b 	bl	8002698 <grid_move_right>
 80025e2:	e001      	b.n	80025e8 <button_action+0x98>
		} else {
			// goto floor instantly;
			grid_quick_fall_down();
 80025e4:	f000 f8ba 	bl	800275c <grid_quick_fall_down>
		}
	}
	// if wk_up is pressed, red light will on
	if (button_state_buffer[2][0]==0 && button_state_buffer[2][1]==0 && button_state_buffer[2][2]==0 && button_state_buffer[2][3]==0) {
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <button_action+0xd8>)
 80025ea:	7a1b      	ldrb	r3, [r3, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d112      	bne.n	8002616 <button_action+0xc6>
 80025f0:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <button_action+0xd8>)
 80025f2:	7a5b      	ldrb	r3, [r3, #9]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10e      	bne.n	8002616 <button_action+0xc6>
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <button_action+0xd8>)
 80025fa:	7a9b      	ldrb	r3, [r3, #10]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10a      	bne.n	8002616 <button_action+0xc6>
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <button_action+0xd8>)
 8002602:	7adb      	ldrb	r3, [r3, #11]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d106      	bne.n	8002616 <button_action+0xc6>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8002608:	2201      	movs	r2, #1
 800260a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800260e:	4807      	ldr	r0, [pc, #28]	; (800262c <button_action+0xdc>)
 8002610:	f7fe fce1 	bl	8000fd6 <HAL_GPIO_WritePin>
 8002614:	e005      	b.n	8002622 <button_action+0xd2>
	} else {
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8002616:	2200      	movs	r2, #0
 8002618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800261c:	4803      	ldr	r0, [pc, #12]	; (800262c <button_action+0xdc>)
 800261e:	f7fe fcda 	bl	8000fd6 <HAL_GPIO_WritePin>
	}
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000454 	.word	0x20000454
 800262c:	40010800 	.word	0x40010800

08002630 <game_update>:
uint16_t score;
uint32_t fall_down_interval; // time gap to fall down

uint32_t fall_task_stamp = 0;

void game_update() {
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
	if(uwTick - fall_task_stamp >= fall_down_interval){
 8002634:	4b08      	ldr	r3, [pc, #32]	; (8002658 <game_update+0x28>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <game_update+0x2c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	1ad2      	subs	r2, r2, r3
 800263e:	4b08      	ldr	r3, [pc, #32]	; (8002660 <game_update+0x30>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d305      	bcc.n	8002652 <game_update+0x22>
		fall_task_stamp = uwTick;
 8002646:	4b04      	ldr	r3, [pc, #16]	; (8002658 <game_update+0x28>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a04      	ldr	r2, [pc, #16]	; (800265c <game_update+0x2c>)
 800264c:	6013      	str	r3, [r2, #0]
		grid_fall_down();
 800264e:	f000 f8a3 	bl	8002798 <grid_fall_down>
	}
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200000a4 	.word	0x200000a4
 800265c:	2000008c 	.word	0x2000008c
 8002660:	20000468 	.word	0x20000468

08002664 <grid_move_left>:


void grid_move_left(){
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
	if(left_shift_check()){
 8002668:	f7ff f8b8 	bl	80017dc <left_shift_check>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00e      	beq.n	8002690 <grid_move_left+0x2c>
		draw_main_block(1);
 8002672:	2001      	movs	r0, #1
 8002674:	f006 faf4 	bl	8008c60 <draw_main_block>
		block.x -= 1;
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <grid_move_left+0x30>)
 800267a:	f993 3000 	ldrsb.w	r3, [r3]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b2db      	uxtb	r3, r3
 8002684:	b25a      	sxtb	r2, r3
 8002686:	4b03      	ldr	r3, [pc, #12]	; (8002694 <grid_move_left+0x30>)
 8002688:	701a      	strb	r2, [r3, #0]
		draw_main_block(0);
 800268a:	2000      	movs	r0, #0
 800268c:	f006 fae8 	bl	8008c60 <draw_main_block>
	}
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000444 	.word	0x20000444

08002698 <grid_move_right>:

void grid_move_right(){
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
	if(right_shift_check()){
 800269c:	f7ff f8fe 	bl	800189c <right_shift_check>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00e      	beq.n	80026c4 <grid_move_right+0x2c>
		draw_main_block(1);
 80026a6:	2001      	movs	r0, #1
 80026a8:	f006 fada 	bl	8008c60 <draw_main_block>
		block.x += 1;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <grid_move_right+0x30>)
 80026ae:	f993 3000 	ldrsb.w	r3, [r3]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	3301      	adds	r3, #1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	b25a      	sxtb	r2, r3
 80026ba:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <grid_move_right+0x30>)
 80026bc:	701a      	strb	r2, [r3, #0]
		draw_main_block(0);
 80026be:	2000      	movs	r0, #0
 80026c0:	f006 face 	bl	8008c60 <draw_main_block>
	}
}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000444 	.word	0x20000444

080026cc <reset_grid_fall_speed>:

void reset_grid_fall_speed(){
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
	fall_down_interval = INIT_SPEED;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <reset_grid_fall_speed+0x14>)
 80026d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80026d6:	601a      	str	r2, [r3, #0]
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	20000468 	.word	0x20000468

080026e4 <accelerate_fall_speed>:

void accelerate_fall_speed() {
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
    if(fall_down_interval > 200){
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <accelerate_fall_speed+0x20>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2bc8      	cmp	r3, #200	; 0xc8
 80026ee:	d904      	bls.n	80026fa <accelerate_fall_speed+0x16>
	    fall_down_interval -= STEP_SPEED;
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <accelerate_fall_speed+0x20>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	3b14      	subs	r3, #20
 80026f6:	4a03      	ldr	r2, [pc, #12]	; (8002704 <accelerate_fall_speed+0x20>)
 80026f8:	6013      	str	r3, [r2, #0]
    }
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000468 	.word	0x20000468

08002708 <grid_rotation>:

void grid_rotation(){
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
	if(rotation_check()){
 800270c:	f7ff f986 	bl	8001a1c <rotation_check>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d012      	beq.n	800273c <grid_rotation+0x34>
		draw_main_block(1);
 8002716:	2001      	movs	r0, #1
 8002718:	f006 faa2 	bl	8008c60 <draw_main_block>
		block.direction = (block.direction + 1)%4;
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <grid_rotation+0x38>)
 800271e:	78db      	ldrb	r3, [r3, #3]
 8002720:	3301      	adds	r3, #1
 8002722:	425a      	negs	r2, r3
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	f002 0203 	and.w	r2, r2, #3
 800272c:	bf58      	it	pl
 800272e:	4253      	negpl	r3, r2
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4b03      	ldr	r3, [pc, #12]	; (8002740 <grid_rotation+0x38>)
 8002734:	70da      	strb	r2, [r3, #3]
		draw_main_block(0);
 8002736:	2000      	movs	r0, #0
 8002738:	f006 fa92 	bl	8008c60 <draw_main_block>
	}
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000444 	.word	0x20000444

08002744 <game_fail_check>:

uint8_t game_fail_check() {
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
	if (intersection_check()){return 1;}
 8002748:	f7ff f9ca 	bl	8001ae0 <intersection_check>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <game_fail_check+0x12>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <game_fail_check+0x14>
	return 0;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}

0800275c <grid_quick_fall_down>:

void grid_quick_fall_down() {
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
	while (down_shift_check()) {
 8002760:	e011      	b.n	8002786 <grid_quick_fall_down+0x2a>
		draw_main_block(1);
 8002762:	2001      	movs	r0, #1
 8002764:	f006 fa7c 	bl	8008c60 <draw_main_block>
		block.y -= 1;
 8002768:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <grid_quick_fall_down+0x38>)
 800276a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800276e:	b2db      	uxtb	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b2db      	uxtb	r3, r3
 8002774:	b25a      	sxtb	r2, r3
 8002776:	4b07      	ldr	r3, [pc, #28]	; (8002794 <grid_quick_fall_down+0x38>)
 8002778:	705a      	strb	r2, [r3, #1]
		draw_main_block(0);
 800277a:	2000      	movs	r0, #0
 800277c:	f006 fa70 	bl	8008c60 <draw_main_block>
		// let fall down visible
		HAL_Delay(50);
 8002780:	2032      	movs	r0, #50	; 0x32
 8002782:	f7fe f9a1 	bl	8000ac8 <HAL_Delay>
	while (down_shift_check()) {
 8002786:	f7ff f8e9 	bl	800195c <down_shift_check>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1e8      	bne.n	8002762 <grid_quick_fall_down+0x6>
	}
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000444 	.word	0x20000444

08002798 <grid_fall_down>:

void grid_fall_down() {
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800279e:	2201      	movs	r2, #1
 80027a0:	2104      	movs	r1, #4
 80027a2:	4834      	ldr	r0, [pc, #208]	; (8002874 <grid_fall_down+0xdc>)
 80027a4:	f7fe fc17 	bl	8000fd6 <HAL_GPIO_WritePin>
	// if the grid can fall down
	if(down_shift_check()){
 80027a8:	f7ff f8d8 	bl	800195c <down_shift_check>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00f      	beq.n	80027d2 <grid_fall_down+0x3a>
		draw_main_block(1);
 80027b2:	2001      	movs	r0, #1
 80027b4:	f006 fa54 	bl	8008c60 <draw_main_block>
		block.y -= 1;
 80027b8:	4b2f      	ldr	r3, [pc, #188]	; (8002878 <grid_fall_down+0xe0>)
 80027ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	b25a      	sxtb	r2, r3
 80027c6:	4b2c      	ldr	r3, [pc, #176]	; (8002878 <grid_fall_down+0xe0>)
 80027c8:	705a      	strb	r2, [r3, #1]
		draw_main_block(0);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f006 fa48 	bl	8008c60 <draw_main_block>
		} else{
			// game over
			game_over(score);
		}
	}
}
 80027d0:	e04b      	b.n	800286a <grid_fall_down+0xd2>
		set_block_static();
 80027d2:	f7ff fa0f 	bl	8001bf4 <set_block_static>
		uint8_t row_num = delete_full_lines();
 80027d6:	f000 f875 	bl	80028c4 <delete_full_lines>
 80027da:	4603      	mov	r3, r0
 80027dc:	71bb      	strb	r3, [r7, #6]
		if(row_num){
 80027de:	79bb      	ldrb	r3, [r7, #6]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d026      	beq.n	8002832 <grid_fall_down+0x9a>
			score += row_num * row_num;
 80027e4:	79bb      	ldrb	r3, [r7, #6]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	79ba      	ldrb	r2, [r7, #6]
 80027ea:	b292      	uxth	r2, r2
 80027ec:	fb02 f303 	mul.w	r3, r2, r3
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	4b22      	ldr	r3, [pc, #136]	; (800287c <grid_fall_down+0xe4>)
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <grid_fall_down+0xe4>)
 80027fc:	801a      	strh	r2, [r3, #0]
			update_score(score);
 80027fe:	4b1f      	ldr	r3, [pc, #124]	; (800287c <grid_fall_down+0xe4>)
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f006 fafe 	bl	8008e04 <update_score>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002808:	2200      	movs	r2, #0
 800280a:	2104      	movs	r1, #4
 800280c:	4819      	ldr	r0, [pc, #100]	; (8002874 <grid_fall_down+0xdc>)
 800280e:	f7fe fbe2 	bl	8000fd6 <HAL_GPIO_WritePin>
			for (uint8_t i = 0; i < row_num; i++) {
 8002812:	2300      	movs	r3, #0
 8002814:	71fb      	strb	r3, [r7, #7]
 8002816:	e004      	b.n	8002822 <grid_fall_down+0x8a>
				accelerate_fall_speed();
 8002818:	f7ff ff64 	bl	80026e4 <accelerate_fall_speed>
			for (uint8_t i = 0; i < row_num; i++) {
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	3301      	adds	r3, #1
 8002820:	71fb      	strb	r3, [r7, #7]
 8002822:	79fa      	ldrb	r2, [r7, #7]
 8002824:	79bb      	ldrb	r3, [r7, #6]
 8002826:	429a      	cmp	r2, r3
 8002828:	d3f6      	bcc.n	8002818 <grid_fall_down+0x80>
			update_level();
 800282a:	f006 fb2b 	bl	8008e84 <update_level>
			grid_render();
 800282e:	f006 f9d3 	bl	8008bd8 <grid_render>
		draw_next_block1(1);
 8002832:	2001      	movs	r0, #1
 8002834:	f006 fa62 	bl	8008cfc <draw_next_block1>
		draw_next_block2(1);
 8002838:	2001      	movs	r0, #1
 800283a:	f006 faa1 	bl	8008d80 <draw_next_block2>
		block_reset();
 800283e:	f7ff fa33 	bl	8001ca8 <block_reset>
		if(!game_fail_check()){
 8002842:	f7ff ff7f 	bl	8002744 <game_fail_check>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <grid_fall_down+0xc8>
			draw_main_block(0);
 800284c:	2000      	movs	r0, #0
 800284e:	f006 fa07 	bl	8008c60 <draw_main_block>
			draw_next_block1(0);
 8002852:	2000      	movs	r0, #0
 8002854:	f006 fa52 	bl	8008cfc <draw_next_block1>
			draw_next_block2(0);
 8002858:	2000      	movs	r0, #0
 800285a:	f006 fa91 	bl	8008d80 <draw_next_block2>
}
 800285e:	e004      	b.n	800286a <grid_fall_down+0xd2>
			game_over(score);
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <grid_fall_down+0xe4>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f006 fd45 	bl	80092f4 <game_over>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40011400 	.word	0x40011400
 8002878:	20000444 	.word	0x20000444
 800287c:	20000464 	.word	0x20000464

08002880 <game_reset>:

void game_reset() {
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0

	grid_init();
 8002884:	f000 f8a4 	bl	80029d0 <grid_init>
	sub_grid_init();
 8002888:	f000 f8ca 	bl	8002a20 <sub_grid_init>
	block_init();
 800288c:	f7ff fa52 	bl	8001d34 <block_init>

	score=0;
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <game_reset+0x40>)
 8002892:	2200      	movs	r2, #0
 8002894:	801a      	strh	r2, [r3, #0]
	reset_grid_fall_speed();
 8002896:	f7ff ff19 	bl	80026cc <reset_grid_fall_speed>

	// reset all display
	draw_background();
 800289a:	f006 f837 	bl	800890c <draw_background>
	update_score(score);
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <game_reset+0x40>)
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f006 faae 	bl	8008e04 <update_score>
	draw_main_block(0);
 80028a8:	2000      	movs	r0, #0
 80028aa:	f006 f9d9 	bl	8008c60 <draw_main_block>
	draw_next_block1(0);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f006 fa24 	bl	8008cfc <draw_next_block1>
	draw_next_block2(0);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f006 fa63 	bl	8008d80 <draw_next_block2>
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000464 	.word	0x20000464

080028c4 <delete_full_lines>:

cell grid[GRID_HEIGHT][GRID_WIDTH];
cell sub_grid[4][4];

// find the line that is full and delete, return the number of lines deleted.
uint8_t delete_full_lines() {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
	int8_t x, y;
	uint8_t row_num = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	717b      	strb	r3, [r7, #5]

	// from up to down, for every row, delete the full row.
	for (y = GRID_HEIGHT ; y >=0 ; y--) {
 80028ce:	2314      	movs	r3, #20
 80028d0:	71bb      	strb	r3, [r7, #6]
 80028d2:	e02d      	b.n	8002930 <delete_full_lines+0x6c>
		for (x = 0; x < GRID_WIDTH; x++){
 80028d4:	2300      	movs	r3, #0
 80028d6:	71fb      	strb	r3, [r7, #7]
 80028d8:	e01e      	b.n	8002918 <delete_full_lines+0x54>
			if(grid[y][x].isEmpty) {
 80028da:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80028de:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80028e2:	4818      	ldr	r0, [pc, #96]	; (8002944 <delete_full_lines+0x80>)
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	440b      	add	r3, r1
 80028ee:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d115      	bne.n	8002922 <delete_full_lines+0x5e>
				break;
			}
			if(x == GRID_WIDTH-1){
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	2b09      	cmp	r3, #9
 80028fc:	d106      	bne.n	800290c <delete_full_lines+0x48>
				clear_row(y);
 80028fe:	79bb      	ldrb	r3, [r7, #6]
 8002900:	4618      	mov	r0, r3
 8002902:	f000 f821 	bl	8002948 <clear_row>
				row_num ++;
 8002906:	797b      	ldrb	r3, [r7, #5]
 8002908:	3301      	adds	r3, #1
 800290a:	717b      	strb	r3, [r7, #5]
		for (x = 0; x < GRID_WIDTH; x++){
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	3301      	adds	r3, #1
 8002914:	b2db      	uxtb	r3, r3
 8002916:	71fb      	strb	r3, [r7, #7]
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	2b09      	cmp	r3, #9
 800291e:	dddc      	ble.n	80028da <delete_full_lines+0x16>
 8002920:	e000      	b.n	8002924 <delete_full_lines+0x60>
				break;
 8002922:	bf00      	nop
	for (y = GRID_HEIGHT ; y >=0 ; y--) {
 8002924:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b2db      	uxtb	r3, r3
 800292e:	71bb      	strb	r3, [r7, #6]
 8002930:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002934:	2b00      	cmp	r3, #0
 8002936:	dacd      	bge.n	80028d4 <delete_full_lines+0x10>
			}
		}
	}

	return row_num;
 8002938:	797b      	ldrb	r3, [r7, #5]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	2000046c 	.word	0x2000046c

08002948 <clear_row>:

void clear_row(uint8_t line) {
 8002948:	b4b0      	push	{r4, r5, r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
	uint8_t x, y;
    //shift from upper to downer
    for (y = line; y < GRID_HEIGHT-1; y++) {
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	73bb      	strb	r3, [r7, #14]
 8002956:	e022      	b.n	800299e <clear_row+0x56>
        for (x = 0; x < GRID_WIDTH; x++) {
 8002958:	2300      	movs	r3, #0
 800295a:	73fb      	strb	r3, [r7, #15]
 800295c:	e019      	b.n	8002992 <clear_row+0x4a>
            grid[y][x] = grid[y+1][x];
 800295e:	7bbb      	ldrb	r3, [r7, #14]
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	7bf8      	ldrb	r0, [r7, #15]
 8002964:	7bb9      	ldrb	r1, [r7, #14]
 8002966:	7bfc      	ldrb	r4, [r7, #15]
 8002968:	4d18      	ldr	r5, [pc, #96]	; (80029cc <clear_row+0x84>)
 800296a:	460b      	mov	r3, r1
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	1919      	adds	r1, r3, r4
 8002974:	4c15      	ldr	r4, [pc, #84]	; (80029cc <clear_row+0x84>)
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	181a      	adds	r2, r3, r0
 8002980:	008b      	lsls	r3, r1, #2
 8002982:	442b      	add	r3, r5
 8002984:	0092      	lsls	r2, r2, #2
 8002986:	4422      	add	r2, r4
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	601a      	str	r2, [r3, #0]
        for (x = 0; x < GRID_WIDTH; x++) {
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	3301      	adds	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	2b09      	cmp	r3, #9
 8002996:	d9e2      	bls.n	800295e <clear_row+0x16>
    for (y = line; y < GRID_HEIGHT-1; y++) {
 8002998:	7bbb      	ldrb	r3, [r7, #14]
 800299a:	3301      	adds	r3, #1
 800299c:	73bb      	strb	r3, [r7, #14]
 800299e:	7bbb      	ldrb	r3, [r7, #14]
 80029a0:	2b12      	cmp	r3, #18
 80029a2:	d9d9      	bls.n	8002958 <clear_row+0x10>
        }
    }
    for (x = 0; x < GRID_WIDTH; x++) {
 80029a4:	2300      	movs	r3, #0
 80029a6:	73fb      	strb	r3, [r7, #15]
 80029a8:	e008      	b.n	80029bc <clear_row+0x74>
    	grid[GRID_HEIGHT-1][x].isEmpty = 1;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	4a07      	ldr	r2, [pc, #28]	; (80029cc <clear_row+0x84>)
 80029ae:	33be      	adds	r3, #190	; 0xbe
 80029b0:	2101      	movs	r1, #1
 80029b2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    for (x = 0; x < GRID_WIDTH; x++) {
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	3301      	adds	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b09      	cmp	r3, #9
 80029c0:	d9f3      	bls.n	80029aa <clear_row+0x62>
	}
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bcb0      	pop	{r4, r5, r7}
 80029ca:	4770      	bx	lr
 80029cc:	2000046c 	.word	0x2000046c

080029d0 <grid_init>:

void grid_init(){
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
	uint8_t x, y;
    for (y = 0; y < GRID_HEIGHT; y++) {
 80029d6:	2300      	movs	r3, #0
 80029d8:	71bb      	strb	r3, [r7, #6]
 80029da:	e016      	b.n	8002a0a <grid_init+0x3a>
        for (x = 0; x < GRID_WIDTH; x++) {
 80029dc:	2300      	movs	r3, #0
 80029de:	71fb      	strb	r3, [r7, #7]
 80029e0:	e00d      	b.n	80029fe <grid_init+0x2e>
            grid[y][x].isEmpty = 1;
 80029e2:	79ba      	ldrb	r2, [r7, #6]
 80029e4:	79f9      	ldrb	r1, [r7, #7]
 80029e6:	480d      	ldr	r0, [pc, #52]	; (8002a1c <grid_init+0x4c>)
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	440b      	add	r3, r1
 80029f2:	2201      	movs	r2, #1
 80029f4:	f800 2023 	strb.w	r2, [r0, r3, lsl #2]
        for (x = 0; x < GRID_WIDTH; x++) {
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	3301      	adds	r3, #1
 80029fc:	71fb      	strb	r3, [r7, #7]
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	2b09      	cmp	r3, #9
 8002a02:	d9ee      	bls.n	80029e2 <grid_init+0x12>
    for (y = 0; y < GRID_HEIGHT; y++) {
 8002a04:	79bb      	ldrb	r3, [r7, #6]
 8002a06:	3301      	adds	r3, #1
 8002a08:	71bb      	strb	r3, [r7, #6]
 8002a0a:	79bb      	ldrb	r3, [r7, #6]
 8002a0c:	2b13      	cmp	r3, #19
 8002a0e:	d9e5      	bls.n	80029dc <grid_init+0xc>
		}
    }
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	2000046c 	.word	0x2000046c

08002a20 <sub_grid_init>:

void sub_grid_init(){
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
	uint8_t x, y;
    for (y = 0; y < 4; y++) {
 8002a26:	2300      	movs	r3, #0
 8002a28:	71bb      	strb	r3, [r7, #6]
 8002a2a:	e013      	b.n	8002a54 <sub_grid_init+0x34>
        for (x = 0; x < 4; x++) {
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	71fb      	strb	r3, [r7, #7]
 8002a30:	e00a      	b.n	8002a48 <sub_grid_init+0x28>
            sub_grid[y][x].isEmpty=1;
 8002a32:	79ba      	ldrb	r2, [r7, #6]
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	490b      	ldr	r1, [pc, #44]	; (8002a64 <sub_grid_init+0x44>)
 8002a38:	0092      	lsls	r2, r2, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
        for (x = 0; x < 4; x++) {
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	3301      	adds	r3, #1
 8002a46:	71fb      	strb	r3, [r7, #7]
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d9f1      	bls.n	8002a32 <sub_grid_init+0x12>
    for (y = 0; y < 4; y++) {
 8002a4e:	79bb      	ldrb	r3, [r7, #6]
 8002a50:	3301      	adds	r3, #1
 8002a52:	71bb      	strb	r3, [r7, #6]
 8002a54:	79bb      	ldrb	r3, [r7, #6]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d9e8      	bls.n	8002a2c <sub_grid_init+0xc>
        }
    }
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	2000078c 	.word	0x2000078c

08002a68 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <LCD_WR_REG+0x40>)
 8002a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a78:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <LCD_WR_REG+0x40>)
 8002a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a80:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8002a82:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <LCD_WR_REG+0x44>)
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8002a88:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <LCD_WR_REG+0x40>)
 8002a8a:	2280      	movs	r2, #128	; 0x80
 8002a8c:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <LCD_WR_REG+0x40>)
 8002a90:	2280      	movs	r2, #128	; 0x80
 8002a92:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <LCD_WR_REG+0x40>)
 8002a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a9a:	611a      	str	r2, [r3, #16]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40011000 	.word	0x40011000
 8002aac:	40010c00 	.word	0x40010c00

08002ab0 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8002aba:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <LCD_WR_DATAX+0x40>)
 8002abc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ac0:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <LCD_WR_DATAX+0x40>)
 8002ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac8:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8002aca:	4a0a      	ldr	r2, [pc, #40]	; (8002af4 <LCD_WR_DATAX+0x44>)
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <LCD_WR_DATAX+0x40>)
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <LCD_WR_DATAX+0x40>)
 8002ad8:	2280      	movs	r2, #128	; 0x80
 8002ada:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <LCD_WR_DATAX+0x40>)
 8002ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ae2:	611a      	str	r2, [r3, #16]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40011000 	.word	0x40011000
 8002af4:	40010c00 	.word	0x40010c00

08002af8 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8002afe:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <LCD_RD_DATA+0x7c>)
 8002b00:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8002b04:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8002b06:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <LCD_RD_DATA+0x7c>)
 8002b08:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8002b0c:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8002b0e:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <LCD_RD_DATA+0x7c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8002b14:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <LCD_RD_DATA+0x80>)
 8002b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b1a:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8002b1c:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <LCD_RD_DATA+0x80>)
 8002b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b22:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8002b24:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <LCD_RD_DATA+0x80>)
 8002b26:	2240      	movs	r2, #64	; 0x40
 8002b28:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8002b2a:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <LCD_RD_DATA+0x84>)
 8002b2c:	889b      	ldrh	r3, [r3, #4]
 8002b2e:	f648 1289 	movw	r2, #35209	; 0x8989
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d102      	bne.n	8002b3c <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8002b36:	2001      	movs	r0, #1
 8002b38:	f7fd ffc6 	bl	8000ac8 <HAL_Delay>
	t = DATAIN
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <LCD_RD_DATA+0x7c>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <LCD_RD_DATA+0x80>)
 8002b44:	2240      	movs	r2, #64	; 0x40
 8002b46:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <LCD_RD_DATA+0x80>)
 8002b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b4e:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <LCD_RD_DATA+0x7c>)
 8002b52:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002b56:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <LCD_RD_DATA+0x7c>)
 8002b5a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002b5e:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <LCD_RD_DATA+0x7c>)
 8002b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b66:	60da      	str	r2, [r3, #12]
	return t;
 8002b68:	88fb      	ldrh	r3, [r7, #6]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40010c00 	.word	0x40010c00
 8002b78:	40011000 	.word	0x40011000
 8002b7c:	200007cc 	.word	0x200007cc

08002b80 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	460a      	mov	r2, r1
 8002b8a:	80fb      	strh	r3, [r7, #6]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff ff68 	bl	8002a68 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <LCD_WriteReg+0x4c>)
 8002b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b9e:	611a      	str	r2, [r3, #16]
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <LCD_WriteReg+0x4c>)
 8002ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba6:	615a      	str	r2, [r3, #20]
 8002ba8:	4a09      	ldr	r2, [pc, #36]	; (8002bd0 <LCD_WriteReg+0x50>)
 8002baa:	88bb      	ldrh	r3, [r7, #4]
 8002bac:	60d3      	str	r3, [r2, #12]
 8002bae:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <LCD_WriteReg+0x4c>)
 8002bb0:	2280      	movs	r2, #128	; 0x80
 8002bb2:	615a      	str	r2, [r3, #20]
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <LCD_WriteReg+0x4c>)
 8002bb6:	2280      	movs	r2, #128	; 0x80
 8002bb8:	611a      	str	r2, [r3, #16]
 8002bba:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <LCD_WriteReg+0x4c>)
 8002bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bc0:	611a      	str	r2, [r3, #16]
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40011000 	.word	0x40011000
 8002bd0:	40010c00 	.word	0x40010c00

08002bd4 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff41 	bl	8002a68 <LCD_WR_REG>
	return LCD_RD_DATA();
 8002be6:	f7ff ff87 	bl	8002af8 <LCD_RD_DATA>
 8002bea:	4603      	mov	r3, r0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <LCD_WriteRAM_Prepare+0x14>)
 8002bfa:	891b      	ldrh	r3, [r3, #8]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff33 	bl	8002a68 <LCD_WR_REG>
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200007cc 	.word	0x200007cc

08002c0c <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	460a      	mov	r2, r1
 8002c16:	80fb      	strh	r3, [r7, #6]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8002c1c:	4b73      	ldr	r3, [pc, #460]	; (8002dec <LCD_SetCursor+0x1e0>)
 8002c1e:	889b      	ldrh	r3, [r3, #4]
 8002c20:	f249 3241 	movw	r2, #37697	; 0x9341
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d005      	beq.n	8002c34 <LCD_SetCursor+0x28>
 8002c28:	4b70      	ldr	r3, [pc, #448]	; (8002dec <LCD_SetCursor+0x1e0>)
 8002c2a:	889b      	ldrh	r3, [r3, #4]
 8002c2c:	f245 3210 	movw	r2, #21264	; 0x5310
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d164      	bne.n	8002cfe <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8002c34:	4b6d      	ldr	r3, [pc, #436]	; (8002dec <LCD_SetCursor+0x1e0>)
 8002c36:	895b      	ldrh	r3, [r3, #10]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ff15 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8002c3e:	4b6c      	ldr	r3, [pc, #432]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c44:	611a      	str	r2, [r3, #16]
 8002c46:	4b6a      	ldr	r3, [pc, #424]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c4c:	615a      	str	r2, [r3, #20]
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	4b67      	ldr	r3, [pc, #412]	; (8002df4 <LCD_SetCursor+0x1e8>)
 8002c56:	60da      	str	r2, [r3, #12]
 8002c58:	4b65      	ldr	r3, [pc, #404]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002c5a:	2280      	movs	r2, #128	; 0x80
 8002c5c:	615a      	str	r2, [r3, #20]
 8002c5e:	4b64      	ldr	r3, [pc, #400]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002c60:	2280      	movs	r2, #128	; 0x80
 8002c62:	611a      	str	r2, [r3, #16]
 8002c64:	4b62      	ldr	r3, [pc, #392]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c6a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8002c6c:	4b60      	ldr	r3, [pc, #384]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c72:	611a      	str	r2, [r3, #16]
 8002c74:	4b5e      	ldr	r3, [pc, #376]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c7a:	615a      	str	r2, [r3, #20]
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	4a5d      	ldr	r2, [pc, #372]	; (8002df4 <LCD_SetCursor+0x1e8>)
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	60d3      	str	r3, [r2, #12]
 8002c84:	4b5a      	ldr	r3, [pc, #360]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	615a      	str	r2, [r3, #20]
 8002c8a:	4b59      	ldr	r3, [pc, #356]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002c8c:	2280      	movs	r2, #128	; 0x80
 8002c8e:	611a      	str	r2, [r3, #16]
 8002c90:	4b57      	ldr	r3, [pc, #348]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c96:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002c98:	4b54      	ldr	r3, [pc, #336]	; (8002dec <LCD_SetCursor+0x1e0>)
 8002c9a:	899b      	ldrh	r3, [r3, #12]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fee3 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8002ca2:	4b53      	ldr	r3, [pc, #332]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ca8:	611a      	str	r2, [r3, #16]
 8002caa:	4b51      	ldr	r3, [pc, #324]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cb0:	615a      	str	r2, [r3, #20]
 8002cb2:	88bb      	ldrh	r3, [r7, #4]
 8002cb4:	0a1b      	lsrs	r3, r3, #8
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	4b4e      	ldr	r3, [pc, #312]	; (8002df4 <LCD_SetCursor+0x1e8>)
 8002cba:	60da      	str	r2, [r3, #12]
 8002cbc:	4b4c      	ldr	r3, [pc, #304]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002cbe:	2280      	movs	r2, #128	; 0x80
 8002cc0:	615a      	str	r2, [r3, #20]
 8002cc2:	4b4b      	ldr	r3, [pc, #300]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002cc4:	2280      	movs	r2, #128	; 0x80
 8002cc6:	611a      	str	r2, [r3, #16]
 8002cc8:	4b49      	ldr	r3, [pc, #292]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cce:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8002cd0:	4b47      	ldr	r3, [pc, #284]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cd6:	611a      	str	r2, [r3, #16]
 8002cd8:	4b45      	ldr	r3, [pc, #276]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cde:	615a      	str	r2, [r3, #20]
 8002ce0:	88bb      	ldrh	r3, [r7, #4]
 8002ce2:	4a44      	ldr	r2, [pc, #272]	; (8002df4 <LCD_SetCursor+0x1e8>)
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	60d3      	str	r3, [r2, #12]
 8002ce8:	4b41      	ldr	r3, [pc, #260]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002cea:	2280      	movs	r2, #128	; 0x80
 8002cec:	615a      	str	r2, [r3, #20]
 8002cee:	4b40      	ldr	r3, [pc, #256]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002cf0:	2280      	movs	r2, #128	; 0x80
 8002cf2:	611a      	str	r2, [r3, #16]
 8002cf4:	4b3e      	ldr	r3, [pc, #248]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cfa:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8002cfc:	e248      	b.n	8003190 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8002cfe:	4b3b      	ldr	r3, [pc, #236]	; (8002dec <LCD_SetCursor+0x1e0>)
 8002d00:	889b      	ldrh	r3, [r3, #4]
 8002d02:	f646 0204 	movw	r2, #26628	; 0x6804
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d176      	bne.n	8002df8 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8002d0a:	4b38      	ldr	r3, [pc, #224]	; (8002dec <LCD_SetCursor+0x1e0>)
 8002d0c:	799b      	ldrb	r3, [r3, #6]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d106      	bne.n	8002d20 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8002d12:	4b36      	ldr	r3, [pc, #216]	; (8002dec <LCD_SetCursor+0x1e0>)
 8002d14:	881a      	ldrh	r2, [r3, #0]
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8002d20:	4b32      	ldr	r3, [pc, #200]	; (8002dec <LCD_SetCursor+0x1e0>)
 8002d22:	895b      	ldrh	r3, [r3, #10]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fe9f 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8002d2a:	4b31      	ldr	r3, [pc, #196]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d30:	611a      	str	r2, [r3, #16]
 8002d32:	4b2f      	ldr	r3, [pc, #188]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d38:	615a      	str	r2, [r3, #20]
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	0a1b      	lsrs	r3, r3, #8
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	4b2c      	ldr	r3, [pc, #176]	; (8002df4 <LCD_SetCursor+0x1e8>)
 8002d42:	60da      	str	r2, [r3, #12]
 8002d44:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002d46:	2280      	movs	r2, #128	; 0x80
 8002d48:	615a      	str	r2, [r3, #20]
 8002d4a:	4b29      	ldr	r3, [pc, #164]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002d4c:	2280      	movs	r2, #128	; 0x80
 8002d4e:	611a      	str	r2, [r3, #16]
 8002d50:	4b27      	ldr	r3, [pc, #156]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d56:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8002d58:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002d5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d5e:	611a      	str	r2, [r3, #16]
 8002d60:	4b23      	ldr	r3, [pc, #140]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d66:	615a      	str	r2, [r3, #20]
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	4a22      	ldr	r2, [pc, #136]	; (8002df4 <LCD_SetCursor+0x1e8>)
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	60d3      	str	r3, [r2, #12]
 8002d70:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002d72:	2280      	movs	r2, #128	; 0x80
 8002d74:	615a      	str	r2, [r3, #20]
 8002d76:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002d78:	2280      	movs	r2, #128	; 0x80
 8002d7a:	611a      	str	r2, [r3, #16]
 8002d7c:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d82:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <LCD_SetCursor+0x1e0>)
 8002d86:	899b      	ldrh	r3, [r3, #12]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fe6d 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8002d8e:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d94:	611a      	str	r2, [r3, #16]
 8002d96:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d9c:	615a      	str	r2, [r3, #20]
 8002d9e:	88bb      	ldrh	r3, [r7, #4]
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <LCD_SetCursor+0x1e8>)
 8002da6:	60da      	str	r2, [r3, #12]
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002daa:	2280      	movs	r2, #128	; 0x80
 8002dac:	615a      	str	r2, [r3, #20]
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002db0:	2280      	movs	r2, #128	; 0x80
 8002db2:	611a      	str	r2, [r3, #16]
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dba:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dc2:	611a      	str	r2, [r3, #16]
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dca:	615a      	str	r2, [r3, #20]
 8002dcc:	88bb      	ldrh	r3, [r7, #4]
 8002dce:	4a09      	ldr	r2, [pc, #36]	; (8002df4 <LCD_SetCursor+0x1e8>)
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	60d3      	str	r3, [r2, #12]
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	615a      	str	r2, [r3, #20]
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002ddc:	2280      	movs	r2, #128	; 0x80
 8002dde:	611a      	str	r2, [r3, #16]
 8002de0:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <LCD_SetCursor+0x1e4>)
 8002de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de6:	611a      	str	r2, [r3, #16]
}
 8002de8:	e1d2      	b.n	8003190 <LCD_SetCursor+0x584>
 8002dea:	bf00      	nop
 8002dec:	200007cc 	.word	0x200007cc
 8002df0:	40011000 	.word	0x40011000
 8002df4:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8002df8:	4b99      	ldr	r3, [pc, #612]	; (8003060 <LCD_SetCursor+0x454>)
 8002dfa:	889b      	ldrh	r3, [r3, #4]
 8002dfc:	f641 1263 	movw	r2, #6499	; 0x1963
 8002e00:	4293      	cmp	r3, r2
 8002e02:	f040 8133 	bne.w	800306c <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8002e06:	4b96      	ldr	r3, [pc, #600]	; (8003060 <LCD_SetCursor+0x454>)
 8002e08:	799b      	ldrb	r3, [r3, #6]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d163      	bne.n	8002ed6 <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8002e0e:	4b94      	ldr	r3, [pc, #592]	; (8003060 <LCD_SetCursor+0x454>)
 8002e10:	881a      	ldrh	r2, [r3, #0]
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8002e1c:	4b90      	ldr	r3, [pc, #576]	; (8003060 <LCD_SetCursor+0x454>)
 8002e1e:	895b      	ldrh	r3, [r3, #10]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fe21 	bl	8002a68 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8002e26:	4b8f      	ldr	r3, [pc, #572]	; (8003064 <LCD_SetCursor+0x458>)
 8002e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e2c:	611a      	str	r2, [r3, #16]
 8002e2e:	4b8d      	ldr	r3, [pc, #564]	; (8003064 <LCD_SetCursor+0x458>)
 8002e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e34:	615a      	str	r2, [r3, #20]
 8002e36:	4b8c      	ldr	r3, [pc, #560]	; (8003068 <LCD_SetCursor+0x45c>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	60da      	str	r2, [r3, #12]
 8002e3c:	4b89      	ldr	r3, [pc, #548]	; (8003064 <LCD_SetCursor+0x458>)
 8002e3e:	2280      	movs	r2, #128	; 0x80
 8002e40:	615a      	str	r2, [r3, #20]
 8002e42:	4b88      	ldr	r3, [pc, #544]	; (8003064 <LCD_SetCursor+0x458>)
 8002e44:	2280      	movs	r2, #128	; 0x80
 8002e46:	611a      	str	r2, [r3, #16]
 8002e48:	4b86      	ldr	r3, [pc, #536]	; (8003064 <LCD_SetCursor+0x458>)
 8002e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e4e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8002e50:	4b84      	ldr	r3, [pc, #528]	; (8003064 <LCD_SetCursor+0x458>)
 8002e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e56:	611a      	str	r2, [r3, #16]
 8002e58:	4b82      	ldr	r3, [pc, #520]	; (8003064 <LCD_SetCursor+0x458>)
 8002e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e5e:	615a      	str	r2, [r3, #20]
 8002e60:	4b81      	ldr	r3, [pc, #516]	; (8003068 <LCD_SetCursor+0x45c>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	4b7f      	ldr	r3, [pc, #508]	; (8003064 <LCD_SetCursor+0x458>)
 8002e68:	2280      	movs	r2, #128	; 0x80
 8002e6a:	615a      	str	r2, [r3, #20]
 8002e6c:	4b7d      	ldr	r3, [pc, #500]	; (8003064 <LCD_SetCursor+0x458>)
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	611a      	str	r2, [r3, #16]
 8002e72:	4b7c      	ldr	r3, [pc, #496]	; (8003064 <LCD_SetCursor+0x458>)
 8002e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e78:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8002e7a:	4b7a      	ldr	r3, [pc, #488]	; (8003064 <LCD_SetCursor+0x458>)
 8002e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e80:	611a      	str	r2, [r3, #16]
 8002e82:	4b78      	ldr	r3, [pc, #480]	; (8003064 <LCD_SetCursor+0x458>)
 8002e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e88:	615a      	str	r2, [r3, #20]
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	0a1b      	lsrs	r3, r3, #8
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	4b75      	ldr	r3, [pc, #468]	; (8003068 <LCD_SetCursor+0x45c>)
 8002e92:	60da      	str	r2, [r3, #12]
 8002e94:	4b73      	ldr	r3, [pc, #460]	; (8003064 <LCD_SetCursor+0x458>)
 8002e96:	2280      	movs	r2, #128	; 0x80
 8002e98:	615a      	str	r2, [r3, #20]
 8002e9a:	4b72      	ldr	r3, [pc, #456]	; (8003064 <LCD_SetCursor+0x458>)
 8002e9c:	2280      	movs	r2, #128	; 0x80
 8002e9e:	611a      	str	r2, [r3, #16]
 8002ea0:	4b70      	ldr	r3, [pc, #448]	; (8003064 <LCD_SetCursor+0x458>)
 8002ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8002ea8:	4b6e      	ldr	r3, [pc, #440]	; (8003064 <LCD_SetCursor+0x458>)
 8002eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eae:	611a      	str	r2, [r3, #16]
 8002eb0:	4b6c      	ldr	r3, [pc, #432]	; (8003064 <LCD_SetCursor+0x458>)
 8002eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb6:	615a      	str	r2, [r3, #20]
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	4a6b      	ldr	r2, [pc, #428]	; (8003068 <LCD_SetCursor+0x45c>)
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	60d3      	str	r3, [r2, #12]
 8002ec0:	4b68      	ldr	r3, [pc, #416]	; (8003064 <LCD_SetCursor+0x458>)
 8002ec2:	2280      	movs	r2, #128	; 0x80
 8002ec4:	615a      	str	r2, [r3, #20]
 8002ec6:	4b67      	ldr	r3, [pc, #412]	; (8003064 <LCD_SetCursor+0x458>)
 8002ec8:	2280      	movs	r2, #128	; 0x80
 8002eca:	611a      	str	r2, [r3, #16]
 8002ecc:	4b65      	ldr	r3, [pc, #404]	; (8003064 <LCD_SetCursor+0x458>)
 8002ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ed2:	611a      	str	r2, [r3, #16]
 8002ed4:	e061      	b.n	8002f9a <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8002ed6:	4b62      	ldr	r3, [pc, #392]	; (8003060 <LCD_SetCursor+0x454>)
 8002ed8:	895b      	ldrh	r3, [r3, #10]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fdc4 	bl	8002a68 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8002ee0:	4b60      	ldr	r3, [pc, #384]	; (8003064 <LCD_SetCursor+0x458>)
 8002ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ee6:	611a      	str	r2, [r3, #16]
 8002ee8:	4b5e      	ldr	r3, [pc, #376]	; (8003064 <LCD_SetCursor+0x458>)
 8002eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eee:	615a      	str	r2, [r3, #20]
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	4b5c      	ldr	r3, [pc, #368]	; (8003068 <LCD_SetCursor+0x45c>)
 8002ef8:	60da      	str	r2, [r3, #12]
 8002efa:	4b5a      	ldr	r3, [pc, #360]	; (8003064 <LCD_SetCursor+0x458>)
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	615a      	str	r2, [r3, #20]
 8002f00:	4b58      	ldr	r3, [pc, #352]	; (8003064 <LCD_SetCursor+0x458>)
 8002f02:	2280      	movs	r2, #128	; 0x80
 8002f04:	611a      	str	r2, [r3, #16]
 8002f06:	4b57      	ldr	r3, [pc, #348]	; (8003064 <LCD_SetCursor+0x458>)
 8002f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f0c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8002f0e:	4b55      	ldr	r3, [pc, #340]	; (8003064 <LCD_SetCursor+0x458>)
 8002f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f14:	611a      	str	r2, [r3, #16]
 8002f16:	4b53      	ldr	r3, [pc, #332]	; (8003064 <LCD_SetCursor+0x458>)
 8002f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f1c:	615a      	str	r2, [r3, #20]
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	4a51      	ldr	r2, [pc, #324]	; (8003068 <LCD_SetCursor+0x45c>)
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	60d3      	str	r3, [r2, #12]
 8002f26:	4b4f      	ldr	r3, [pc, #316]	; (8003064 <LCD_SetCursor+0x458>)
 8002f28:	2280      	movs	r2, #128	; 0x80
 8002f2a:	615a      	str	r2, [r3, #20]
 8002f2c:	4b4d      	ldr	r3, [pc, #308]	; (8003064 <LCD_SetCursor+0x458>)
 8002f2e:	2280      	movs	r2, #128	; 0x80
 8002f30:	611a      	str	r2, [r3, #16]
 8002f32:	4b4c      	ldr	r3, [pc, #304]	; (8003064 <LCD_SetCursor+0x458>)
 8002f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f38:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8002f3a:	4b4a      	ldr	r3, [pc, #296]	; (8003064 <LCD_SetCursor+0x458>)
 8002f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f40:	611a      	str	r2, [r3, #16]
 8002f42:	4b48      	ldr	r3, [pc, #288]	; (8003064 <LCD_SetCursor+0x458>)
 8002f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f48:	615a      	str	r2, [r3, #20]
 8002f4a:	4b45      	ldr	r3, [pc, #276]	; (8003060 <LCD_SetCursor+0x454>)
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	121a      	asrs	r2, r3, #8
 8002f52:	4b45      	ldr	r3, [pc, #276]	; (8003068 <LCD_SetCursor+0x45c>)
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	4b43      	ldr	r3, [pc, #268]	; (8003064 <LCD_SetCursor+0x458>)
 8002f58:	2280      	movs	r2, #128	; 0x80
 8002f5a:	615a      	str	r2, [r3, #20]
 8002f5c:	4b41      	ldr	r3, [pc, #260]	; (8003064 <LCD_SetCursor+0x458>)
 8002f5e:	2280      	movs	r2, #128	; 0x80
 8002f60:	611a      	str	r2, [r3, #16]
 8002f62:	4b40      	ldr	r3, [pc, #256]	; (8003064 <LCD_SetCursor+0x458>)
 8002f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f68:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8002f6a:	4b3e      	ldr	r3, [pc, #248]	; (8003064 <LCD_SetCursor+0x458>)
 8002f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f70:	611a      	str	r2, [r3, #16]
 8002f72:	4b3c      	ldr	r3, [pc, #240]	; (8003064 <LCD_SetCursor+0x458>)
 8002f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f78:	615a      	str	r2, [r3, #20]
 8002f7a:	4b39      	ldr	r3, [pc, #228]	; (8003060 <LCD_SetCursor+0x454>)
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	4a39      	ldr	r2, [pc, #228]	; (8003068 <LCD_SetCursor+0x45c>)
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	60d3      	str	r3, [r2, #12]
 8002f86:	4b37      	ldr	r3, [pc, #220]	; (8003064 <LCD_SetCursor+0x458>)
 8002f88:	2280      	movs	r2, #128	; 0x80
 8002f8a:	615a      	str	r2, [r3, #20]
 8002f8c:	4b35      	ldr	r3, [pc, #212]	; (8003064 <LCD_SetCursor+0x458>)
 8002f8e:	2280      	movs	r2, #128	; 0x80
 8002f90:	611a      	str	r2, [r3, #16]
 8002f92:	4b34      	ldr	r3, [pc, #208]	; (8003064 <LCD_SetCursor+0x458>)
 8002f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f98:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002f9a:	4b31      	ldr	r3, [pc, #196]	; (8003060 <LCD_SetCursor+0x454>)
 8002f9c:	899b      	ldrh	r3, [r3, #12]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fd62 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8002fa4:	4b2f      	ldr	r3, [pc, #188]	; (8003064 <LCD_SetCursor+0x458>)
 8002fa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002faa:	611a      	str	r2, [r3, #16]
 8002fac:	4b2d      	ldr	r3, [pc, #180]	; (8003064 <LCD_SetCursor+0x458>)
 8002fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb2:	615a      	str	r2, [r3, #20]
 8002fb4:	88bb      	ldrh	r3, [r7, #4]
 8002fb6:	0a1b      	lsrs	r3, r3, #8
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <LCD_SetCursor+0x45c>)
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	4b29      	ldr	r3, [pc, #164]	; (8003064 <LCD_SetCursor+0x458>)
 8002fc0:	2280      	movs	r2, #128	; 0x80
 8002fc2:	615a      	str	r2, [r3, #20]
 8002fc4:	4b27      	ldr	r3, [pc, #156]	; (8003064 <LCD_SetCursor+0x458>)
 8002fc6:	2280      	movs	r2, #128	; 0x80
 8002fc8:	611a      	str	r2, [r3, #16]
 8002fca:	4b26      	ldr	r3, [pc, #152]	; (8003064 <LCD_SetCursor+0x458>)
 8002fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8002fd2:	4b24      	ldr	r3, [pc, #144]	; (8003064 <LCD_SetCursor+0x458>)
 8002fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fd8:	611a      	str	r2, [r3, #16]
 8002fda:	4b22      	ldr	r3, [pc, #136]	; (8003064 <LCD_SetCursor+0x458>)
 8002fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fe0:	615a      	str	r2, [r3, #20]
 8002fe2:	88bb      	ldrh	r3, [r7, #4]
 8002fe4:	4a20      	ldr	r2, [pc, #128]	; (8003068 <LCD_SetCursor+0x45c>)
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	60d3      	str	r3, [r2, #12]
 8002fea:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <LCD_SetCursor+0x458>)
 8002fec:	2280      	movs	r2, #128	; 0x80
 8002fee:	615a      	str	r2, [r3, #20]
 8002ff0:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <LCD_SetCursor+0x458>)
 8002ff2:	2280      	movs	r2, #128	; 0x80
 8002ff4:	611a      	str	r2, [r3, #16]
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <LCD_SetCursor+0x458>)
 8002ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ffc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8002ffe:	4b19      	ldr	r3, [pc, #100]	; (8003064 <LCD_SetCursor+0x458>)
 8003000:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003004:	611a      	str	r2, [r3, #16]
 8003006:	4b17      	ldr	r3, [pc, #92]	; (8003064 <LCD_SetCursor+0x458>)
 8003008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800300c:	615a      	str	r2, [r3, #20]
 800300e:	4b14      	ldr	r3, [pc, #80]	; (8003060 <LCD_SetCursor+0x454>)
 8003010:	885b      	ldrh	r3, [r3, #2]
 8003012:	3b01      	subs	r3, #1
 8003014:	121a      	asrs	r2, r3, #8
 8003016:	4b14      	ldr	r3, [pc, #80]	; (8003068 <LCD_SetCursor+0x45c>)
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	4b12      	ldr	r3, [pc, #72]	; (8003064 <LCD_SetCursor+0x458>)
 800301c:	2280      	movs	r2, #128	; 0x80
 800301e:	615a      	str	r2, [r3, #20]
 8003020:	4b10      	ldr	r3, [pc, #64]	; (8003064 <LCD_SetCursor+0x458>)
 8003022:	2280      	movs	r2, #128	; 0x80
 8003024:	611a      	str	r2, [r3, #16]
 8003026:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <LCD_SetCursor+0x458>)
 8003028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800302c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800302e:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <LCD_SetCursor+0x458>)
 8003030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003034:	611a      	str	r2, [r3, #16]
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <LCD_SetCursor+0x458>)
 8003038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800303c:	615a      	str	r2, [r3, #20]
 800303e:	4b08      	ldr	r3, [pc, #32]	; (8003060 <LCD_SetCursor+0x454>)
 8003040:	885b      	ldrh	r3, [r3, #2]
 8003042:	3b01      	subs	r3, #1
 8003044:	4a08      	ldr	r2, [pc, #32]	; (8003068 <LCD_SetCursor+0x45c>)
 8003046:	b2db      	uxtb	r3, r3
 8003048:	60d3      	str	r3, [r2, #12]
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <LCD_SetCursor+0x458>)
 800304c:	2280      	movs	r2, #128	; 0x80
 800304e:	615a      	str	r2, [r3, #20]
 8003050:	4b04      	ldr	r3, [pc, #16]	; (8003064 <LCD_SetCursor+0x458>)
 8003052:	2280      	movs	r2, #128	; 0x80
 8003054:	611a      	str	r2, [r3, #16]
 8003056:	4b03      	ldr	r3, [pc, #12]	; (8003064 <LCD_SetCursor+0x458>)
 8003058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800305c:	611a      	str	r2, [r3, #16]
}
 800305e:	e097      	b.n	8003190 <LCD_SetCursor+0x584>
 8003060:	200007cc 	.word	0x200007cc
 8003064:	40011000 	.word	0x40011000
 8003068:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 800306c:	4b4a      	ldr	r3, [pc, #296]	; (8003198 <LCD_SetCursor+0x58c>)
 800306e:	889b      	ldrh	r3, [r3, #4]
 8003070:	f245 5210 	movw	r2, #21776	; 0x5510
 8003074:	4293      	cmp	r3, r2
 8003076:	d172      	bne.n	800315e <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8003078:	4b47      	ldr	r3, [pc, #284]	; (8003198 <LCD_SetCursor+0x58c>)
 800307a:	895b      	ldrh	r3, [r3, #10]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fcf3 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8003082:	4b46      	ldr	r3, [pc, #280]	; (800319c <LCD_SetCursor+0x590>)
 8003084:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003088:	611a      	str	r2, [r3, #16]
 800308a:	4b44      	ldr	r3, [pc, #272]	; (800319c <LCD_SetCursor+0x590>)
 800308c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003090:	615a      	str	r2, [r3, #20]
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	b29a      	uxth	r2, r3
 8003098:	4b41      	ldr	r3, [pc, #260]	; (80031a0 <LCD_SetCursor+0x594>)
 800309a:	60da      	str	r2, [r3, #12]
 800309c:	4b3f      	ldr	r3, [pc, #252]	; (800319c <LCD_SetCursor+0x590>)
 800309e:	2280      	movs	r2, #128	; 0x80
 80030a0:	615a      	str	r2, [r3, #20]
 80030a2:	4b3e      	ldr	r3, [pc, #248]	; (800319c <LCD_SetCursor+0x590>)
 80030a4:	2280      	movs	r2, #128	; 0x80
 80030a6:	611a      	str	r2, [r3, #16]
 80030a8:	4b3c      	ldr	r3, [pc, #240]	; (800319c <LCD_SetCursor+0x590>)
 80030aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ae:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 80030b0:	4b39      	ldr	r3, [pc, #228]	; (8003198 <LCD_SetCursor+0x58c>)
 80030b2:	895b      	ldrh	r3, [r3, #10]
 80030b4:	3301      	adds	r3, #1
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fcd5 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 80030be:	4b37      	ldr	r3, [pc, #220]	; (800319c <LCD_SetCursor+0x590>)
 80030c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030c4:	611a      	str	r2, [r3, #16]
 80030c6:	4b35      	ldr	r3, [pc, #212]	; (800319c <LCD_SetCursor+0x590>)
 80030c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030cc:	615a      	str	r2, [r3, #20]
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	4a33      	ldr	r2, [pc, #204]	; (80031a0 <LCD_SetCursor+0x594>)
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	60d3      	str	r3, [r2, #12]
 80030d6:	4b31      	ldr	r3, [pc, #196]	; (800319c <LCD_SetCursor+0x590>)
 80030d8:	2280      	movs	r2, #128	; 0x80
 80030da:	615a      	str	r2, [r3, #20]
 80030dc:	4b2f      	ldr	r3, [pc, #188]	; (800319c <LCD_SetCursor+0x590>)
 80030de:	2280      	movs	r2, #128	; 0x80
 80030e0:	611a      	str	r2, [r3, #16]
 80030e2:	4b2e      	ldr	r3, [pc, #184]	; (800319c <LCD_SetCursor+0x590>)
 80030e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80030ea:	4b2b      	ldr	r3, [pc, #172]	; (8003198 <LCD_SetCursor+0x58c>)
 80030ec:	899b      	ldrh	r3, [r3, #12]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff fcba 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80030f4:	4b29      	ldr	r3, [pc, #164]	; (800319c <LCD_SetCursor+0x590>)
 80030f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030fa:	611a      	str	r2, [r3, #16]
 80030fc:	4b27      	ldr	r3, [pc, #156]	; (800319c <LCD_SetCursor+0x590>)
 80030fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003102:	615a      	str	r2, [r3, #20]
 8003104:	88bb      	ldrh	r3, [r7, #4]
 8003106:	0a1b      	lsrs	r3, r3, #8
 8003108:	b29a      	uxth	r2, r3
 800310a:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <LCD_SetCursor+0x594>)
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	4b23      	ldr	r3, [pc, #140]	; (800319c <LCD_SetCursor+0x590>)
 8003110:	2280      	movs	r2, #128	; 0x80
 8003112:	615a      	str	r2, [r3, #20]
 8003114:	4b21      	ldr	r3, [pc, #132]	; (800319c <LCD_SetCursor+0x590>)
 8003116:	2280      	movs	r2, #128	; 0x80
 8003118:	611a      	str	r2, [r3, #16]
 800311a:	4b20      	ldr	r3, [pc, #128]	; (800319c <LCD_SetCursor+0x590>)
 800311c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003120:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8003122:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <LCD_SetCursor+0x58c>)
 8003124:	899b      	ldrh	r3, [r3, #12]
 8003126:	3301      	adds	r3, #1
 8003128:	b29b      	uxth	r3, r3
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fc9c 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <LCD_SetCursor+0x590>)
 8003132:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003136:	611a      	str	r2, [r3, #16]
 8003138:	4b18      	ldr	r3, [pc, #96]	; (800319c <LCD_SetCursor+0x590>)
 800313a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800313e:	615a      	str	r2, [r3, #20]
 8003140:	88bb      	ldrh	r3, [r7, #4]
 8003142:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <LCD_SetCursor+0x594>)
 8003144:	b2db      	uxtb	r3, r3
 8003146:	60d3      	str	r3, [r2, #12]
 8003148:	4b14      	ldr	r3, [pc, #80]	; (800319c <LCD_SetCursor+0x590>)
 800314a:	2280      	movs	r2, #128	; 0x80
 800314c:	615a      	str	r2, [r3, #20]
 800314e:	4b13      	ldr	r3, [pc, #76]	; (800319c <LCD_SetCursor+0x590>)
 8003150:	2280      	movs	r2, #128	; 0x80
 8003152:	611a      	str	r2, [r3, #16]
 8003154:	4b11      	ldr	r3, [pc, #68]	; (800319c <LCD_SetCursor+0x590>)
 8003156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800315a:	611a      	str	r2, [r3, #16]
}
 800315c:	e018      	b.n	8003190 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 800315e:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <LCD_SetCursor+0x58c>)
 8003160:	799b      	ldrb	r3, [r3, #6]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d106      	bne.n	8003174 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 8003166:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <LCD_SetCursor+0x58c>)
 8003168:	881a      	ldrh	r2, [r3, #0]
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8003174:	4b08      	ldr	r3, [pc, #32]	; (8003198 <LCD_SetCursor+0x58c>)
 8003176:	895b      	ldrh	r3, [r3, #10]
 8003178:	88fa      	ldrh	r2, [r7, #6]
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fcff 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <LCD_SetCursor+0x58c>)
 8003184:	899b      	ldrh	r3, [r3, #12]
 8003186:	88ba      	ldrh	r2, [r7, #4]
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fcf8 	bl	8002b80 <LCD_WriteReg>
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	200007cc 	.word	0x200007cc
 800319c:	40011000 	.word	0x40011000
 80031a0:	40010c00 	.word	0x40010c00

080031a4 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 80031b6:	4b78      	ldr	r3, [pc, #480]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 80031b8:	799b      	ldrb	r3, [r3, #6]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d10b      	bne.n	80031d6 <LCD_Scan_Dir+0x32>
 80031be:	4b76      	ldr	r3, [pc, #472]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 80031c0:	889b      	ldrh	r3, [r3, #4]
 80031c2:	f646 0204 	movw	r2, #26628	; 0x6804
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d005      	beq.n	80031d6 <LCD_Scan_Dir+0x32>
 80031ca:	4b73      	ldr	r3, [pc, #460]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 80031cc:	889b      	ldrh	r3, [r3, #4]
 80031ce:	f641 1263 	movw	r2, #6499	; 0x1963
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d109      	bne.n	80031ea <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 80031d6:	4b70      	ldr	r3, [pc, #448]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 80031d8:	799b      	ldrb	r3, [r3, #6]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d134      	bne.n	8003248 <LCD_Scan_Dir+0xa4>
 80031de:	4b6e      	ldr	r3, [pc, #440]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 80031e0:	889b      	ldrh	r3, [r3, #4]
 80031e2:	f641 1263 	movw	r2, #6499	; 0x1963
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d12e      	bne.n	8003248 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	2b07      	cmp	r3, #7
 80031ee:	d82b      	bhi.n	8003248 <LCD_Scan_Dir+0xa4>
 80031f0:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <LCD_Scan_Dir+0x54>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	08003219 	.word	0x08003219
 80031fc:	0800321f 	.word	0x0800321f
 8003200:	08003225 	.word	0x08003225
 8003204:	0800322b 	.word	0x0800322b
 8003208:	08003231 	.word	0x08003231
 800320c:	08003237 	.word	0x08003237
 8003210:	0800323d 	.word	0x0800323d
 8003214:	08003243 	.word	0x08003243
		{
		case 0:
			dir = 6;
 8003218:	2306      	movs	r3, #6
 800321a:	71fb      	strb	r3, [r7, #7]
			break;
 800321c:	e014      	b.n	8003248 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 800321e:	2307      	movs	r3, #7
 8003220:	71fb      	strb	r3, [r7, #7]
			break;
 8003222:	e011      	b.n	8003248 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8003224:	2304      	movs	r3, #4
 8003226:	71fb      	strb	r3, [r7, #7]
			break;
 8003228:	e00e      	b.n	8003248 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 800322a:	2305      	movs	r3, #5
 800322c:	71fb      	strb	r3, [r7, #7]
			break;
 800322e:	e00b      	b.n	8003248 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8003230:	2301      	movs	r3, #1
 8003232:	71fb      	strb	r3, [r7, #7]
			break;
 8003234:	e008      	b.n	8003248 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	71fb      	strb	r3, [r7, #7]
			break;
 800323a:	e005      	b.n	8003248 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 800323c:	2303      	movs	r3, #3
 800323e:	71fb      	strb	r3, [r7, #7]
			break;
 8003240:	e002      	b.n	8003248 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8003242:	2302      	movs	r3, #2
 8003244:	71fb      	strb	r3, [r7, #7]
			break;
 8003246:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 8003248:	4b53      	ldr	r3, [pc, #332]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 800324a:	889b      	ldrh	r3, [r3, #4]
 800324c:	f249 3241 	movw	r2, #37697	; 0x9341
 8003250:	4293      	cmp	r3, r2
 8003252:	d018      	beq.n	8003286 <LCD_Scan_Dir+0xe2>
 8003254:	4b50      	ldr	r3, [pc, #320]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 8003256:	889b      	ldrh	r3, [r3, #4]
 8003258:	f646 0204 	movw	r2, #26628	; 0x6804
 800325c:	4293      	cmp	r3, r2
 800325e:	d012      	beq.n	8003286 <LCD_Scan_Dir+0xe2>
 8003260:	4b4d      	ldr	r3, [pc, #308]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 8003262:	889b      	ldrh	r3, [r3, #4]
 8003264:	f245 3210 	movw	r2, #21264	; 0x5310
 8003268:	4293      	cmp	r3, r2
 800326a:	d00c      	beq.n	8003286 <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 800326c:	4b4a      	ldr	r3, [pc, #296]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 800326e:	889b      	ldrh	r3, [r3, #4]
 8003270:	f245 5210 	movw	r2, #21776	; 0x5510
 8003274:	4293      	cmp	r3, r2
 8003276:	d006      	beq.n	8003286 <LCD_Scan_Dir+0xe2>
 8003278:	4b47      	ldr	r3, [pc, #284]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 800327a:	889b      	ldrh	r3, [r3, #4]
 800327c:	f641 1263 	movw	r2, #6499	; 0x1963
 8003280:	4293      	cmp	r3, r2
 8003282:	f040 8250 	bne.w	8003726 <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	2b07      	cmp	r3, #7
 800328a:	d836      	bhi.n	80032fa <LCD_Scan_Dir+0x156>
 800328c:	a201      	add	r2, pc, #4	; (adr r2, 8003294 <LCD_Scan_Dir+0xf0>)
 800328e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003292:	bf00      	nop
 8003294:	080032fb 	.word	0x080032fb
 8003298:	080032b5 	.word	0x080032b5
 800329c:	080032bf 	.word	0x080032bf
 80032a0:	080032c9 	.word	0x080032c9
 80032a4:	080032d3 	.word	0x080032d3
 80032a8:	080032dd 	.word	0x080032dd
 80032ac:	080032e7 	.word	0x080032e7
 80032b0:	080032f1 	.word	0x080032f1
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80032b4:	89fb      	ldrh	r3, [r7, #14]
 80032b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ba:	81fb      	strh	r3, [r7, #14]
			break;
 80032bc:	e01d      	b.n	80032fa <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80032be:	89fb      	ldrh	r3, [r7, #14]
 80032c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032c4:	81fb      	strh	r3, [r7, #14]
			break;
 80032c6:	e018      	b.n	80032fa <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80032c8:	89fb      	ldrh	r3, [r7, #14]
 80032ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032ce:	81fb      	strh	r3, [r7, #14]
			break;
 80032d0:	e013      	b.n	80032fa <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80032d2:	89fb      	ldrh	r3, [r7, #14]
 80032d4:	f043 0320 	orr.w	r3, r3, #32
 80032d8:	81fb      	strh	r3, [r7, #14]
			break;
 80032da:	e00e      	b.n	80032fa <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80032dc:	89fb      	ldrh	r3, [r7, #14]
 80032de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032e2:	81fb      	strh	r3, [r7, #14]
			break;
 80032e4:	e009      	b.n	80032fa <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80032e6:	89fb      	ldrh	r3, [r7, #14]
 80032e8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80032ec:	81fb      	strh	r3, [r7, #14]
			break;
 80032ee:	e004      	b.n	80032fa <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80032f0:	89fb      	ldrh	r3, [r7, #14]
 80032f2:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80032f6:	81fb      	strh	r3, [r7, #14]
			break;
 80032f8:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 80032fa:	4b27      	ldr	r3, [pc, #156]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 80032fc:	889b      	ldrh	r3, [r3, #4]
 80032fe:	f245 5210 	movw	r2, #21776	; 0x5510
 8003302:	4293      	cmp	r3, r2
 8003304:	d103      	bne.n	800330e <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 8003306:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800330a:	81bb      	strh	r3, [r7, #12]
 800330c:	e001      	b.n	8003312 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 800330e:	2336      	movs	r3, #54	; 0x36
 8003310:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8003312:	4b21      	ldr	r3, [pc, #132]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 8003314:	889b      	ldrh	r3, [r3, #4]
 8003316:	f245 3210 	movw	r2, #21264	; 0x5310
 800331a:	4293      	cmp	r3, r2
 800331c:	d00f      	beq.n	800333e <LCD_Scan_Dir+0x19a>
 800331e:	4b1e      	ldr	r3, [pc, #120]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 8003320:	889b      	ldrh	r3, [r3, #4]
 8003322:	f245 5210 	movw	r2, #21776	; 0x5510
 8003326:	4293      	cmp	r3, r2
 8003328:	d009      	beq.n	800333e <LCD_Scan_Dir+0x19a>
 800332a:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 800332c:	889b      	ldrh	r3, [r3, #4]
 800332e:	f641 1263 	movw	r2, #6499	; 0x1963
 8003332:	4293      	cmp	r3, r2
 8003334:	d003      	beq.n	800333e <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 8003336:	89fb      	ldrh	r3, [r7, #14]
 8003338:	f043 0308 	orr.w	r3, r3, #8
 800333c:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 800333e:	4b16      	ldr	r3, [pc, #88]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 8003340:	889b      	ldrh	r3, [r3, #4]
 8003342:	f646 0204 	movw	r2, #26628	; 0x6804
 8003346:	4293      	cmp	r3, r2
 8003348:	d103      	bne.n	8003352 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 800334a:	89fb      	ldrh	r3, [r7, #14]
 800334c:	f043 0302 	orr.w	r3, r3, #2
 8003350:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8003352:	89fa      	ldrh	r2, [r7, #14]
 8003354:	89bb      	ldrh	r3, [r7, #12]
 8003356:	4611      	mov	r1, r2
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fc11 	bl	8002b80 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 800335e:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 8003360:	889b      	ldrh	r3, [r3, #4]
 8003362:	f641 1263 	movw	r2, #6499	; 0x1963
 8003366:	4293      	cmp	r3, r2
 8003368:	d028      	beq.n	80033bc <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 800336a:	89fb      	ldrh	r3, [r7, #14]
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8003374:	4b08      	ldr	r3, [pc, #32]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 8003376:	881a      	ldrh	r2, [r3, #0]
 8003378:	4b07      	ldr	r3, [pc, #28]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 800337a:	885b      	ldrh	r3, [r3, #2]
 800337c:	429a      	cmp	r2, r3
 800337e:	d21d      	bcs.n	80033bc <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8003386:	4b04      	ldr	r3, [pc, #16]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 8003388:	885a      	ldrh	r2, [r3, #2]
 800338a:	4b03      	ldr	r3, [pc, #12]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 800338c:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800338e:	4a02      	ldr	r2, [pc, #8]	; (8003398 <LCD_Scan_Dir+0x1f4>)
 8003390:	897b      	ldrh	r3, [r7, #10]
 8003392:	8053      	strh	r3, [r2, #2]
 8003394:	e012      	b.n	80033bc <LCD_Scan_Dir+0x218>
 8003396:	bf00      	nop
 8003398:	200007cc 	.word	0x200007cc
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 800339c:	4b7f      	ldr	r3, [pc, #508]	; (800359c <LCD_Scan_Dir+0x3f8>)
 800339e:	881a      	ldrh	r2, [r3, #0]
 80033a0:	4b7e      	ldr	r3, [pc, #504]	; (800359c <LCD_Scan_Dir+0x3f8>)
 80033a2:	885b      	ldrh	r3, [r3, #2]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d909      	bls.n	80033bc <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80033a8:	4b7c      	ldr	r3, [pc, #496]	; (800359c <LCD_Scan_Dir+0x3f8>)
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80033ae:	4b7b      	ldr	r3, [pc, #492]	; (800359c <LCD_Scan_Dir+0x3f8>)
 80033b0:	885a      	ldrh	r2, [r3, #2]
 80033b2:	4b7a      	ldr	r3, [pc, #488]	; (800359c <LCD_Scan_Dir+0x3f8>)
 80033b4:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80033b6:	4a79      	ldr	r2, [pc, #484]	; (800359c <LCD_Scan_Dir+0x3f8>)
 80033b8:	897b      	ldrh	r3, [r7, #10]
 80033ba:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80033bc:	4b77      	ldr	r3, [pc, #476]	; (800359c <LCD_Scan_Dir+0x3f8>)
 80033be:	889b      	ldrh	r3, [r3, #4]
 80033c0:	f245 5210 	movw	r2, #21776	; 0x5510
 80033c4:	4293      	cmp	r3, r2
 80033c6:	f040 80ef 	bne.w	80035a8 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 80033ca:	4b74      	ldr	r3, [pc, #464]	; (800359c <LCD_Scan_Dir+0x3f8>)
 80033cc:	895b      	ldrh	r3, [r3, #10]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fb4a 	bl	8002a68 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80033d4:	4b72      	ldr	r3, [pc, #456]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 80033d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033da:	611a      	str	r2, [r3, #16]
 80033dc:	4b70      	ldr	r3, [pc, #448]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 80033de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033e2:	615a      	str	r2, [r3, #20]
 80033e4:	4b6f      	ldr	r3, [pc, #444]	; (80035a4 <LCD_Scan_Dir+0x400>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	4b6d      	ldr	r3, [pc, #436]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 80033ec:	2280      	movs	r2, #128	; 0x80
 80033ee:	615a      	str	r2, [r3, #20]
 80033f0:	4b6b      	ldr	r3, [pc, #428]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 80033f2:	2280      	movs	r2, #128	; 0x80
 80033f4:	611a      	str	r2, [r3, #16]
 80033f6:	4b6a      	ldr	r3, [pc, #424]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 80033f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033fc:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 80033fe:	4b67      	ldr	r3, [pc, #412]	; (800359c <LCD_Scan_Dir+0x3f8>)
 8003400:	895b      	ldrh	r3, [r3, #10]
 8003402:	3301      	adds	r3, #1
 8003404:	b29b      	uxth	r3, r3
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fb2e 	bl	8002a68 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800340c:	4b64      	ldr	r3, [pc, #400]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 800340e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003412:	611a      	str	r2, [r3, #16]
 8003414:	4b62      	ldr	r3, [pc, #392]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 8003416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800341a:	615a      	str	r2, [r3, #20]
 800341c:	4b61      	ldr	r3, [pc, #388]	; (80035a4 <LCD_Scan_Dir+0x400>)
 800341e:	2200      	movs	r2, #0
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	4b5f      	ldr	r3, [pc, #380]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 8003424:	2280      	movs	r2, #128	; 0x80
 8003426:	615a      	str	r2, [r3, #20]
 8003428:	4b5d      	ldr	r3, [pc, #372]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 800342a:	2280      	movs	r2, #128	; 0x80
 800342c:	611a      	str	r2, [r3, #16]
 800342e:	4b5c      	ldr	r3, [pc, #368]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 8003430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003434:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 8003436:	4b59      	ldr	r3, [pc, #356]	; (800359c <LCD_Scan_Dir+0x3f8>)
 8003438:	895b      	ldrh	r3, [r3, #10]
 800343a:	3302      	adds	r3, #2
 800343c:	b29b      	uxth	r3, r3
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fb12 	bl	8002a68 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8003444:	4b56      	ldr	r3, [pc, #344]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 8003446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800344a:	611a      	str	r2, [r3, #16]
 800344c:	4b54      	ldr	r3, [pc, #336]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 800344e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003452:	615a      	str	r2, [r3, #20]
 8003454:	4b51      	ldr	r3, [pc, #324]	; (800359c <LCD_Scan_Dir+0x3f8>)
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	3b01      	subs	r3, #1
 800345a:	121a      	asrs	r2, r3, #8
 800345c:	4b51      	ldr	r3, [pc, #324]	; (80035a4 <LCD_Scan_Dir+0x400>)
 800345e:	60da      	str	r2, [r3, #12]
 8003460:	4b4f      	ldr	r3, [pc, #316]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 8003462:	2280      	movs	r2, #128	; 0x80
 8003464:	615a      	str	r2, [r3, #20]
 8003466:	4b4e      	ldr	r3, [pc, #312]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 8003468:	2280      	movs	r2, #128	; 0x80
 800346a:	611a      	str	r2, [r3, #16]
 800346c:	4b4c      	ldr	r3, [pc, #304]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 800346e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003472:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8003474:	4b49      	ldr	r3, [pc, #292]	; (800359c <LCD_Scan_Dir+0x3f8>)
 8003476:	895b      	ldrh	r3, [r3, #10]
 8003478:	3303      	adds	r3, #3
 800347a:	b29b      	uxth	r3, r3
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff faf3 	bl	8002a68 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8003482:	4b47      	ldr	r3, [pc, #284]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 8003484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003488:	611a      	str	r2, [r3, #16]
 800348a:	4b45      	ldr	r3, [pc, #276]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 800348c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003490:	615a      	str	r2, [r3, #20]
 8003492:	4b42      	ldr	r3, [pc, #264]	; (800359c <LCD_Scan_Dir+0x3f8>)
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	3b01      	subs	r3, #1
 8003498:	4a42      	ldr	r2, [pc, #264]	; (80035a4 <LCD_Scan_Dir+0x400>)
 800349a:	b2db      	uxtb	r3, r3
 800349c:	60d3      	str	r3, [r2, #12]
 800349e:	4b40      	ldr	r3, [pc, #256]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 80034a0:	2280      	movs	r2, #128	; 0x80
 80034a2:	615a      	str	r2, [r3, #20]
 80034a4:	4b3e      	ldr	r3, [pc, #248]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 80034a6:	2280      	movs	r2, #128	; 0x80
 80034a8:	611a      	str	r2, [r3, #16]
 80034aa:	4b3d      	ldr	r3, [pc, #244]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 80034ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80034b2:	4b3a      	ldr	r3, [pc, #232]	; (800359c <LCD_Scan_Dir+0x3f8>)
 80034b4:	899b      	ldrh	r3, [r3, #12]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fad6 	bl	8002a68 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80034bc:	4b38      	ldr	r3, [pc, #224]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 80034be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034c2:	611a      	str	r2, [r3, #16]
 80034c4:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 80034c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ca:	615a      	str	r2, [r3, #20]
 80034cc:	4b35      	ldr	r3, [pc, #212]	; (80035a4 <LCD_Scan_Dir+0x400>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	4b33      	ldr	r3, [pc, #204]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 80034d4:	2280      	movs	r2, #128	; 0x80
 80034d6:	615a      	str	r2, [r3, #20]
 80034d8:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 80034da:	2280      	movs	r2, #128	; 0x80
 80034dc:	611a      	str	r2, [r3, #16]
 80034de:	4b30      	ldr	r3, [pc, #192]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 80034e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 80034e6:	4b2d      	ldr	r3, [pc, #180]	; (800359c <LCD_Scan_Dir+0x3f8>)
 80034e8:	899b      	ldrh	r3, [r3, #12]
 80034ea:	3301      	adds	r3, #1
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff faba 	bl	8002a68 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80034f4:	4b2a      	ldr	r3, [pc, #168]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 80034f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034fa:	611a      	str	r2, [r3, #16]
 80034fc:	4b28      	ldr	r3, [pc, #160]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 80034fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003502:	615a      	str	r2, [r3, #20]
 8003504:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <LCD_Scan_Dir+0x400>)
 8003506:	2200      	movs	r2, #0
 8003508:	60da      	str	r2, [r3, #12]
 800350a:	4b25      	ldr	r3, [pc, #148]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 800350c:	2280      	movs	r2, #128	; 0x80
 800350e:	615a      	str	r2, [r3, #20]
 8003510:	4b23      	ldr	r3, [pc, #140]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 8003512:	2280      	movs	r2, #128	; 0x80
 8003514:	611a      	str	r2, [r3, #16]
 8003516:	4b22      	ldr	r3, [pc, #136]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 8003518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800351c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 800351e:	4b1f      	ldr	r3, [pc, #124]	; (800359c <LCD_Scan_Dir+0x3f8>)
 8003520:	899b      	ldrh	r3, [r3, #12]
 8003522:	3302      	adds	r3, #2
 8003524:	b29b      	uxth	r3, r3
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff fa9e 	bl	8002a68 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 800352c:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 800352e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003532:	611a      	str	r2, [r3, #16]
 8003534:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 8003536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800353a:	615a      	str	r2, [r3, #20]
 800353c:	4b17      	ldr	r3, [pc, #92]	; (800359c <LCD_Scan_Dir+0x3f8>)
 800353e:	885b      	ldrh	r3, [r3, #2]
 8003540:	3b01      	subs	r3, #1
 8003542:	121a      	asrs	r2, r3, #8
 8003544:	4b17      	ldr	r3, [pc, #92]	; (80035a4 <LCD_Scan_Dir+0x400>)
 8003546:	60da      	str	r2, [r3, #12]
 8003548:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 800354a:	2280      	movs	r2, #128	; 0x80
 800354c:	615a      	str	r2, [r3, #20]
 800354e:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 8003550:	2280      	movs	r2, #128	; 0x80
 8003552:	611a      	str	r2, [r3, #16]
 8003554:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 8003556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800355a:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 800355c:	4b0f      	ldr	r3, [pc, #60]	; (800359c <LCD_Scan_Dir+0x3f8>)
 800355e:	899b      	ldrh	r3, [r3, #12]
 8003560:	3303      	adds	r3, #3
 8003562:	b29b      	uxth	r3, r3
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fa7f 	bl	8002a68 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 800356c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003570:	611a      	str	r2, [r3, #16]
 8003572:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 8003574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003578:	615a      	str	r2, [r3, #20]
 800357a:	4b08      	ldr	r3, [pc, #32]	; (800359c <LCD_Scan_Dir+0x3f8>)
 800357c:	885b      	ldrh	r3, [r3, #2]
 800357e:	3b01      	subs	r3, #1
 8003580:	4a08      	ldr	r2, [pc, #32]	; (80035a4 <LCD_Scan_Dir+0x400>)
 8003582:	b2db      	uxtb	r3, r3
 8003584:	60d3      	str	r3, [r2, #12]
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 8003588:	2280      	movs	r2, #128	; 0x80
 800358a:	615a      	str	r2, [r3, #20]
 800358c:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 800358e:	2280      	movs	r2, #128	; 0x80
 8003590:	611a      	str	r2, [r3, #16]
 8003592:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <LCD_Scan_Dir+0x3fc>)
 8003594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003598:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 800359a:	e10a      	b.n	80037b2 <LCD_Scan_Dir+0x60e>
 800359c:	200007cc 	.word	0x200007cc
 80035a0:	40011000 	.word	0x40011000
 80035a4:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 80035a8:	4b84      	ldr	r3, [pc, #528]	; (80037bc <LCD_Scan_Dir+0x618>)
 80035aa:	895b      	ldrh	r3, [r3, #10]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fa5b 	bl	8002a68 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80035b2:	4b83      	ldr	r3, [pc, #524]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80035b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035b8:	611a      	str	r2, [r3, #16]
 80035ba:	4b81      	ldr	r3, [pc, #516]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80035bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c0:	615a      	str	r2, [r3, #20]
 80035c2:	4b80      	ldr	r3, [pc, #512]	; (80037c4 <LCD_Scan_Dir+0x620>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	60da      	str	r2, [r3, #12]
 80035c8:	4b7d      	ldr	r3, [pc, #500]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	615a      	str	r2, [r3, #20]
 80035ce:	4b7c      	ldr	r3, [pc, #496]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80035d0:	2280      	movs	r2, #128	; 0x80
 80035d2:	611a      	str	r2, [r3, #16]
 80035d4:	4b7a      	ldr	r3, [pc, #488]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80035d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035da:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80035dc:	4b78      	ldr	r3, [pc, #480]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80035de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035e2:	611a      	str	r2, [r3, #16]
 80035e4:	4b76      	ldr	r3, [pc, #472]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80035e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ea:	615a      	str	r2, [r3, #20]
 80035ec:	4b75      	ldr	r3, [pc, #468]	; (80037c4 <LCD_Scan_Dir+0x620>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	4b73      	ldr	r3, [pc, #460]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	615a      	str	r2, [r3, #20]
 80035f8:	4b71      	ldr	r3, [pc, #452]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	611a      	str	r2, [r3, #16]
 80035fe:	4b70      	ldr	r3, [pc, #448]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 8003600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003604:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8003606:	4b6e      	ldr	r3, [pc, #440]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 8003608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800360c:	611a      	str	r2, [r3, #16]
 800360e:	4b6c      	ldr	r3, [pc, #432]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 8003610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003614:	615a      	str	r2, [r3, #20]
 8003616:	4b69      	ldr	r3, [pc, #420]	; (80037bc <LCD_Scan_Dir+0x618>)
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	3b01      	subs	r3, #1
 800361c:	121a      	asrs	r2, r3, #8
 800361e:	4b69      	ldr	r3, [pc, #420]	; (80037c4 <LCD_Scan_Dir+0x620>)
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	4b67      	ldr	r3, [pc, #412]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 8003624:	2280      	movs	r2, #128	; 0x80
 8003626:	615a      	str	r2, [r3, #20]
 8003628:	4b65      	ldr	r3, [pc, #404]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 800362a:	2280      	movs	r2, #128	; 0x80
 800362c:	611a      	str	r2, [r3, #16]
 800362e:	4b64      	ldr	r3, [pc, #400]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 8003630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003634:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8003636:	4b62      	ldr	r3, [pc, #392]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 8003638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800363c:	611a      	str	r2, [r3, #16]
 800363e:	4b60      	ldr	r3, [pc, #384]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 8003640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003644:	615a      	str	r2, [r3, #20]
 8003646:	4b5d      	ldr	r3, [pc, #372]	; (80037bc <LCD_Scan_Dir+0x618>)
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	3b01      	subs	r3, #1
 800364c:	4a5d      	ldr	r2, [pc, #372]	; (80037c4 <LCD_Scan_Dir+0x620>)
 800364e:	b2db      	uxtb	r3, r3
 8003650:	60d3      	str	r3, [r2, #12]
 8003652:	4b5b      	ldr	r3, [pc, #364]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 8003654:	2280      	movs	r2, #128	; 0x80
 8003656:	615a      	str	r2, [r3, #20]
 8003658:	4b59      	ldr	r3, [pc, #356]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 800365a:	2280      	movs	r2, #128	; 0x80
 800365c:	611a      	str	r2, [r3, #16]
 800365e:	4b58      	ldr	r3, [pc, #352]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 8003660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003664:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8003666:	4b55      	ldr	r3, [pc, #340]	; (80037bc <LCD_Scan_Dir+0x618>)
 8003668:	899b      	ldrh	r3, [r3, #12]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff f9fc 	bl	8002a68 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003670:	4b53      	ldr	r3, [pc, #332]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 8003672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003676:	611a      	str	r2, [r3, #16]
 8003678:	4b51      	ldr	r3, [pc, #324]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 800367a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367e:	615a      	str	r2, [r3, #20]
 8003680:	4b50      	ldr	r3, [pc, #320]	; (80037c4 <LCD_Scan_Dir+0x620>)
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	4b4e      	ldr	r3, [pc, #312]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 8003688:	2280      	movs	r2, #128	; 0x80
 800368a:	615a      	str	r2, [r3, #20]
 800368c:	4b4c      	ldr	r3, [pc, #304]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 800368e:	2280      	movs	r2, #128	; 0x80
 8003690:	611a      	str	r2, [r3, #16]
 8003692:	4b4b      	ldr	r3, [pc, #300]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 8003694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003698:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 800369a:	4b49      	ldr	r3, [pc, #292]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 800369c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036a0:	611a      	str	r2, [r3, #16]
 80036a2:	4b47      	ldr	r3, [pc, #284]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80036a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036a8:	615a      	str	r2, [r3, #20]
 80036aa:	4b46      	ldr	r3, [pc, #280]	; (80037c4 <LCD_Scan_Dir+0x620>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	60da      	str	r2, [r3, #12]
 80036b0:	4b43      	ldr	r3, [pc, #268]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80036b2:	2280      	movs	r2, #128	; 0x80
 80036b4:	615a      	str	r2, [r3, #20]
 80036b6:	4b42      	ldr	r3, [pc, #264]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80036b8:	2280      	movs	r2, #128	; 0x80
 80036ba:	611a      	str	r2, [r3, #16]
 80036bc:	4b40      	ldr	r3, [pc, #256]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80036be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036c2:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80036c4:	4b3e      	ldr	r3, [pc, #248]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80036c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ca:	611a      	str	r2, [r3, #16]
 80036cc:	4b3c      	ldr	r3, [pc, #240]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80036ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036d2:	615a      	str	r2, [r3, #20]
 80036d4:	4b39      	ldr	r3, [pc, #228]	; (80037bc <LCD_Scan_Dir+0x618>)
 80036d6:	885b      	ldrh	r3, [r3, #2]
 80036d8:	3b01      	subs	r3, #1
 80036da:	121a      	asrs	r2, r3, #8
 80036dc:	4b39      	ldr	r3, [pc, #228]	; (80037c4 <LCD_Scan_Dir+0x620>)
 80036de:	60da      	str	r2, [r3, #12]
 80036e0:	4b37      	ldr	r3, [pc, #220]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80036e2:	2280      	movs	r2, #128	; 0x80
 80036e4:	615a      	str	r2, [r3, #20]
 80036e6:	4b36      	ldr	r3, [pc, #216]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80036e8:	2280      	movs	r2, #128	; 0x80
 80036ea:	611a      	str	r2, [r3, #16]
 80036ec:	4b34      	ldr	r3, [pc, #208]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80036ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f2:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80036f4:	4b32      	ldr	r3, [pc, #200]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80036f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036fa:	611a      	str	r2, [r3, #16]
 80036fc:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 80036fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003702:	615a      	str	r2, [r3, #20]
 8003704:	4b2d      	ldr	r3, [pc, #180]	; (80037bc <LCD_Scan_Dir+0x618>)
 8003706:	885b      	ldrh	r3, [r3, #2]
 8003708:	3b01      	subs	r3, #1
 800370a:	4a2e      	ldr	r2, [pc, #184]	; (80037c4 <LCD_Scan_Dir+0x620>)
 800370c:	b2db      	uxtb	r3, r3
 800370e:	60d3      	str	r3, [r2, #12]
 8003710:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	615a      	str	r2, [r3, #20]
 8003716:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 8003718:	2280      	movs	r2, #128	; 0x80
 800371a:	611a      	str	r2, [r3, #16]
 800371c:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <LCD_Scan_Dir+0x61c>)
 800371e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003722:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8003724:	e045      	b.n	80037b2 <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	2b07      	cmp	r3, #7
 800372a:	d836      	bhi.n	800379a <LCD_Scan_Dir+0x5f6>
 800372c:	a201      	add	r2, pc, #4	; (adr r2, 8003734 <LCD_Scan_Dir+0x590>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003755 	.word	0x08003755
 8003738:	0800375f 	.word	0x0800375f
 800373c:	08003769 	.word	0x08003769
 8003740:	0800379b 	.word	0x0800379b
 8003744:	08003773 	.word	0x08003773
 8003748:	0800377d 	.word	0x0800377d
 800374c:	08003787 	.word	0x08003787
 8003750:	08003791 	.word	0x08003791
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8003754:	89fb      	ldrh	r3, [r7, #14]
 8003756:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800375a:	81fb      	strh	r3, [r7, #14]
			break;
 800375c:	e01d      	b.n	800379a <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 800375e:	89fb      	ldrh	r3, [r7, #14]
 8003760:	f043 0310 	orr.w	r3, r3, #16
 8003764:	81fb      	strh	r3, [r7, #14]
			break;
 8003766:	e018      	b.n	800379a <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8003768:	89fb      	ldrh	r3, [r7, #14]
 800376a:	f043 0320 	orr.w	r3, r3, #32
 800376e:	81fb      	strh	r3, [r7, #14]
			break;
 8003770:	e013      	b.n	800379a <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8003772:	89fb      	ldrh	r3, [r7, #14]
 8003774:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003778:	81fb      	strh	r3, [r7, #14]
			break;
 800377a:	e00e      	b.n	800379a <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 800377c:	89fb      	ldrh	r3, [r7, #14]
 800377e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003782:	81fb      	strh	r3, [r7, #14]
			break;
 8003784:	e009      	b.n	800379a <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 8003786:	89fb      	ldrh	r3, [r7, #14]
 8003788:	f043 0318 	orr.w	r3, r3, #24
 800378c:	81fb      	strh	r3, [r7, #14]
			break;
 800378e:	e004      	b.n	800379a <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8003790:	89fb      	ldrh	r3, [r7, #14]
 8003792:	f043 0308 	orr.w	r3, r3, #8
 8003796:	81fb      	strh	r3, [r7, #14]
			break;
 8003798:	bf00      	nop
		}
		dirreg = 0X03;
 800379a:	2303      	movs	r3, #3
 800379c:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 800379e:	89fb      	ldrh	r3, [r7, #14]
 80037a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037a4:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80037a6:	89fa      	ldrh	r2, [r7, #14]
 80037a8:	89bb      	ldrh	r3, [r7, #12]
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff f9e7 	bl	8002b80 <LCD_WriteReg>
	}
}
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	200007cc 	.word	0x200007cc
 80037c0:	40011000 	.word	0x40011000
 80037c4:	40010c00 	.word	0x40010c00

080037c8 <LCD_DrawPoint>:
//Draw a point with color
//x,y: coordinate

void LCD_DrawPoint(uint16_t x, uint16_t y) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	460a      	mov	r2, r1
 80037d2:	80fb      	strh	r3, [r7, #6]
 80037d4:	4613      	mov	r3, r2
 80037d6:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x, y);
 80037d8:	88ba      	ldrh	r2, [r7, #4]
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	4611      	mov	r1, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff fa14 	bl	8002c0c <LCD_SetCursor>
	LCD_WriteRAM_Prepare();
 80037e4:	f7ff fa06 	bl	8002bf4 <LCD_WriteRAM_Prepare>
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <LCD_DrawPoint+0x54>)
 80037ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ee:	611a      	str	r2, [r3, #16]
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <LCD_DrawPoint+0x54>)
 80037f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f6:	615a      	str	r2, [r3, #20]
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <LCD_DrawPoint+0x58>)
 80037fa:	881a      	ldrh	r2, [r3, #0]
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <LCD_DrawPoint+0x5c>)
 80037fe:	60da      	str	r2, [r3, #12]
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <LCD_DrawPoint+0x54>)
 8003802:	2280      	movs	r2, #128	; 0x80
 8003804:	615a      	str	r2, [r3, #20]
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <LCD_DrawPoint+0x54>)
 8003808:	2280      	movs	r2, #128	; 0x80
 800380a:	611a      	str	r2, [r3, #16]
 800380c:	4b03      	ldr	r3, [pc, #12]	; (800381c <LCD_DrawPoint+0x54>)
 800380e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003812:	611a      	str	r2, [r3, #16]
}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40011000 	.word	0x40011000
 8003820:	20000090 	.word	0x20000090
 8003824:	40010c00 	.word	0x40010c00

08003828 <LCD_Fast_DrawPoint>:
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	80fb      	strh	r3, [r7, #6]
 8003832:	460b      	mov	r3, r1
 8003834:	80bb      	strh	r3, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	807b      	strh	r3, [r7, #2]
	if(color == WHITE){
 800383a:	887b      	ldrh	r3, [r7, #2]
 800383c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003840:	4293      	cmp	r3, r2
 8003842:	f000 8284 	beq.w	8003d4e <LCD_Fast_DrawPoint+0x526>
		return;
	}
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8003846:	4b75      	ldr	r3, [pc, #468]	; (8003a1c <LCD_Fast_DrawPoint+0x1f4>)
 8003848:	889b      	ldrh	r3, [r3, #4]
 800384a:	f249 3241 	movw	r2, #37697	; 0x9341
 800384e:	4293      	cmp	r3, r2
 8003850:	d005      	beq.n	800385e <LCD_Fast_DrawPoint+0x36>
 8003852:	4b72      	ldr	r3, [pc, #456]	; (8003a1c <LCD_Fast_DrawPoint+0x1f4>)
 8003854:	889b      	ldrh	r3, [r3, #4]
 8003856:	f245 3210 	movw	r2, #21264	; 0x5310
 800385a:	4293      	cmp	r3, r2
 800385c:	d164      	bne.n	8003928 <LCD_Fast_DrawPoint+0x100>
		LCD_WR_REG(lcddev.setxcmd);
 800385e:	4b6f      	ldr	r3, [pc, #444]	; (8003a1c <LCD_Fast_DrawPoint+0x1f4>)
 8003860:	895b      	ldrh	r3, [r3, #10]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff f900 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8003868:	4b6d      	ldr	r3, [pc, #436]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 800386a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800386e:	611a      	str	r2, [r3, #16]
 8003870:	4b6b      	ldr	r3, [pc, #428]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 8003872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003876:	615a      	str	r2, [r3, #20]
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	b29a      	uxth	r2, r3
 800387e:	4b69      	ldr	r3, [pc, #420]	; (8003a24 <LCD_Fast_DrawPoint+0x1fc>)
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	4b67      	ldr	r3, [pc, #412]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 8003884:	2280      	movs	r2, #128	; 0x80
 8003886:	615a      	str	r2, [r3, #20]
 8003888:	4b65      	ldr	r3, [pc, #404]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 800388a:	2280      	movs	r2, #128	; 0x80
 800388c:	611a      	str	r2, [r3, #16]
 800388e:	4b64      	ldr	r3, [pc, #400]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 8003890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003894:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8003896:	4b62      	ldr	r3, [pc, #392]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 8003898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800389c:	611a      	str	r2, [r3, #16]
 800389e:	4b60      	ldr	r3, [pc, #384]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 80038a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a4:	615a      	str	r2, [r3, #20]
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	4a5e      	ldr	r2, [pc, #376]	; (8003a24 <LCD_Fast_DrawPoint+0x1fc>)
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	60d3      	str	r3, [r2, #12]
 80038ae:	4b5c      	ldr	r3, [pc, #368]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 80038b0:	2280      	movs	r2, #128	; 0x80
 80038b2:	615a      	str	r2, [r3, #20]
 80038b4:	4b5a      	ldr	r3, [pc, #360]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 80038b6:	2280      	movs	r2, #128	; 0x80
 80038b8:	611a      	str	r2, [r3, #16]
 80038ba:	4b59      	ldr	r3, [pc, #356]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 80038bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80038c2:	4b56      	ldr	r3, [pc, #344]	; (8003a1c <LCD_Fast_DrawPoint+0x1f4>)
 80038c4:	899b      	ldrh	r3, [r3, #12]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff f8ce 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80038cc:	4b54      	ldr	r3, [pc, #336]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 80038ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038d2:	611a      	str	r2, [r3, #16]
 80038d4:	4b52      	ldr	r3, [pc, #328]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 80038d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038da:	615a      	str	r2, [r3, #20]
 80038dc:	88bb      	ldrh	r3, [r7, #4]
 80038de:	0a1b      	lsrs	r3, r3, #8
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	4b50      	ldr	r3, [pc, #320]	; (8003a24 <LCD_Fast_DrawPoint+0x1fc>)
 80038e4:	60da      	str	r2, [r3, #12]
 80038e6:	4b4e      	ldr	r3, [pc, #312]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 80038e8:	2280      	movs	r2, #128	; 0x80
 80038ea:	615a      	str	r2, [r3, #20]
 80038ec:	4b4c      	ldr	r3, [pc, #304]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 80038ee:	2280      	movs	r2, #128	; 0x80
 80038f0:	611a      	str	r2, [r3, #16]
 80038f2:	4b4b      	ldr	r3, [pc, #300]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 80038f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80038fa:	4b49      	ldr	r3, [pc, #292]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 80038fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003900:	611a      	str	r2, [r3, #16]
 8003902:	4b47      	ldr	r3, [pc, #284]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 8003904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003908:	615a      	str	r2, [r3, #20]
 800390a:	88bb      	ldrh	r3, [r7, #4]
 800390c:	4a45      	ldr	r2, [pc, #276]	; (8003a24 <LCD_Fast_DrawPoint+0x1fc>)
 800390e:	b2db      	uxtb	r3, r3
 8003910:	60d3      	str	r3, [r2, #12]
 8003912:	4b43      	ldr	r3, [pc, #268]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 8003914:	2280      	movs	r2, #128	; 0x80
 8003916:	615a      	str	r2, [r3, #20]
 8003918:	4b41      	ldr	r3, [pc, #260]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 800391a:	2280      	movs	r2, #128	; 0x80
 800391c:	611a      	str	r2, [r3, #16]
 800391e:	4b40      	ldr	r3, [pc, #256]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 8003920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003924:	611a      	str	r2, [r3, #16]
 8003926:	e1e6      	b.n	8003cf6 <LCD_Fast_DrawPoint+0x4ce>
	} else if (lcddev.id == 0X5510) {
 8003928:	4b3c      	ldr	r3, [pc, #240]	; (8003a1c <LCD_Fast_DrawPoint+0x1f4>)
 800392a:	889b      	ldrh	r3, [r3, #4]
 800392c:	f245 5210 	movw	r2, #21776	; 0x5510
 8003930:	4293      	cmp	r3, r2
 8003932:	d179      	bne.n	8003a28 <LCD_Fast_DrawPoint+0x200>
		LCD_WR_REG(lcddev.setxcmd);
 8003934:	4b39      	ldr	r3, [pc, #228]	; (8003a1c <LCD_Fast_DrawPoint+0x1f4>)
 8003936:	895b      	ldrh	r3, [r3, #10]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff f895 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800393e:	4b38      	ldr	r3, [pc, #224]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 8003940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003944:	611a      	str	r2, [r3, #16]
 8003946:	4b36      	ldr	r3, [pc, #216]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 8003948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800394c:	615a      	str	r2, [r3, #20]
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	0a1b      	lsrs	r3, r3, #8
 8003952:	b29a      	uxth	r2, r3
 8003954:	4b33      	ldr	r3, [pc, #204]	; (8003a24 <LCD_Fast_DrawPoint+0x1fc>)
 8003956:	60da      	str	r2, [r3, #12]
 8003958:	4b31      	ldr	r3, [pc, #196]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 800395a:	2280      	movs	r2, #128	; 0x80
 800395c:	615a      	str	r2, [r3, #20]
 800395e:	4b30      	ldr	r3, [pc, #192]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 8003960:	2280      	movs	r2, #128	; 0x80
 8003962:	611a      	str	r2, [r3, #16]
 8003964:	4b2e      	ldr	r3, [pc, #184]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 8003966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800396a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 800396c:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <LCD_Fast_DrawPoint+0x1f4>)
 800396e:	895b      	ldrh	r3, [r3, #10]
 8003970:	3301      	adds	r3, #1
 8003972:	b29b      	uxth	r3, r3
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff f877 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 800397a:	4b29      	ldr	r3, [pc, #164]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 800397c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003980:	611a      	str	r2, [r3, #16]
 8003982:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 8003984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003988:	615a      	str	r2, [r3, #20]
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	4a25      	ldr	r2, [pc, #148]	; (8003a24 <LCD_Fast_DrawPoint+0x1fc>)
 800398e:	b2db      	uxtb	r3, r3
 8003990:	60d3      	str	r3, [r2, #12]
 8003992:	4b23      	ldr	r3, [pc, #140]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 8003994:	2280      	movs	r2, #128	; 0x80
 8003996:	615a      	str	r2, [r3, #20]
 8003998:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	611a      	str	r2, [r3, #16]
 800399e:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 80039a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039a4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80039a6:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <LCD_Fast_DrawPoint+0x1f4>)
 80039a8:	899b      	ldrh	r3, [r3, #12]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff f85c 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 80039b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039b6:	611a      	str	r2, [r3, #16]
 80039b8:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 80039ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039be:	615a      	str	r2, [r3, #20]
 80039c0:	88bb      	ldrh	r3, [r7, #4]
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	4b17      	ldr	r3, [pc, #92]	; (8003a24 <LCD_Fast_DrawPoint+0x1fc>)
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 80039cc:	2280      	movs	r2, #128	; 0x80
 80039ce:	615a      	str	r2, [r3, #20]
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 80039d2:	2280      	movs	r2, #128	; 0x80
 80039d4:	611a      	str	r2, [r3, #16]
 80039d6:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 80039d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039dc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80039de:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <LCD_Fast_DrawPoint+0x1f4>)
 80039e0:	899b      	ldrh	r3, [r3, #12]
 80039e2:	3301      	adds	r3, #1
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff f83e 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 80039ec:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 80039ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039f2:	611a      	str	r2, [r3, #16]
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 80039f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039fa:	615a      	str	r2, [r3, #20]
 80039fc:	88bb      	ldrh	r3, [r7, #4]
 80039fe:	4a09      	ldr	r2, [pc, #36]	; (8003a24 <LCD_Fast_DrawPoint+0x1fc>)
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	60d3      	str	r3, [r2, #12]
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 8003a06:	2280      	movs	r2, #128	; 0x80
 8003a08:	615a      	str	r2, [r3, #20]
 8003a0a:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 8003a0c:	2280      	movs	r2, #128	; 0x80
 8003a0e:	611a      	str	r2, [r3, #16]
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <LCD_Fast_DrawPoint+0x1f8>)
 8003a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a16:	611a      	str	r2, [r3, #16]
 8003a18:	e16d      	b.n	8003cf6 <LCD_Fast_DrawPoint+0x4ce>
 8003a1a:	bf00      	nop
 8003a1c:	200007cc 	.word	0x200007cc
 8003a20:	40011000 	.word	0x40011000
 8003a24:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8003a28:	4b68      	ldr	r3, [pc, #416]	; (8003bcc <LCD_Fast_DrawPoint+0x3a4>)
 8003a2a:	889b      	ldrh	r3, [r3, #4]
 8003a2c:	f641 1263 	movw	r2, #6499	; 0x1963
 8003a30:	4293      	cmp	r3, r2
 8003a32:	f040 80d1 	bne.w	8003bd8 <LCD_Fast_DrawPoint+0x3b0>
		if (lcddev.dir == 0)
 8003a36:	4b65      	ldr	r3, [pc, #404]	; (8003bcc <LCD_Fast_DrawPoint+0x3a4>)
 8003a38:	799b      	ldrb	r3, [r3, #6]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <LCD_Fast_DrawPoint+0x224>
			x = lcddev.width - 1 - x;
 8003a3e:	4b63      	ldr	r3, [pc, #396]	; (8003bcc <LCD_Fast_DrawPoint+0x3a4>)
 8003a40:	881a      	ldrh	r2, [r3, #0]
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8003a4c:	4b5f      	ldr	r3, [pc, #380]	; (8003bcc <LCD_Fast_DrawPoint+0x3a4>)
 8003a4e:	895b      	ldrh	r3, [r3, #10]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff f809 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8003a56:	4b5e      	ldr	r3, [pc, #376]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a5c:	611a      	str	r2, [r3, #16]
 8003a5e:	4b5c      	ldr	r3, [pc, #368]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a64:	615a      	str	r2, [r3, #20]
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	0a1b      	lsrs	r3, r3, #8
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	4b59      	ldr	r3, [pc, #356]	; (8003bd4 <LCD_Fast_DrawPoint+0x3ac>)
 8003a6e:	60da      	str	r2, [r3, #12]
 8003a70:	4b57      	ldr	r3, [pc, #348]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003a72:	2280      	movs	r2, #128	; 0x80
 8003a74:	615a      	str	r2, [r3, #20]
 8003a76:	4b56      	ldr	r3, [pc, #344]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003a78:	2280      	movs	r2, #128	; 0x80
 8003a7a:	611a      	str	r2, [r3, #16]
 8003a7c:	4b54      	ldr	r3, [pc, #336]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a82:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8003a84:	4b52      	ldr	r3, [pc, #328]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a8a:	611a      	str	r2, [r3, #16]
 8003a8c:	4b50      	ldr	r3, [pc, #320]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a92:	615a      	str	r2, [r3, #20]
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	4a4f      	ldr	r2, [pc, #316]	; (8003bd4 <LCD_Fast_DrawPoint+0x3ac>)
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	60d3      	str	r3, [r2, #12]
 8003a9c:	4b4c      	ldr	r3, [pc, #304]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003a9e:	2280      	movs	r2, #128	; 0x80
 8003aa0:	615a      	str	r2, [r3, #20]
 8003aa2:	4b4b      	ldr	r3, [pc, #300]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003aa4:	2280      	movs	r2, #128	; 0x80
 8003aa6:	611a      	str	r2, [r3, #16]
 8003aa8:	4b49      	ldr	r3, [pc, #292]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aae:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8003ab0:	4b47      	ldr	r3, [pc, #284]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ab6:	611a      	str	r2, [r3, #16]
 8003ab8:	4b45      	ldr	r3, [pc, #276]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003abe:	615a      	str	r2, [r3, #20]
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	0a1b      	lsrs	r3, r3, #8
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	4b43      	ldr	r3, [pc, #268]	; (8003bd4 <LCD_Fast_DrawPoint+0x3ac>)
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	4b41      	ldr	r3, [pc, #260]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003acc:	2280      	movs	r2, #128	; 0x80
 8003ace:	615a      	str	r2, [r3, #20]
 8003ad0:	4b3f      	ldr	r3, [pc, #252]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003ad2:	2280      	movs	r2, #128	; 0x80
 8003ad4:	611a      	str	r2, [r3, #16]
 8003ad6:	4b3e      	ldr	r3, [pc, #248]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003adc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8003ade:	4b3c      	ldr	r3, [pc, #240]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ae4:	611a      	str	r2, [r3, #16]
 8003ae6:	4b3a      	ldr	r3, [pc, #232]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aec:	615a      	str	r2, [r3, #20]
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	4a38      	ldr	r2, [pc, #224]	; (8003bd4 <LCD_Fast_DrawPoint+0x3ac>)
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	60d3      	str	r3, [r2, #12]
 8003af6:	4b36      	ldr	r3, [pc, #216]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003af8:	2280      	movs	r2, #128	; 0x80
 8003afa:	615a      	str	r2, [r3, #20]
 8003afc:	4b34      	ldr	r3, [pc, #208]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003afe:	2280      	movs	r2, #128	; 0x80
 8003b00:	611a      	str	r2, [r3, #16]
 8003b02:	4b33      	ldr	r3, [pc, #204]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b08:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003b0a:	4b30      	ldr	r3, [pc, #192]	; (8003bcc <LCD_Fast_DrawPoint+0x3a4>)
 8003b0c:	899b      	ldrh	r3, [r3, #12]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe ffaa 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8003b14:	4b2e      	ldr	r3, [pc, #184]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b1a:	611a      	str	r2, [r3, #16]
 8003b1c:	4b2c      	ldr	r3, [pc, #176]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b22:	615a      	str	r2, [r3, #20]
 8003b24:	88bb      	ldrh	r3, [r7, #4]
 8003b26:	0a1b      	lsrs	r3, r3, #8
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	4b2a      	ldr	r3, [pc, #168]	; (8003bd4 <LCD_Fast_DrawPoint+0x3ac>)
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	4b28      	ldr	r3, [pc, #160]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003b30:	2280      	movs	r2, #128	; 0x80
 8003b32:	615a      	str	r2, [r3, #20]
 8003b34:	4b26      	ldr	r3, [pc, #152]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003b36:	2280      	movs	r2, #128	; 0x80
 8003b38:	611a      	str	r2, [r3, #16]
 8003b3a:	4b25      	ldr	r3, [pc, #148]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b40:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8003b42:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b48:	611a      	str	r2, [r3, #16]
 8003b4a:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b50:	615a      	str	r2, [r3, #20]
 8003b52:	88bb      	ldrh	r3, [r7, #4]
 8003b54:	4a1f      	ldr	r2, [pc, #124]	; (8003bd4 <LCD_Fast_DrawPoint+0x3ac>)
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	60d3      	str	r3, [r2, #12]
 8003b5a:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003b5c:	2280      	movs	r2, #128	; 0x80
 8003b5e:	615a      	str	r2, [r3, #20]
 8003b60:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003b62:	2280      	movs	r2, #128	; 0x80
 8003b64:	611a      	str	r2, [r3, #16]
 8003b66:	4b1a      	ldr	r3, [pc, #104]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b6c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8003b6e:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b74:	611a      	str	r2, [r3, #16]
 8003b76:	4b16      	ldr	r3, [pc, #88]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b7c:	615a      	str	r2, [r3, #20]
 8003b7e:	88bb      	ldrh	r3, [r7, #4]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	4b13      	ldr	r3, [pc, #76]	; (8003bd4 <LCD_Fast_DrawPoint+0x3ac>)
 8003b86:	60da      	str	r2, [r3, #12]
 8003b88:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003b8a:	2280      	movs	r2, #128	; 0x80
 8003b8c:	615a      	str	r2, [r3, #20]
 8003b8e:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003b90:	2280      	movs	r2, #128	; 0x80
 8003b92:	611a      	str	r2, [r3, #16]
 8003b94:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b9a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003b9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ba2:	611a      	str	r2, [r3, #16]
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003baa:	615a      	str	r2, [r3, #20]
 8003bac:	88bb      	ldrh	r3, [r7, #4]
 8003bae:	4a09      	ldr	r2, [pc, #36]	; (8003bd4 <LCD_Fast_DrawPoint+0x3ac>)
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	60d3      	str	r3, [r2, #12]
 8003bb4:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003bb6:	2280      	movs	r2, #128	; 0x80
 8003bb8:	615a      	str	r2, [r3, #20]
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003bbc:	2280      	movs	r2, #128	; 0x80
 8003bbe:	611a      	str	r2, [r3, #16]
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <LCD_Fast_DrawPoint+0x3a8>)
 8003bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bc6:	611a      	str	r2, [r3, #16]
 8003bc8:	e095      	b.n	8003cf6 <LCD_Fast_DrawPoint+0x4ce>
 8003bca:	bf00      	nop
 8003bcc:	200007cc 	.word	0x200007cc
 8003bd0:	40011000 	.word	0x40011000
 8003bd4:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8003bd8:	4b5f      	ldr	r3, [pc, #380]	; (8003d58 <LCD_Fast_DrawPoint+0x530>)
 8003bda:	889b      	ldrh	r3, [r3, #4]
 8003bdc:	f646 0204 	movw	r2, #26628	; 0x6804
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d16f      	bne.n	8003cc4 <LCD_Fast_DrawPoint+0x49c>
		if (lcddev.dir == 1)
 8003be4:	4b5c      	ldr	r3, [pc, #368]	; (8003d58 <LCD_Fast_DrawPoint+0x530>)
 8003be6:	799b      	ldrb	r3, [r3, #6]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d106      	bne.n	8003bfa <LCD_Fast_DrawPoint+0x3d2>
			x = lcddev.width - 1 - x;	//横屏时处理
 8003bec:	4b5a      	ldr	r3, [pc, #360]	; (8003d58 <LCD_Fast_DrawPoint+0x530>)
 8003bee:	881a      	ldrh	r2, [r3, #0]
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8003bfa:	4b57      	ldr	r3, [pc, #348]	; (8003d58 <LCD_Fast_DrawPoint+0x530>)
 8003bfc:	895b      	ldrh	r3, [r3, #10]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe ff32 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8003c04:	4b55      	ldr	r3, [pc, #340]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003c06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c0a:	611a      	str	r2, [r3, #16]
 8003c0c:	4b53      	ldr	r3, [pc, #332]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c12:	615a      	str	r2, [r3, #20]
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	0a1b      	lsrs	r3, r3, #8
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	4b51      	ldr	r3, [pc, #324]	; (8003d60 <LCD_Fast_DrawPoint+0x538>)
 8003c1c:	60da      	str	r2, [r3, #12]
 8003c1e:	4b4f      	ldr	r3, [pc, #316]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003c20:	2280      	movs	r2, #128	; 0x80
 8003c22:	615a      	str	r2, [r3, #20]
 8003c24:	4b4d      	ldr	r3, [pc, #308]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003c26:	2280      	movs	r2, #128	; 0x80
 8003c28:	611a      	str	r2, [r3, #16]
 8003c2a:	4b4c      	ldr	r3, [pc, #304]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c30:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8003c32:	4b4a      	ldr	r3, [pc, #296]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003c34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c38:	611a      	str	r2, [r3, #16]
 8003c3a:	4b48      	ldr	r3, [pc, #288]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c40:	615a      	str	r2, [r3, #20]
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	4a46      	ldr	r2, [pc, #280]	; (8003d60 <LCD_Fast_DrawPoint+0x538>)
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	60d3      	str	r3, [r2, #12]
 8003c4a:	4b44      	ldr	r3, [pc, #272]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003c4c:	2280      	movs	r2, #128	; 0x80
 8003c4e:	615a      	str	r2, [r3, #20]
 8003c50:	4b42      	ldr	r3, [pc, #264]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003c52:	2280      	movs	r2, #128	; 0x80
 8003c54:	611a      	str	r2, [r3, #16]
 8003c56:	4b41      	ldr	r3, [pc, #260]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c5c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003c5e:	4b3e      	ldr	r3, [pc, #248]	; (8003d58 <LCD_Fast_DrawPoint+0x530>)
 8003c60:	899b      	ldrh	r3, [r3, #12]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe ff00 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8003c68:	4b3c      	ldr	r3, [pc, #240]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c6e:	611a      	str	r2, [r3, #16]
 8003c70:	4b3a      	ldr	r3, [pc, #232]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c76:	615a      	str	r2, [r3, #20]
 8003c78:	88bb      	ldrh	r3, [r7, #4]
 8003c7a:	0a1b      	lsrs	r3, r3, #8
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	4b38      	ldr	r3, [pc, #224]	; (8003d60 <LCD_Fast_DrawPoint+0x538>)
 8003c80:	60da      	str	r2, [r3, #12]
 8003c82:	4b36      	ldr	r3, [pc, #216]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003c84:	2280      	movs	r2, #128	; 0x80
 8003c86:	615a      	str	r2, [r3, #20]
 8003c88:	4b34      	ldr	r3, [pc, #208]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003c8a:	2280      	movs	r2, #128	; 0x80
 8003c8c:	611a      	str	r2, [r3, #16]
 8003c8e:	4b33      	ldr	r3, [pc, #204]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c94:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8003c96:	4b31      	ldr	r3, [pc, #196]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003c98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c9c:	611a      	str	r2, [r3, #16]
 8003c9e:	4b2f      	ldr	r3, [pc, #188]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ca4:	615a      	str	r2, [r3, #20]
 8003ca6:	88bb      	ldrh	r3, [r7, #4]
 8003ca8:	4a2d      	ldr	r2, [pc, #180]	; (8003d60 <LCD_Fast_DrawPoint+0x538>)
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	60d3      	str	r3, [r2, #12]
 8003cae:	4b2b      	ldr	r3, [pc, #172]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003cb0:	2280      	movs	r2, #128	; 0x80
 8003cb2:	615a      	str	r2, [r3, #20]
 8003cb4:	4b29      	ldr	r3, [pc, #164]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003cb6:	2280      	movs	r2, #128	; 0x80
 8003cb8:	611a      	str	r2, [r3, #16]
 8003cba:	4b28      	ldr	r3, [pc, #160]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc0:	611a      	str	r2, [r3, #16]
 8003cc2:	e018      	b.n	8003cf6 <LCD_Fast_DrawPoint+0x4ce>
	} else {
		if (lcddev.dir == 1)
 8003cc4:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <LCD_Fast_DrawPoint+0x530>)
 8003cc6:	799b      	ldrb	r3, [r3, #6]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d106      	bne.n	8003cda <LCD_Fast_DrawPoint+0x4b2>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8003ccc:	4b22      	ldr	r3, [pc, #136]	; (8003d58 <LCD_Fast_DrawPoint+0x530>)
 8003cce:	881a      	ldrh	r2, [r3, #0]
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8003cda:	4b1f      	ldr	r3, [pc, #124]	; (8003d58 <LCD_Fast_DrawPoint+0x530>)
 8003cdc:	895b      	ldrh	r3, [r3, #10]
 8003cde:	88fa      	ldrh	r2, [r7, #6]
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe ff4c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <LCD_Fast_DrawPoint+0x530>)
 8003cea:	899b      	ldrh	r3, [r3, #12]
 8003cec:	88ba      	ldrh	r2, [r7, #4]
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe ff45 	bl	8002b80 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8003cf6:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003cf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cfc:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8003cfe:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d04:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8003d06:	4b14      	ldr	r3, [pc, #80]	; (8003d58 <LCD_Fast_DrawPoint+0x530>)
 8003d08:	891a      	ldrh	r2, [r3, #8]
 8003d0a:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <LCD_Fast_DrawPoint+0x538>)
 8003d0c:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8003d0e:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003d10:	2280      	movs	r2, #128	; 0x80
 8003d12:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8003d14:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003d16:	2280      	movs	r2, #128	; 0x80
 8003d18:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8003d1a:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d20:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8003d22:	4b0e      	ldr	r3, [pc, #56]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d28:	611a      	str	r2, [r3, #16]
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d30:	615a      	str	r2, [r3, #20]
 8003d32:	4a0b      	ldr	r2, [pc, #44]	; (8003d60 <LCD_Fast_DrawPoint+0x538>)
 8003d34:	887b      	ldrh	r3, [r7, #2]
 8003d36:	60d3      	str	r3, [r2, #12]
 8003d38:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003d3a:	2280      	movs	r2, #128	; 0x80
 8003d3c:	615a      	str	r2, [r3, #20]
 8003d3e:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003d40:	2280      	movs	r2, #128	; 0x80
 8003d42:	611a      	str	r2, [r3, #16]
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <LCD_Fast_DrawPoint+0x534>)
 8003d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d4a:	611a      	str	r2, [r3, #16]
 8003d4c:	e000      	b.n	8003d50 <LCD_Fast_DrawPoint+0x528>
		return;
 8003d4e:	bf00      	nop
}
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	200007cc 	.word	0x200007cc
 8003d5c:	40011000 	.word	0x40011000
 8003d60:	40010c00 	.word	0x40010c00
 8003d64:	00000000 	.word	0x00000000

08003d68 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8003d68:	b590      	push	{r4, r7, lr}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8003d72:	20be      	movs	r0, #190	; 0xbe
 8003d74:	f7fe fe78 	bl	8002a68 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8003d78:	4b4b      	ldr	r3, [pc, #300]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d7e:	611a      	str	r2, [r3, #16]
 8003d80:	4b49      	ldr	r3, [pc, #292]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d86:	615a      	str	r2, [r3, #20]
 8003d88:	4b48      	ldr	r3, [pc, #288]	; (8003eac <LCD_SSD_BackLightSet+0x144>)
 8003d8a:	2205      	movs	r2, #5
 8003d8c:	60da      	str	r2, [r3, #12]
 8003d8e:	4b46      	ldr	r3, [pc, #280]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003d90:	2280      	movs	r2, #128	; 0x80
 8003d92:	615a      	str	r2, [r3, #20]
 8003d94:	4b44      	ldr	r3, [pc, #272]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003d96:	2280      	movs	r2, #128	; 0x80
 8003d98:	611a      	str	r2, [r3, #16]
 8003d9a:	4b43      	ldr	r3, [pc, #268]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003da0:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8003da2:	4b41      	ldr	r3, [pc, #260]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003da4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003da8:	611a      	str	r2, [r3, #16]
 8003daa:	4b3f      	ldr	r3, [pc, #252]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003db0:	615a      	str	r2, [r3, #20]
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fc fb89 	bl	80004cc <__aeabi_i2d>
 8003dba:	a339      	add	r3, pc, #228	; (adr r3, 8003ea0 <LCD_SSD_BackLightSet+0x138>)
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f7fc fbee 	bl	80005a0 <__aeabi_dmul>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4623      	mov	r3, r4
 8003dcc:	4c37      	ldr	r4, [pc, #220]	; (8003eac <LCD_SSD_BackLightSet+0x144>)
 8003dce:	4610      	mov	r0, r2
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	f7fc fdf7 	bl	80009c4 <__aeabi_d2uiz>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	60e3      	str	r3, [r4, #12]
 8003dda:	4b33      	ldr	r3, [pc, #204]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003ddc:	2280      	movs	r2, #128	; 0x80
 8003dde:	615a      	str	r2, [r3, #20]
 8003de0:	4b31      	ldr	r3, [pc, #196]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003de2:	2280      	movs	r2, #128	; 0x80
 8003de4:	611a      	str	r2, [r3, #16]
 8003de6:	4b30      	ldr	r3, [pc, #192]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dec:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8003dee:	4b2e      	ldr	r3, [pc, #184]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003df0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003df4:	611a      	str	r2, [r3, #16]
 8003df6:	4b2c      	ldr	r3, [pc, #176]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dfc:	615a      	str	r2, [r3, #20]
 8003dfe:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <LCD_SSD_BackLightSet+0x144>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	60da      	str	r2, [r3, #12]
 8003e04:	4b28      	ldr	r3, [pc, #160]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003e06:	2280      	movs	r2, #128	; 0x80
 8003e08:	615a      	str	r2, [r3, #20]
 8003e0a:	4b27      	ldr	r3, [pc, #156]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003e0c:	2280      	movs	r2, #128	; 0x80
 8003e0e:	611a      	str	r2, [r3, #16]
 8003e10:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e16:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8003e18:	4b23      	ldr	r3, [pc, #140]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e1e:	611a      	str	r2, [r3, #16]
 8003e20:	4b21      	ldr	r3, [pc, #132]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e26:	615a      	str	r2, [r3, #20]
 8003e28:	4b20      	ldr	r3, [pc, #128]	; (8003eac <LCD_SSD_BackLightSet+0x144>)
 8003e2a:	22ff      	movs	r2, #255	; 0xff
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003e30:	2280      	movs	r2, #128	; 0x80
 8003e32:	615a      	str	r2, [r3, #20]
 8003e34:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003e36:	2280      	movs	r2, #128	; 0x80
 8003e38:	611a      	str	r2, [r3, #16]
 8003e3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e40:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8003e42:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e48:	611a      	str	r2, [r3, #16]
 8003e4a:	4b17      	ldr	r3, [pc, #92]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e50:	615a      	str	r2, [r3, #20]
 8003e52:	4b16      	ldr	r3, [pc, #88]	; (8003eac <LCD_SSD_BackLightSet+0x144>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	60da      	str	r2, [r3, #12]
 8003e58:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003e5a:	2280      	movs	r2, #128	; 0x80
 8003e5c:	615a      	str	r2, [r3, #20]
 8003e5e:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003e60:	2280      	movs	r2, #128	; 0x80
 8003e62:	611a      	str	r2, [r3, #16]
 8003e64:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e6a:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8003e6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e72:	611a      	str	r2, [r3, #16]
 8003e74:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003e76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e7a:	615a      	str	r2, [r3, #20]
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <LCD_SSD_BackLightSet+0x144>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003e84:	2280      	movs	r2, #128	; 0x80
 8003e86:	615a      	str	r2, [r3, #20]
 8003e88:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003e8a:	2280      	movs	r2, #128	; 0x80
 8003e8c:	611a      	str	r2, [r3, #16]
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <LCD_SSD_BackLightSet+0x140>)
 8003e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e94:	611a      	str	r2, [r3, #16]
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd90      	pop	{r4, r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	66666666 	.word	0x66666666
 8003ea4:	40046666 	.word	0x40046666
 8003ea8:	40011000 	.word	0x40011000
 8003eac:	40010c00 	.word	0x40010c00

08003eb0 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d177      	bne.n	8003fb0 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8003ec0:	4b80      	ldr	r3, [pc, #512]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8003ec6:	4b7f      	ldr	r3, [pc, #508]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003ec8:	22f0      	movs	r2, #240	; 0xf0
 8003eca:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8003ecc:	4b7d      	ldr	r3, [pc, #500]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003ece:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003ed2:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003ed4:	4b7b      	ldr	r3, [pc, #492]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003ed6:	889b      	ldrh	r3, [r3, #4]
 8003ed8:	f249 3241 	movw	r2, #37697	; 0x9341
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00b      	beq.n	8003ef8 <LCD_Display_Dir+0x48>
 8003ee0:	4b78      	ldr	r3, [pc, #480]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003ee2:	889b      	ldrh	r3, [r3, #4]
 8003ee4:	f646 0204 	movw	r2, #26628	; 0x6804
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d005      	beq.n	8003ef8 <LCD_Display_Dir+0x48>
 8003eec:	4b75      	ldr	r3, [pc, #468]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003eee:	889b      	ldrh	r3, [r3, #4]
 8003ef0:	f245 3210 	movw	r2, #21264	; 0x5310
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d11e      	bne.n	8003f36 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8003ef8:	4b72      	ldr	r3, [pc, #456]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003efa:	222c      	movs	r2, #44	; 0x2c
 8003efc:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8003efe:	4b71      	ldr	r3, [pc, #452]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f00:	222a      	movs	r2, #42	; 0x2a
 8003f02:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8003f04:	4b6f      	ldr	r3, [pc, #444]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f06:	222b      	movs	r2, #43	; 0x2b
 8003f08:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003f0a:	4b6e      	ldr	r3, [pc, #440]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f0c:	889b      	ldrh	r3, [r3, #4]
 8003f0e:	f646 0204 	movw	r2, #26628	; 0x6804
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d006      	beq.n	8003f24 <LCD_Display_Dir+0x74>
 8003f16:	4b6b      	ldr	r3, [pc, #428]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f18:	889b      	ldrh	r3, [r3, #4]
 8003f1a:	f245 3210 	movw	r2, #21264	; 0x5310
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	f040 80c7 	bne.w	80040b2 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8003f24:	4b67      	ldr	r3, [pc, #412]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f26:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f2a:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8003f2c:	4b65      	ldr	r3, [pc, #404]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003f32:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003f34:	e0bd      	b.n	80040b2 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8003f36:	4b63      	ldr	r3, [pc, #396]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f38:	889b      	ldrh	r3, [r3, #4]
 8003f3a:	f245 5210 	movw	r2, #21776	; 0x5510
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d114      	bne.n	8003f6c <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8003f42:	4b60      	ldr	r3, [pc, #384]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f44:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003f48:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8003f4a:	4b5e      	ldr	r3, [pc, #376]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f4c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8003f50:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8003f52:	4b5c      	ldr	r3, [pc, #368]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f54:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8003f58:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8003f5a:	4b5a      	ldr	r3, [pc, #360]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f5c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003f60:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8003f62:	4b58      	ldr	r3, [pc, #352]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f64:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003f68:	805a      	strh	r2, [r3, #2]
 8003f6a:	e0a3      	b.n	80040b4 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8003f6c:	4b55      	ldr	r3, [pc, #340]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f6e:	889b      	ldrh	r3, [r3, #4]
 8003f70:	f641 1263 	movw	r2, #6499	; 0x1963
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d111      	bne.n	8003f9c <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8003f78:	4b52      	ldr	r3, [pc, #328]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f7a:	222c      	movs	r2, #44	; 0x2c
 8003f7c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8003f7e:	4b51      	ldr	r3, [pc, #324]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f80:	222b      	movs	r2, #43	; 0x2b
 8003f82:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8003f84:	4b4f      	ldr	r3, [pc, #316]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f86:	222a      	movs	r2, #42	; 0x2a
 8003f88:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8003f8a:	4b4e      	ldr	r3, [pc, #312]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f8c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003f90:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8003f92:	4b4c      	ldr	r3, [pc, #304]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f94:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003f98:	805a      	strh	r2, [r3, #2]
 8003f9a:	e08b      	b.n	80040b4 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8003f9c:	4b49      	ldr	r3, [pc, #292]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003f9e:	2222      	movs	r2, #34	; 0x22
 8003fa0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8003fa2:	4b48      	ldr	r3, [pc, #288]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8003fa8:	4b46      	ldr	r3, [pc, #280]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003faa:	2221      	movs	r2, #33	; 0x21
 8003fac:	819a      	strh	r2, [r3, #12]
 8003fae:	e081      	b.n	80040b4 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8003fb0:	4b44      	ldr	r3, [pc, #272]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8003fb6:	4b43      	ldr	r3, [pc, #268]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003fb8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003fbc:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8003fbe:	4b41      	ldr	r3, [pc, #260]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003fc0:	22f0      	movs	r2, #240	; 0xf0
 8003fc2:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8003fc4:	4b3f      	ldr	r3, [pc, #252]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003fc6:	889b      	ldrh	r3, [r3, #4]
 8003fc8:	f249 3241 	movw	r2, #37697	; 0x9341
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d005      	beq.n	8003fdc <LCD_Display_Dir+0x12c>
 8003fd0:	4b3c      	ldr	r3, [pc, #240]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003fd2:	889b      	ldrh	r3, [r3, #4]
 8003fd4:	f245 3210 	movw	r2, #21264	; 0x5310
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d109      	bne.n	8003ff0 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8003fdc:	4b39      	ldr	r3, [pc, #228]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003fde:	222c      	movs	r2, #44	; 0x2c
 8003fe0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8003fe2:	4b38      	ldr	r3, [pc, #224]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003fe4:	222a      	movs	r2, #42	; 0x2a
 8003fe6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8003fe8:	4b36      	ldr	r3, [pc, #216]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003fea:	222b      	movs	r2, #43	; 0x2b
 8003fec:	819a      	strh	r2, [r3, #12]
 8003fee:	e04b      	b.n	8004088 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8003ff0:	4b34      	ldr	r3, [pc, #208]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003ff2:	889b      	ldrh	r3, [r3, #4]
 8003ff4:	f646 0204 	movw	r2, #26628	; 0x6804
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d109      	bne.n	8004010 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8003ffc:	4b31      	ldr	r3, [pc, #196]	; (80040c4 <LCD_Display_Dir+0x214>)
 8003ffe:	222c      	movs	r2, #44	; 0x2c
 8004000:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8004002:	4b30      	ldr	r3, [pc, #192]	; (80040c4 <LCD_Display_Dir+0x214>)
 8004004:	222b      	movs	r2, #43	; 0x2b
 8004006:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8004008:	4b2e      	ldr	r3, [pc, #184]	; (80040c4 <LCD_Display_Dir+0x214>)
 800400a:	222a      	movs	r2, #42	; 0x2a
 800400c:	819a      	strh	r2, [r3, #12]
 800400e:	e03b      	b.n	8004088 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8004010:	4b2c      	ldr	r3, [pc, #176]	; (80040c4 <LCD_Display_Dir+0x214>)
 8004012:	889b      	ldrh	r3, [r3, #4]
 8004014:	f245 5210 	movw	r2, #21776	; 0x5510
 8004018:	4293      	cmp	r3, r2
 800401a:	d114      	bne.n	8004046 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 800401c:	4b29      	ldr	r3, [pc, #164]	; (80040c4 <LCD_Display_Dir+0x214>)
 800401e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8004022:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8004024:	4b27      	ldr	r3, [pc, #156]	; (80040c4 <LCD_Display_Dir+0x214>)
 8004026:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 800402a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 800402c:	4b25      	ldr	r3, [pc, #148]	; (80040c4 <LCD_Display_Dir+0x214>)
 800402e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8004032:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8004034:	4b23      	ldr	r3, [pc, #140]	; (80040c4 <LCD_Display_Dir+0x214>)
 8004036:	f44f 7248 	mov.w	r2, #800	; 0x320
 800403a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 800403c:	4b21      	ldr	r3, [pc, #132]	; (80040c4 <LCD_Display_Dir+0x214>)
 800403e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004042:	805a      	strh	r2, [r3, #2]
 8004044:	e020      	b.n	8004088 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8004046:	4b1f      	ldr	r3, [pc, #124]	; (80040c4 <LCD_Display_Dir+0x214>)
 8004048:	889b      	ldrh	r3, [r3, #4]
 800404a:	f641 1263 	movw	r2, #6499	; 0x1963
 800404e:	4293      	cmp	r3, r2
 8004050:	d111      	bne.n	8004076 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8004052:	4b1c      	ldr	r3, [pc, #112]	; (80040c4 <LCD_Display_Dir+0x214>)
 8004054:	222c      	movs	r2, #44	; 0x2c
 8004056:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8004058:	4b1a      	ldr	r3, [pc, #104]	; (80040c4 <LCD_Display_Dir+0x214>)
 800405a:	222a      	movs	r2, #42	; 0x2a
 800405c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 800405e:	4b19      	ldr	r3, [pc, #100]	; (80040c4 <LCD_Display_Dir+0x214>)
 8004060:	222b      	movs	r2, #43	; 0x2b
 8004062:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8004064:	4b17      	ldr	r3, [pc, #92]	; (80040c4 <LCD_Display_Dir+0x214>)
 8004066:	f44f 7248 	mov.w	r2, #800	; 0x320
 800406a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 800406c:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <LCD_Display_Dir+0x214>)
 800406e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004072:	805a      	strh	r2, [r3, #2]
 8004074:	e008      	b.n	8004088 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8004076:	4b13      	ldr	r3, [pc, #76]	; (80040c4 <LCD_Display_Dir+0x214>)
 8004078:	2222      	movs	r2, #34	; 0x22
 800407a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 800407c:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <LCD_Display_Dir+0x214>)
 800407e:	2221      	movs	r2, #33	; 0x21
 8004080:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8004082:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <LCD_Display_Dir+0x214>)
 8004084:	2220      	movs	r2, #32
 8004086:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8004088:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <LCD_Display_Dir+0x214>)
 800408a:	889b      	ldrh	r3, [r3, #4]
 800408c:	f646 0204 	movw	r2, #26628	; 0x6804
 8004090:	4293      	cmp	r3, r2
 8004092:	d005      	beq.n	80040a0 <LCD_Display_Dir+0x1f0>
 8004094:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <LCD_Display_Dir+0x214>)
 8004096:	889b      	ldrh	r3, [r3, #4]
 8004098:	f245 3210 	movw	r2, #21264	; 0x5310
 800409c:	4293      	cmp	r3, r2
 800409e:	d109      	bne.n	80040b4 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 80040a0:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <LCD_Display_Dir+0x214>)
 80040a2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80040a6:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 80040a8:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <LCD_Display_Dir+0x214>)
 80040aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80040ae:	805a      	strh	r2, [r3, #2]
 80040b0:	e000      	b.n	80040b4 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80040b2:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 80040b4:	2000      	movs	r0, #0
 80040b6:	f7ff f875 	bl	80031a4 <LCD_Scan_Dir>
}
 80040ba:	bf00      	nop
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	200007cc 	.word	0x200007cc

080040c8 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 80040ce:	4b90      	ldr	r3, [pc, #576]	; (8004310 <LCD_Init+0x248>)
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	4a8f      	ldr	r2, [pc, #572]	; (8004310 <LCD_Init+0x248>)
 80040d4:	f043 0308 	orr.w	r3, r3, #8
 80040d8:	6193      	str	r3, [r2, #24]
 80040da:	4b8d      	ldr	r3, [pc, #564]	; (8004310 <LCD_Init+0x248>)
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	607b      	str	r3, [r7, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 80040e6:	4b8a      	ldr	r3, [pc, #552]	; (8004310 <LCD_Init+0x248>)
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	4a89      	ldr	r2, [pc, #548]	; (8004310 <LCD_Init+0x248>)
 80040ec:	f043 0310 	orr.w	r3, r3, #16
 80040f0:	6193      	str	r3, [r2, #24]
 80040f2:	4b87      	ldr	r3, [pc, #540]	; (8004310 <LCD_Init+0x248>)
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 80040fe:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8004102:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8004104:	2301      	movs	r3, #1
 8004106:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8004108:	2301      	movs	r3, #1
 800410a:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 800410c:	2303      	movs	r3, #3
 800410e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8004110:	f107 0308 	add.w	r3, r7, #8
 8004114:	4619      	mov	r1, r3
 8004116:	487f      	ldr	r0, [pc, #508]	; (8004314 <LCD_Init+0x24c>)
 8004118:	f7fc fddc 	bl	8000cd4 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 800411c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004120:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8004122:	f107 0308 	add.w	r3, r7, #8
 8004126:	4619      	mov	r1, r3
 8004128:	487b      	ldr	r0, [pc, #492]	; (8004318 <LCD_Init+0x250>)
 800412a:	f7fc fdd3 	bl	8000cd4 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 800412e:	2032      	movs	r0, #50	; 0x32
 8004130:	f7fc fcca 	bl	8000ac8 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8004134:	2101      	movs	r1, #1
 8004136:	2000      	movs	r0, #0
 8004138:	f7fe fd22 	bl	8002b80 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 800413c:	2032      	movs	r0, #50	; 0x32
 800413e:	f7fc fcc3 	bl	8000ac8 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8004142:	2000      	movs	r0, #0
 8004144:	f7fe fd46 	bl	8002bd4 <LCD_ReadReg>
 8004148:	4603      	mov	r3, r0
 800414a:	461a      	mov	r2, r3
 800414c:	4b73      	ldr	r3, [pc, #460]	; (800431c <LCD_Init+0x254>)
 800414e:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8004150:	4b72      	ldr	r3, [pc, #456]	; (800431c <LCD_Init+0x254>)
 8004152:	889b      	ldrh	r3, [r3, #4]
 8004154:	2bfe      	cmp	r3, #254	; 0xfe
 8004156:	d90b      	bls.n	8004170 <LCD_Init+0xa8>
 8004158:	4b70      	ldr	r3, [pc, #448]	; (800431c <LCD_Init+0x254>)
 800415a:	889b      	ldrh	r3, [r3, #4]
 800415c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004160:	4293      	cmp	r3, r2
 8004162:	d005      	beq.n	8004170 <LCD_Init+0xa8>
 8004164:	4b6d      	ldr	r3, [pc, #436]	; (800431c <LCD_Init+0x254>)
 8004166:	889b      	ldrh	r3, [r3, #4]
 8004168:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 800416c:	f040 80c8 	bne.w	8004300 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8004170:	20d3      	movs	r0, #211	; 0xd3
 8004172:	f7fe fc79 	bl	8002a68 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8004176:	f7fe fcbf 	bl	8002af8 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 800417a:	f7fe fcbd 	bl	8002af8 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 800417e:	f7fe fcbb 	bl	8002af8 <LCD_RD_DATA>
 8004182:	4603      	mov	r3, r0
 8004184:	461a      	mov	r2, r3
 8004186:	4b65      	ldr	r3, [pc, #404]	; (800431c <LCD_Init+0x254>)
 8004188:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 800418a:	4b64      	ldr	r3, [pc, #400]	; (800431c <LCD_Init+0x254>)
 800418c:	889b      	ldrh	r3, [r3, #4]
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	b29a      	uxth	r2, r3
 8004192:	4b62      	ldr	r3, [pc, #392]	; (800431c <LCD_Init+0x254>)
 8004194:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8004196:	f7fe fcaf 	bl	8002af8 <LCD_RD_DATA>
 800419a:	4603      	mov	r3, r0
 800419c:	461a      	mov	r2, r3
 800419e:	4b5f      	ldr	r3, [pc, #380]	; (800431c <LCD_Init+0x254>)
 80041a0:	889b      	ldrh	r3, [r3, #4]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	4b5d      	ldr	r3, [pc, #372]	; (800431c <LCD_Init+0x254>)
 80041a8:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 80041aa:	4b5c      	ldr	r3, [pc, #368]	; (800431c <LCD_Init+0x254>)
 80041ac:	889b      	ldrh	r3, [r3, #4]
 80041ae:	f249 3241 	movw	r2, #37697	; 0x9341
 80041b2:	4293      	cmp	r3, r2
 80041b4:	f000 80a4 	beq.w	8004300 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 80041b8:	20bf      	movs	r0, #191	; 0xbf
 80041ba:	f7fe fc55 	bl	8002a68 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 80041be:	f7fe fc9b 	bl	8002af8 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 80041c2:	f7fe fc99 	bl	8002af8 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 80041c6:	f7fe fc97 	bl	8002af8 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 80041ca:	f7fe fc95 	bl	8002af8 <LCD_RD_DATA>
 80041ce:	4603      	mov	r3, r0
 80041d0:	461a      	mov	r2, r3
 80041d2:	4b52      	ldr	r3, [pc, #328]	; (800431c <LCD_Init+0x254>)
 80041d4:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 80041d6:	4b51      	ldr	r3, [pc, #324]	; (800431c <LCD_Init+0x254>)
 80041d8:	889b      	ldrh	r3, [r3, #4]
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	b29a      	uxth	r2, r3
 80041de:	4b4f      	ldr	r3, [pc, #316]	; (800431c <LCD_Init+0x254>)
 80041e0:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 80041e2:	f7fe fc89 	bl	8002af8 <LCD_RD_DATA>
 80041e6:	4603      	mov	r3, r0
 80041e8:	461a      	mov	r2, r3
 80041ea:	4b4c      	ldr	r3, [pc, #304]	; (800431c <LCD_Init+0x254>)
 80041ec:	889b      	ldrh	r3, [r3, #4]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	4b4a      	ldr	r3, [pc, #296]	; (800431c <LCD_Init+0x254>)
 80041f4:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 80041f6:	4b49      	ldr	r3, [pc, #292]	; (800431c <LCD_Init+0x254>)
 80041f8:	889b      	ldrh	r3, [r3, #4]
 80041fa:	f646 0204 	movw	r2, #26628	; 0x6804
 80041fe:	4293      	cmp	r3, r2
 8004200:	d07e      	beq.n	8004300 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8004202:	20d4      	movs	r0, #212	; 0xd4
 8004204:	f7fe fc30 	bl	8002a68 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8004208:	f7fe fc76 	bl	8002af8 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 800420c:	f7fe fc74 	bl	8002af8 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8004210:	f7fe fc72 	bl	8002af8 <LCD_RD_DATA>
 8004214:	4603      	mov	r3, r0
 8004216:	461a      	mov	r2, r3
 8004218:	4b40      	ldr	r3, [pc, #256]	; (800431c <LCD_Init+0x254>)
 800421a:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 800421c:	4b3f      	ldr	r3, [pc, #252]	; (800431c <LCD_Init+0x254>)
 800421e:	889b      	ldrh	r3, [r3, #4]
 8004220:	021b      	lsls	r3, r3, #8
 8004222:	b29a      	uxth	r2, r3
 8004224:	4b3d      	ldr	r3, [pc, #244]	; (800431c <LCD_Init+0x254>)
 8004226:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8004228:	f7fe fc66 	bl	8002af8 <LCD_RD_DATA>
 800422c:	4603      	mov	r3, r0
 800422e:	461a      	mov	r2, r3
 8004230:	4b3a      	ldr	r3, [pc, #232]	; (800431c <LCD_Init+0x254>)
 8004232:	889b      	ldrh	r3, [r3, #4]
 8004234:	4313      	orrs	r3, r2
 8004236:	b29a      	uxth	r2, r3
 8004238:	4b38      	ldr	r3, [pc, #224]	; (800431c <LCD_Init+0x254>)
 800423a:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 800423c:	4b37      	ldr	r3, [pc, #220]	; (800431c <LCD_Init+0x254>)
 800423e:	889b      	ldrh	r3, [r3, #4]
 8004240:	f245 3210 	movw	r2, #21264	; 0x5310
 8004244:	4293      	cmp	r3, r2
 8004246:	d05b      	beq.n	8004300 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8004248:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 800424c:	f7fe fc0c 	bl	8002a68 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8004250:	f7fe fc52 	bl	8002af8 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8004254:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8004258:	f7fe fc06 	bl	8002a68 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 800425c:	f7fe fc4c 	bl	8002af8 <LCD_RD_DATA>
 8004260:	4603      	mov	r3, r0
 8004262:	461a      	mov	r2, r3
 8004264:	4b2d      	ldr	r3, [pc, #180]	; (800431c <LCD_Init+0x254>)
 8004266:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8004268:	4b2c      	ldr	r3, [pc, #176]	; (800431c <LCD_Init+0x254>)
 800426a:	889b      	ldrh	r3, [r3, #4]
 800426c:	021b      	lsls	r3, r3, #8
 800426e:	b29a      	uxth	r2, r3
 8004270:	4b2a      	ldr	r3, [pc, #168]	; (800431c <LCD_Init+0x254>)
 8004272:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8004274:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8004278:	f7fe fbf6 	bl	8002a68 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 800427c:	f7fe fc3c 	bl	8002af8 <LCD_RD_DATA>
 8004280:	4603      	mov	r3, r0
 8004282:	461a      	mov	r2, r3
 8004284:	4b25      	ldr	r3, [pc, #148]	; (800431c <LCD_Init+0x254>)
 8004286:	889b      	ldrh	r3, [r3, #4]
 8004288:	4313      	orrs	r3, r2
 800428a:	b29a      	uxth	r2, r3
 800428c:	4b23      	ldr	r3, [pc, #140]	; (800431c <LCD_Init+0x254>)
 800428e:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8004290:	4b22      	ldr	r3, [pc, #136]	; (800431c <LCD_Init+0x254>)
 8004292:	889b      	ldrh	r3, [r3, #4]
 8004294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004298:	d103      	bne.n	80042a2 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 800429a:	4b20      	ldr	r3, [pc, #128]	; (800431c <LCD_Init+0x254>)
 800429c:	f245 5210 	movw	r2, #21776	; 0x5510
 80042a0:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 80042a2:	4b1e      	ldr	r3, [pc, #120]	; (800431c <LCD_Init+0x254>)
 80042a4:	889b      	ldrh	r3, [r3, #4]
 80042a6:	f245 5210 	movw	r2, #21776	; 0x5510
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d028      	beq.n	8004300 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 80042ae:	20a1      	movs	r0, #161	; 0xa1
 80042b0:	f7fe fbda 	bl	8002a68 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 80042b4:	f7fe fc20 	bl	8002af8 <LCD_RD_DATA>
 80042b8:	4603      	mov	r3, r0
 80042ba:	461a      	mov	r2, r3
 80042bc:	4b17      	ldr	r3, [pc, #92]	; (800431c <LCD_Init+0x254>)
 80042be:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 80042c0:	f7fe fc1a 	bl	8002af8 <LCD_RD_DATA>
 80042c4:	4603      	mov	r3, r0
 80042c6:	461a      	mov	r2, r3
 80042c8:	4b14      	ldr	r3, [pc, #80]	; (800431c <LCD_Init+0x254>)
 80042ca:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 80042cc:	4b13      	ldr	r3, [pc, #76]	; (800431c <LCD_Init+0x254>)
 80042ce:	889b      	ldrh	r3, [r3, #4]
 80042d0:	021b      	lsls	r3, r3, #8
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	4b11      	ldr	r3, [pc, #68]	; (800431c <LCD_Init+0x254>)
 80042d6:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 80042d8:	f7fe fc0e 	bl	8002af8 <LCD_RD_DATA>
 80042dc:	4603      	mov	r3, r0
 80042de:	461a      	mov	r2, r3
 80042e0:	4b0e      	ldr	r3, [pc, #56]	; (800431c <LCD_Init+0x254>)
 80042e2:	889b      	ldrh	r3, [r3, #4]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <LCD_Init+0x254>)
 80042ea:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <LCD_Init+0x254>)
 80042ee:	889b      	ldrh	r3, [r3, #4]
 80042f0:	f245 7261 	movw	r2, #22369	; 0x5761
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d103      	bne.n	8004300 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 80042f8:	4b08      	ldr	r3, [pc, #32]	; (800431c <LCD_Init+0x254>)
 80042fa:	f641 1263 	movw	r2, #6499	; 0x1963
 80042fe:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <LCD_Init+0x254>)
 8004302:	889b      	ldrh	r3, [r3, #4]
 8004304:	f249 3241 	movw	r2, #37697	; 0x9341
 8004308:	4293      	cmp	r3, r2
 800430a:	f040 811f 	bne.w	800454c <LCD_Init+0x484>
 800430e:	e007      	b.n	8004320 <LCD_Init+0x258>
 8004310:	40021000 	.word	0x40021000
 8004314:	40011000 	.word	0x40011000
 8004318:	40010c00 	.word	0x40010c00
 800431c:	200007cc 	.word	0x200007cc
			{
		LCD_WR_REG(0xCF);
 8004320:	20cf      	movs	r0, #207	; 0xcf
 8004322:	f7fe fba1 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004326:	2000      	movs	r0, #0
 8004328:	f7fe fbc2 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 800432c:	20c1      	movs	r0, #193	; 0xc1
 800432e:	f7fe fbbf 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 8004332:	2030      	movs	r0, #48	; 0x30
 8004334:	f7fe fbbc 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8004338:	20ed      	movs	r0, #237	; 0xed
 800433a:	f7fe fb95 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 800433e:	2064      	movs	r0, #100	; 0x64
 8004340:	f7fe fbb6 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8004344:	2003      	movs	r0, #3
 8004346:	f7fe fbb3 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 800434a:	2012      	movs	r0, #18
 800434c:	f7fe fbb0 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8004350:	2081      	movs	r0, #129	; 0x81
 8004352:	f7fe fbad 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 8004356:	20e8      	movs	r0, #232	; 0xe8
 8004358:	f7fe fb86 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 800435c:	2085      	movs	r0, #133	; 0x85
 800435e:	f7fe fba7 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8004362:	2010      	movs	r0, #16
 8004364:	f7fe fba4 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8004368:	207a      	movs	r0, #122	; 0x7a
 800436a:	f7fe fba1 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 800436e:	20cb      	movs	r0, #203	; 0xcb
 8004370:	f7fe fb7a 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8004374:	2039      	movs	r0, #57	; 0x39
 8004376:	f7fe fb9b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 800437a:	202c      	movs	r0, #44	; 0x2c
 800437c:	f7fe fb98 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004380:	2000      	movs	r0, #0
 8004382:	f7fe fb95 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8004386:	2034      	movs	r0, #52	; 0x34
 8004388:	f7fe fb92 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800438c:	2002      	movs	r0, #2
 800438e:	f7fe fb8f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8004392:	20f7      	movs	r0, #247	; 0xf7
 8004394:	f7fe fb68 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8004398:	2020      	movs	r0, #32
 800439a:	f7fe fb89 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 800439e:	20ea      	movs	r0, #234	; 0xea
 80043a0:	f7fe fb62 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80043a4:	2000      	movs	r0, #0
 80043a6:	f7fe fb83 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043aa:	2000      	movs	r0, #0
 80043ac:	f7fe fb80 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 80043b0:	20c0      	movs	r0, #192	; 0xc0
 80043b2:	f7fe fb59 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 80043b6:	201b      	movs	r0, #27
 80043b8:	f7fe fb7a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 80043bc:	20c1      	movs	r0, #193	; 0xc1
 80043be:	f7fe fb53 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 80043c2:	2001      	movs	r0, #1
 80043c4:	f7fe fb74 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 80043c8:	20c5      	movs	r0, #197	; 0xc5
 80043ca:	f7fe fb4d 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 80043ce:	2030      	movs	r0, #48	; 0x30
 80043d0:	f7fe fb6e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 80043d4:	2030      	movs	r0, #48	; 0x30
 80043d6:	f7fe fb6b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 80043da:	20c7      	movs	r0, #199	; 0xc7
 80043dc:	f7fe fb44 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 80043e0:	20b7      	movs	r0, #183	; 0xb7
 80043e2:	f7fe fb65 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 80043e6:	2036      	movs	r0, #54	; 0x36
 80043e8:	f7fe fb3e 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 80043ec:	2048      	movs	r0, #72	; 0x48
 80043ee:	f7fe fb5f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 80043f2:	203a      	movs	r0, #58	; 0x3a
 80043f4:	f7fe fb38 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 80043f8:	2055      	movs	r0, #85	; 0x55
 80043fa:	f7fe fb59 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 80043fe:	20b1      	movs	r0, #177	; 0xb1
 8004400:	f7fe fb32 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004404:	2000      	movs	r0, #0
 8004406:	f7fe fb53 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 800440a:	201a      	movs	r0, #26
 800440c:	f7fe fb50 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8004410:	20b6      	movs	r0, #182	; 0xb6
 8004412:	f7fe fb29 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8004416:	200a      	movs	r0, #10
 8004418:	f7fe fb4a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800441c:	20a2      	movs	r0, #162	; 0xa2
 800441e:	f7fe fb47 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8004422:	20f2      	movs	r0, #242	; 0xf2
 8004424:	f7fe fb20 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004428:	2000      	movs	r0, #0
 800442a:	f7fe fb41 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 800442e:	2026      	movs	r0, #38	; 0x26
 8004430:	f7fe fb1a 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8004434:	2001      	movs	r0, #1
 8004436:	f7fe fb3b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 800443a:	20e0      	movs	r0, #224	; 0xe0
 800443c:	f7fe fb14 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8004440:	200f      	movs	r0, #15
 8004442:	f7fe fb35 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8004446:	202a      	movs	r0, #42	; 0x2a
 8004448:	f7fe fb32 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 800444c:	2028      	movs	r0, #40	; 0x28
 800444e:	f7fe fb2f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8004452:	2008      	movs	r0, #8
 8004454:	f7fe fb2c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8004458:	200e      	movs	r0, #14
 800445a:	f7fe fb29 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 800445e:	2008      	movs	r0, #8
 8004460:	f7fe fb26 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8004464:	2054      	movs	r0, #84	; 0x54
 8004466:	f7fe fb23 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 800446a:	20a9      	movs	r0, #169	; 0xa9
 800446c:	f7fe fb20 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8004470:	2043      	movs	r0, #67	; 0x43
 8004472:	f7fe fb1d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8004476:	200a      	movs	r0, #10
 8004478:	f7fe fb1a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800447c:	200f      	movs	r0, #15
 800447e:	f7fe fb17 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004482:	2000      	movs	r0, #0
 8004484:	f7fe fb14 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004488:	2000      	movs	r0, #0
 800448a:	f7fe fb11 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800448e:	2000      	movs	r0, #0
 8004490:	f7fe fb0e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004494:	2000      	movs	r0, #0
 8004496:	f7fe fb0b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 800449a:	20e1      	movs	r0, #225	; 0xe1
 800449c:	f7fe fae4 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80044a0:	2000      	movs	r0, #0
 80044a2:	f7fe fb05 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 80044a6:	2015      	movs	r0, #21
 80044a8:	f7fe fb02 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80044ac:	2017      	movs	r0, #23
 80044ae:	f7fe faff 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 80044b2:	2007      	movs	r0, #7
 80044b4:	f7fe fafc 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80044b8:	2011      	movs	r0, #17
 80044ba:	f7fe faf9 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 80044be:	2006      	movs	r0, #6
 80044c0:	f7fe faf6 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 80044c4:	202b      	movs	r0, #43	; 0x2b
 80044c6:	f7fe faf3 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80044ca:	2056      	movs	r0, #86	; 0x56
 80044cc:	f7fe faf0 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80044d0:	203c      	movs	r0, #60	; 0x3c
 80044d2:	f7fe faed 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80044d6:	2005      	movs	r0, #5
 80044d8:	f7fe faea 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80044dc:	2010      	movs	r0, #16
 80044de:	f7fe fae7 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80044e2:	200f      	movs	r0, #15
 80044e4:	f7fe fae4 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80044e8:	203f      	movs	r0, #63	; 0x3f
 80044ea:	f7fe fae1 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80044ee:	203f      	movs	r0, #63	; 0x3f
 80044f0:	f7fe fade 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80044f4:	200f      	movs	r0, #15
 80044f6:	f7fe fadb 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 80044fa:	202b      	movs	r0, #43	; 0x2b
 80044fc:	f7fe fab4 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004500:	2000      	movs	r0, #0
 8004502:	f7fe fad5 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004506:	2000      	movs	r0, #0
 8004508:	f7fe fad2 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800450c:	2001      	movs	r0, #1
 800450e:	f7fe facf 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8004512:	203f      	movs	r0, #63	; 0x3f
 8004514:	f7fe facc 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8004518:	202a      	movs	r0, #42	; 0x2a
 800451a:	f7fe faa5 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800451e:	2000      	movs	r0, #0
 8004520:	f7fe fac6 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004524:	2000      	movs	r0, #0
 8004526:	f7fe fac3 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800452a:	2000      	movs	r0, #0
 800452c:	f7fe fac0 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8004530:	20ef      	movs	r0, #239	; 0xef
 8004532:	f7fe fabd 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 8004536:	2011      	movs	r0, #17
 8004538:	f7fe fa96 	bl	8002a68 <LCD_WR_REG>
		HAL_Delay(120);
 800453c:	2078      	movs	r0, #120	; 0x78
 800453e:	f7fc fac3 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 8004542:	2029      	movs	r0, #41	; 0x29
 8004544:	f7fe fa90 	bl	8002a68 <LCD_WR_REG>
 8004548:	f003 bcd8 	b.w	8007efc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 800454c:	4b58      	ldr	r3, [pc, #352]	; (80046b0 <LCD_Init+0x5e8>)
 800454e:	889b      	ldrh	r3, [r3, #4]
 8004550:	f646 0204 	movw	r2, #26628	; 0x6804
 8004554:	4293      	cmp	r3, r2
 8004556:	f040 80ad 	bne.w	80046b4 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 800455a:	2011      	movs	r0, #17
 800455c:	f7fe fa84 	bl	8002a68 <LCD_WR_REG>
		HAL_Delay(20);
 8004560:	2014      	movs	r0, #20
 8004562:	f7fc fab1 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8004566:	20d0      	movs	r0, #208	; 0xd0
 8004568:	f7fe fa7e 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 800456c:	2007      	movs	r0, #7
 800456e:	f7fe fa9f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8004572:	2042      	movs	r0, #66	; 0x42
 8004574:	f7fe fa9c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8004578:	201d      	movs	r0, #29
 800457a:	f7fe fa99 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 800457e:	20d1      	movs	r0, #209	; 0xd1
 8004580:	f7fe fa72 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004584:	2000      	movs	r0, #0
 8004586:	f7fe fa93 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 800458a:	201a      	movs	r0, #26
 800458c:	f7fe fa90 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8004590:	2009      	movs	r0, #9
 8004592:	f7fe fa8d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8004596:	20d2      	movs	r0, #210	; 0xd2
 8004598:	f7fe fa66 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800459c:	2001      	movs	r0, #1
 800459e:	f7fe fa87 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 80045a2:	2022      	movs	r0, #34	; 0x22
 80045a4:	f7fe fa84 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 80045a8:	20c0      	movs	r0, #192	; 0xc0
 80045aa:	f7fe fa5d 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 80045ae:	2010      	movs	r0, #16
 80045b0:	f7fe fa7e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 80045b4:	203b      	movs	r0, #59	; 0x3b
 80045b6:	f7fe fa7b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80045ba:	2000      	movs	r0, #0
 80045bc:	f7fe fa78 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80045c0:	2002      	movs	r0, #2
 80045c2:	f7fe fa75 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 80045c6:	2011      	movs	r0, #17
 80045c8:	f7fe fa72 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 80045cc:	20c5      	movs	r0, #197	; 0xc5
 80045ce:	f7fe fa4b 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 80045d2:	2003      	movs	r0, #3
 80045d4:	f7fe fa6c 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 80045d8:	20c8      	movs	r0, #200	; 0xc8
 80045da:	f7fe fa45 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80045de:	2000      	movs	r0, #0
 80045e0:	f7fe fa66 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80045e4:	2025      	movs	r0, #37	; 0x25
 80045e6:	f7fe fa63 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 80045ea:	2021      	movs	r0, #33	; 0x21
 80045ec:	f7fe fa60 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 80045f0:	2005      	movs	r0, #5
 80045f2:	f7fe fa5d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80045f6:	2000      	movs	r0, #0
 80045f8:	f7fe fa5a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 80045fc:	200a      	movs	r0, #10
 80045fe:	f7fe fa57 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8004602:	2065      	movs	r0, #101	; 0x65
 8004604:	f7fe fa54 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8004608:	2025      	movs	r0, #37	; 0x25
 800460a:	f7fe fa51 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 800460e:	2077      	movs	r0, #119	; 0x77
 8004610:	f7fe fa4e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8004614:	2050      	movs	r0, #80	; 0x50
 8004616:	f7fe fa4b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 800461a:	200f      	movs	r0, #15
 800461c:	f7fe fa48 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004620:	2000      	movs	r0, #0
 8004622:	f7fe fa45 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 8004626:	20f8      	movs	r0, #248	; 0xf8
 8004628:	f7fe fa1e 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800462c:	2001      	movs	r0, #1
 800462e:	f7fe fa3f 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 8004632:	20fe      	movs	r0, #254	; 0xfe
 8004634:	f7fe fa18 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004638:	2000      	movs	r0, #0
 800463a:	f7fe fa39 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 800463e:	2002      	movs	r0, #2
 8004640:	f7fe fa36 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 8004644:	2020      	movs	r0, #32
 8004646:	f7fe fa0f 	bl	8002a68 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 800464a:	2036      	movs	r0, #54	; 0x36
 800464c:	f7fe fa0c 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8004650:	2008      	movs	r0, #8
 8004652:	f7fe fa2d 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8004656:	203a      	movs	r0, #58	; 0x3a
 8004658:	f7fe fa06 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 800465c:	2055      	movs	r0, #85	; 0x55
 800465e:	f7fe fa27 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8004662:	202b      	movs	r0, #43	; 0x2b
 8004664:	f7fe fa00 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004668:	2000      	movs	r0, #0
 800466a:	f7fe fa21 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800466e:	2000      	movs	r0, #0
 8004670:	f7fe fa1e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8004674:	2001      	movs	r0, #1
 8004676:	f7fe fa1b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 800467a:	203f      	movs	r0, #63	; 0x3f
 800467c:	f7fe fa18 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8004680:	202a      	movs	r0, #42	; 0x2a
 8004682:	f7fe f9f1 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004686:	2000      	movs	r0, #0
 8004688:	f7fe fa12 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800468c:	2000      	movs	r0, #0
 800468e:	f7fe fa0f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8004692:	2001      	movs	r0, #1
 8004694:	f7fe fa0c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8004698:	20df      	movs	r0, #223	; 0xdf
 800469a:	f7fe fa09 	bl	8002ab0 <LCD_WR_DATAX>
		HAL_Delay(120);
 800469e:	2078      	movs	r0, #120	; 0x78
 80046a0:	f7fc fa12 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0X29);
 80046a4:	2029      	movs	r0, #41	; 0x29
 80046a6:	f7fe f9df 	bl	8002a68 <LCD_WR_REG>
 80046aa:	f003 bc27 	b.w	8007efc <LCD_Init+0x3e34>
 80046ae:	bf00      	nop
 80046b0:	200007cc 	.word	0x200007cc
	} else if (lcddev.id == 0x5310) {
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <LCD_Init+0x5fc>)
 80046b6:	889b      	ldrh	r3, [r3, #4]
 80046b8:	f245 3210 	movw	r2, #21264	; 0x5310
 80046bc:	4293      	cmp	r3, r2
 80046be:	f040 877c 	bne.w	80055ba <LCD_Init+0x14f2>
 80046c2:	e001      	b.n	80046c8 <LCD_Init+0x600>
 80046c4:	200007cc 	.word	0x200007cc
		LCD_WR_REG(0xED);
 80046c8:	20ed      	movs	r0, #237	; 0xed
 80046ca:	f7fe f9cd 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80046ce:	2001      	movs	r0, #1
 80046d0:	f7fe f9ee 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 80046d4:	20fe      	movs	r0, #254	; 0xfe
 80046d6:	f7fe f9eb 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 80046da:	20ee      	movs	r0, #238	; 0xee
 80046dc:	f7fe f9c4 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 80046e0:	20de      	movs	r0, #222	; 0xde
 80046e2:	f7fe f9e5 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80046e6:	2021      	movs	r0, #33	; 0x21
 80046e8:	f7fe f9e2 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 80046ec:	20f1      	movs	r0, #241	; 0xf1
 80046ee:	f7fe f9bb 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80046f2:	2001      	movs	r0, #1
 80046f4:	f7fe f9dc 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 80046f8:	20df      	movs	r0, #223	; 0xdf
 80046fa:	f7fe f9b5 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 80046fe:	2010      	movs	r0, #16
 8004700:	f7fe f9d6 	bl	8002ab0 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8004704:	20c4      	movs	r0, #196	; 0xc4
 8004706:	f7fe f9af 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 800470a:	208f      	movs	r0, #143	; 0x8f
 800470c:	f7fe f9d0 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8004710:	20c6      	movs	r0, #198	; 0xc6
 8004712:	f7fe f9a9 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004716:	2000      	movs	r0, #0
 8004718:	f7fe f9ca 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800471c:	20e2      	movs	r0, #226	; 0xe2
 800471e:	f7fe f9c7 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8004722:	20e2      	movs	r0, #226	; 0xe2
 8004724:	f7fe f9c4 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8004728:	20e2      	movs	r0, #226	; 0xe2
 800472a:	f7fe f9c1 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 800472e:	20bf      	movs	r0, #191	; 0xbf
 8004730:	f7fe f99a 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8004734:	20aa      	movs	r0, #170	; 0xaa
 8004736:	f7fe f9bb 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 800473a:	20b0      	movs	r0, #176	; 0xb0
 800473c:	f7fe f994 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8004740:	200d      	movs	r0, #13
 8004742:	f7fe f9b5 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004746:	2000      	movs	r0, #0
 8004748:	f7fe f9b2 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 800474c:	200d      	movs	r0, #13
 800474e:	f7fe f9af 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004752:	2000      	movs	r0, #0
 8004754:	f7fe f9ac 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8004758:	2011      	movs	r0, #17
 800475a:	f7fe f9a9 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800475e:	2000      	movs	r0, #0
 8004760:	f7fe f9a6 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8004764:	2019      	movs	r0, #25
 8004766:	f7fe f9a3 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800476a:	2000      	movs	r0, #0
 800476c:	f7fe f9a0 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8004770:	2021      	movs	r0, #33	; 0x21
 8004772:	f7fe f99d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004776:	2000      	movs	r0, #0
 8004778:	f7fe f99a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 800477c:	202d      	movs	r0, #45	; 0x2d
 800477e:	f7fe f997 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004782:	2000      	movs	r0, #0
 8004784:	f7fe f994 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8004788:	203d      	movs	r0, #61	; 0x3d
 800478a:	f7fe f991 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800478e:	2000      	movs	r0, #0
 8004790:	f7fe f98e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8004794:	205d      	movs	r0, #93	; 0x5d
 8004796:	f7fe f98b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800479a:	2000      	movs	r0, #0
 800479c:	f7fe f988 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80047a0:	205d      	movs	r0, #93	; 0x5d
 80047a2:	f7fe f985 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047a6:	2000      	movs	r0, #0
 80047a8:	f7fe f982 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 80047ac:	20b1      	movs	r0, #177	; 0xb1
 80047ae:	f7fe f95b 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 80047b2:	2080      	movs	r0, #128	; 0x80
 80047b4:	f7fe f97c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047b8:	2000      	movs	r0, #0
 80047ba:	f7fe f979 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80047be:	208b      	movs	r0, #139	; 0x8b
 80047c0:	f7fe f976 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047c4:	2000      	movs	r0, #0
 80047c6:	f7fe f973 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80047ca:	2096      	movs	r0, #150	; 0x96
 80047cc:	f7fe f970 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047d0:	2000      	movs	r0, #0
 80047d2:	f7fe f96d 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 80047d6:	20b2      	movs	r0, #178	; 0xb2
 80047d8:	f7fe f946 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80047dc:	2000      	movs	r0, #0
 80047de:	f7fe f967 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047e2:	2000      	movs	r0, #0
 80047e4:	f7fe f964 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80047e8:	2002      	movs	r0, #2
 80047ea:	f7fe f961 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047ee:	2000      	movs	r0, #0
 80047f0:	f7fe f95e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80047f4:	2003      	movs	r0, #3
 80047f6:	f7fe f95b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047fa:	2000      	movs	r0, #0
 80047fc:	f7fe f958 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8004800:	20b3      	movs	r0, #179	; 0xb3
 8004802:	f7fe f931 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004806:	2000      	movs	r0, #0
 8004808:	f7fe f952 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800480c:	2000      	movs	r0, #0
 800480e:	f7fe f94f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004812:	2000      	movs	r0, #0
 8004814:	f7fe f94c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004818:	2000      	movs	r0, #0
 800481a:	f7fe f949 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800481e:	2000      	movs	r0, #0
 8004820:	f7fe f946 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004824:	2000      	movs	r0, #0
 8004826:	f7fe f943 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800482a:	2000      	movs	r0, #0
 800482c:	f7fe f940 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004830:	2000      	movs	r0, #0
 8004832:	f7fe f93d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004836:	2000      	movs	r0, #0
 8004838:	f7fe f93a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800483c:	2000      	movs	r0, #0
 800483e:	f7fe f937 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004842:	2000      	movs	r0, #0
 8004844:	f7fe f934 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004848:	2000      	movs	r0, #0
 800484a:	f7fe f931 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800484e:	2000      	movs	r0, #0
 8004850:	f7fe f92e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004854:	2000      	movs	r0, #0
 8004856:	f7fe f92b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800485a:	2000      	movs	r0, #0
 800485c:	f7fe f928 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004860:	2000      	movs	r0, #0
 8004862:	f7fe f925 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004866:	2000      	movs	r0, #0
 8004868:	f7fe f922 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800486c:	2000      	movs	r0, #0
 800486e:	f7fe f91f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004872:	2000      	movs	r0, #0
 8004874:	f7fe f91c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004878:	2000      	movs	r0, #0
 800487a:	f7fe f919 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800487e:	2000      	movs	r0, #0
 8004880:	f7fe f916 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004884:	2000      	movs	r0, #0
 8004886:	f7fe f913 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800488a:	2000      	movs	r0, #0
 800488c:	f7fe f910 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004890:	2000      	movs	r0, #0
 8004892:	f7fe f90d 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8004896:	20b4      	movs	r0, #180	; 0xb4
 8004898:	f7fe f8e6 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 800489c:	208b      	movs	r0, #139	; 0x8b
 800489e:	f7fe f907 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048a2:	2000      	movs	r0, #0
 80048a4:	f7fe f904 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80048a8:	2096      	movs	r0, #150	; 0x96
 80048aa:	f7fe f901 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048ae:	2000      	movs	r0, #0
 80048b0:	f7fe f8fe 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 80048b4:	20a1      	movs	r0, #161	; 0xa1
 80048b6:	f7fe f8fb 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048ba:	2000      	movs	r0, #0
 80048bc:	f7fe f8f8 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 80048c0:	20b5      	movs	r0, #181	; 0xb5
 80048c2:	f7fe f8d1 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 80048c6:	2002      	movs	r0, #2
 80048c8:	f7fe f8f2 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048cc:	2000      	movs	r0, #0
 80048ce:	f7fe f8ef 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80048d2:	2003      	movs	r0, #3
 80048d4:	f7fe f8ec 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048d8:	2000      	movs	r0, #0
 80048da:	f7fe f8e9 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80048de:	2004      	movs	r0, #4
 80048e0:	f7fe f8e6 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048e4:	2000      	movs	r0, #0
 80048e6:	f7fe f8e3 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 80048ea:	20b6      	movs	r0, #182	; 0xb6
 80048ec:	f7fe f8bc 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80048f0:	2000      	movs	r0, #0
 80048f2:	f7fe f8dd 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048f6:	2000      	movs	r0, #0
 80048f8:	f7fe f8da 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 80048fc:	20b7      	movs	r0, #183	; 0xb7
 80048fe:	f7fe f8b3 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004902:	2000      	movs	r0, #0
 8004904:	f7fe f8d4 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004908:	2000      	movs	r0, #0
 800490a:	f7fe f8d1 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800490e:	203f      	movs	r0, #63	; 0x3f
 8004910:	f7fe f8ce 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004914:	2000      	movs	r0, #0
 8004916:	f7fe f8cb 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 800491a:	205e      	movs	r0, #94	; 0x5e
 800491c:	f7fe f8c8 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004920:	2000      	movs	r0, #0
 8004922:	f7fe f8c5 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8004926:	2064      	movs	r0, #100	; 0x64
 8004928:	f7fe f8c2 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800492c:	2000      	movs	r0, #0
 800492e:	f7fe f8bf 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8004932:	208c      	movs	r0, #140	; 0x8c
 8004934:	f7fe f8bc 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004938:	2000      	movs	r0, #0
 800493a:	f7fe f8b9 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 800493e:	20ac      	movs	r0, #172	; 0xac
 8004940:	f7fe f8b6 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004944:	2000      	movs	r0, #0
 8004946:	f7fe f8b3 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800494a:	20dc      	movs	r0, #220	; 0xdc
 800494c:	f7fe f8b0 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004950:	2000      	movs	r0, #0
 8004952:	f7fe f8ad 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8004956:	2070      	movs	r0, #112	; 0x70
 8004958:	f7fe f8aa 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800495c:	2000      	movs	r0, #0
 800495e:	f7fe f8a7 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8004962:	2090      	movs	r0, #144	; 0x90
 8004964:	f7fe f8a4 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004968:	2000      	movs	r0, #0
 800496a:	f7fe f8a1 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 800496e:	20eb      	movs	r0, #235	; 0xeb
 8004970:	f7fe f89e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004974:	2000      	movs	r0, #0
 8004976:	f7fe f89b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800497a:	20dc      	movs	r0, #220	; 0xdc
 800497c:	f7fe f898 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004980:	2000      	movs	r0, #0
 8004982:	f7fe f895 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8004986:	20b8      	movs	r0, #184	; 0xb8
 8004988:	f7fe f86e 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800498c:	2000      	movs	r0, #0
 800498e:	f7fe f88f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004992:	2000      	movs	r0, #0
 8004994:	f7fe f88c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004998:	2000      	movs	r0, #0
 800499a:	f7fe f889 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800499e:	2000      	movs	r0, #0
 80049a0:	f7fe f886 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049a4:	2000      	movs	r0, #0
 80049a6:	f7fe f883 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049aa:	2000      	movs	r0, #0
 80049ac:	f7fe f880 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049b0:	2000      	movs	r0, #0
 80049b2:	f7fe f87d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049b6:	2000      	movs	r0, #0
 80049b8:	f7fe f87a 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 80049bc:	20ba      	movs	r0, #186	; 0xba
 80049be:	f7fe f853 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 80049c2:	2024      	movs	r0, #36	; 0x24
 80049c4:	f7fe f874 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049c8:	2000      	movs	r0, #0
 80049ca:	f7fe f871 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049ce:	2000      	movs	r0, #0
 80049d0:	f7fe f86e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049d4:	2000      	movs	r0, #0
 80049d6:	f7fe f86b 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 80049da:	20c1      	movs	r0, #193	; 0xc1
 80049dc:	f7fe f844 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80049e0:	2020      	movs	r0, #32
 80049e2:	f7fe f865 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049e6:	2000      	movs	r0, #0
 80049e8:	f7fe f862 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80049ec:	2054      	movs	r0, #84	; 0x54
 80049ee:	f7fe f85f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049f2:	2000      	movs	r0, #0
 80049f4:	f7fe f85c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 80049f8:	20ff      	movs	r0, #255	; 0xff
 80049fa:	f7fe f859 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049fe:	2000      	movs	r0, #0
 8004a00:	f7fe f856 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8004a04:	20c2      	movs	r0, #194	; 0xc2
 8004a06:	f7fe f82f 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8004a0a:	200a      	movs	r0, #10
 8004a0c:	f7fe f850 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a10:	2000      	movs	r0, #0
 8004a12:	f7fe f84d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8004a16:	2004      	movs	r0, #4
 8004a18:	f7fe f84a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	f7fe f847 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8004a22:	20c3      	movs	r0, #195	; 0xc3
 8004a24:	f7fe f820 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8004a28:	203c      	movs	r0, #60	; 0x3c
 8004a2a:	f7fe f841 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a2e:	2000      	movs	r0, #0
 8004a30:	f7fe f83e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8004a34:	203a      	movs	r0, #58	; 0x3a
 8004a36:	f7fe f83b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	f7fe f838 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8004a40:	2039      	movs	r0, #57	; 0x39
 8004a42:	f7fe f835 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a46:	2000      	movs	r0, #0
 8004a48:	f7fe f832 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8004a4c:	2037      	movs	r0, #55	; 0x37
 8004a4e:	f7fe f82f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a52:	2000      	movs	r0, #0
 8004a54:	f7fe f82c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004a58:	203c      	movs	r0, #60	; 0x3c
 8004a5a:	f7fe f829 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a5e:	2000      	movs	r0, #0
 8004a60:	f7fe f826 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8004a64:	2036      	movs	r0, #54	; 0x36
 8004a66:	f7fe f823 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f7fe f820 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8004a70:	2032      	movs	r0, #50	; 0x32
 8004a72:	f7fe f81d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a76:	2000      	movs	r0, #0
 8004a78:	f7fe f81a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8004a7c:	202f      	movs	r0, #47	; 0x2f
 8004a7e:	f7fe f817 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a82:	2000      	movs	r0, #0
 8004a84:	f7fe f814 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8004a88:	202c      	movs	r0, #44	; 0x2c
 8004a8a:	f7fe f811 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a8e:	2000      	movs	r0, #0
 8004a90:	f7fe f80e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8004a94:	2029      	movs	r0, #41	; 0x29
 8004a96:	f7fe f80b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	f7fe f808 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8004aa0:	2026      	movs	r0, #38	; 0x26
 8004aa2:	f7fe f805 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	f7fe f802 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004aac:	2024      	movs	r0, #36	; 0x24
 8004aae:	f7fd ffff 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	f7fd fffc 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004ab8:	2024      	movs	r0, #36	; 0x24
 8004aba:	f7fd fff9 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004abe:	2000      	movs	r0, #0
 8004ac0:	f7fd fff6 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8004ac4:	2023      	movs	r0, #35	; 0x23
 8004ac6:	f7fd fff3 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004aca:	2000      	movs	r0, #0
 8004acc:	f7fd fff0 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004ad0:	203c      	movs	r0, #60	; 0x3c
 8004ad2:	f7fd ffed 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	f7fd ffea 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8004adc:	2036      	movs	r0, #54	; 0x36
 8004ade:	f7fd ffe7 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	f7fd ffe4 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8004ae8:	2032      	movs	r0, #50	; 0x32
 8004aea:	f7fd ffe1 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004aee:	2000      	movs	r0, #0
 8004af0:	f7fd ffde 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8004af4:	202f      	movs	r0, #47	; 0x2f
 8004af6:	f7fd ffdb 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004afa:	2000      	movs	r0, #0
 8004afc:	f7fd ffd8 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8004b00:	202c      	movs	r0, #44	; 0x2c
 8004b02:	f7fd ffd5 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b06:	2000      	movs	r0, #0
 8004b08:	f7fd ffd2 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8004b0c:	2029      	movs	r0, #41	; 0x29
 8004b0e:	f7fd ffcf 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b12:	2000      	movs	r0, #0
 8004b14:	f7fd ffcc 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8004b18:	2026      	movs	r0, #38	; 0x26
 8004b1a:	f7fd ffc9 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b1e:	2000      	movs	r0, #0
 8004b20:	f7fd ffc6 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004b24:	2024      	movs	r0, #36	; 0x24
 8004b26:	f7fd ffc3 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	f7fd ffc0 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004b30:	2024      	movs	r0, #36	; 0x24
 8004b32:	f7fd ffbd 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b36:	2000      	movs	r0, #0
 8004b38:	f7fd ffba 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8004b3c:	2023      	movs	r0, #35	; 0x23
 8004b3e:	f7fd ffb7 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b42:	2000      	movs	r0, #0
 8004b44:	f7fd ffb4 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8004b48:	20c4      	movs	r0, #196	; 0xc4
 8004b4a:	f7fd ff8d 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8004b4e:	2062      	movs	r0, #98	; 0x62
 8004b50:	f7fd ffae 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b54:	2000      	movs	r0, #0
 8004b56:	f7fd ffab 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8004b5a:	2005      	movs	r0, #5
 8004b5c:	f7fd ffa8 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b60:	2000      	movs	r0, #0
 8004b62:	f7fd ffa5 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8004b66:	2084      	movs	r0, #132	; 0x84
 8004b68:	f7fd ffa2 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	f7fd ff9f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8004b72:	20f0      	movs	r0, #240	; 0xf0
 8004b74:	f7fd ff9c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b78:	2000      	movs	r0, #0
 8004b7a:	f7fd ff99 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8004b7e:	2018      	movs	r0, #24
 8004b80:	f7fd ff96 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b84:	2000      	movs	r0, #0
 8004b86:	f7fd ff93 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8004b8a:	20a4      	movs	r0, #164	; 0xa4
 8004b8c:	f7fd ff90 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b90:	2000      	movs	r0, #0
 8004b92:	f7fd ff8d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8004b96:	2018      	movs	r0, #24
 8004b98:	f7fd ff8a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	f7fd ff87 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8004ba2:	2050      	movs	r0, #80	; 0x50
 8004ba4:	f7fd ff84 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ba8:	2000      	movs	r0, #0
 8004baa:	f7fd ff81 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8004bae:	200c      	movs	r0, #12
 8004bb0:	f7fd ff7e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	f7fd ff7b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8004bba:	2017      	movs	r0, #23
 8004bbc:	f7fd ff78 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	f7fd ff75 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8004bc6:	2095      	movs	r0, #149	; 0x95
 8004bc8:	f7fd ff72 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bcc:	2000      	movs	r0, #0
 8004bce:	f7fd ff6f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004bd2:	20f3      	movs	r0, #243	; 0xf3
 8004bd4:	f7fd ff6c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bd8:	2000      	movs	r0, #0
 8004bda:	f7fd ff69 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8004bde:	20e6      	movs	r0, #230	; 0xe6
 8004be0:	f7fd ff66 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004be4:	2000      	movs	r0, #0
 8004be6:	f7fd ff63 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8004bea:	20c5      	movs	r0, #197	; 0xc5
 8004bec:	f7fd ff3c 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8004bf0:	2032      	movs	r0, #50	; 0x32
 8004bf2:	f7fd ff5d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	f7fd ff5a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8004bfc:	2044      	movs	r0, #68	; 0x44
 8004bfe:	f7fd ff57 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c02:	2000      	movs	r0, #0
 8004c04:	f7fd ff54 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8004c08:	2065      	movs	r0, #101	; 0x65
 8004c0a:	f7fd ff51 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c0e:	2000      	movs	r0, #0
 8004c10:	f7fd ff4e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8004c14:	2076      	movs	r0, #118	; 0x76
 8004c16:	f7fd ff4b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	f7fd ff48 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004c20:	2088      	movs	r0, #136	; 0x88
 8004c22:	f7fd ff45 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c26:	2000      	movs	r0, #0
 8004c28:	f7fd ff42 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8004c2c:	20c6      	movs	r0, #198	; 0xc6
 8004c2e:	f7fd ff1b 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8004c32:	2020      	movs	r0, #32
 8004c34:	f7fd ff3c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c38:	2000      	movs	r0, #0
 8004c3a:	f7fd ff39 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8004c3e:	2017      	movs	r0, #23
 8004c40:	f7fd ff36 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c44:	2000      	movs	r0, #0
 8004c46:	f7fd ff33 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8004c4a:	2001      	movs	r0, #1
 8004c4c:	f7fd ff30 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c50:	2000      	movs	r0, #0
 8004c52:	f7fd ff2d 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8004c56:	20c7      	movs	r0, #199	; 0xc7
 8004c58:	f7fd ff06 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	f7fd ff27 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c62:	2000      	movs	r0, #0
 8004c64:	f7fd ff24 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c68:	2000      	movs	r0, #0
 8004c6a:	f7fd ff21 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c6e:	2000      	movs	r0, #0
 8004c70:	f7fd ff1e 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8004c74:	20c8      	movs	r0, #200	; 0xc8
 8004c76:	f7fd fef7 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	f7fd ff18 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c80:	2000      	movs	r0, #0
 8004c82:	f7fd ff15 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c86:	2000      	movs	r0, #0
 8004c88:	f7fd ff12 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	f7fd ff0f 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8004c92:	20c9      	movs	r0, #201	; 0xc9
 8004c94:	f7fd fee8 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004c98:	2000      	movs	r0, #0
 8004c9a:	f7fd ff09 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f7fd ff06 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	f7fd ff03 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004caa:	2000      	movs	r0, #0
 8004cac:	f7fd ff00 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	f7fd fefd 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	f7fd fefa 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	f7fd fef7 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f7fd fef4 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cc8:	2000      	movs	r0, #0
 8004cca:	f7fd fef1 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cce:	2000      	movs	r0, #0
 8004cd0:	f7fd feee 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	f7fd feeb 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cda:	2000      	movs	r0, #0
 8004cdc:	f7fd fee8 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	f7fd fee5 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	f7fd fee2 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cec:	2000      	movs	r0, #0
 8004cee:	f7fd fedf 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	f7fd fedc 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8004cf8:	20e0      	movs	r0, #224	; 0xe0
 8004cfa:	f7fd feb5 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8004cfe:	2016      	movs	r0, #22
 8004d00:	f7fd fed6 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d04:	2000      	movs	r0, #0
 8004d06:	f7fd fed3 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8004d0a:	201c      	movs	r0, #28
 8004d0c:	f7fd fed0 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d10:	2000      	movs	r0, #0
 8004d12:	f7fd fecd 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8004d16:	2021      	movs	r0, #33	; 0x21
 8004d18:	f7fd feca 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	f7fd fec7 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8004d22:	2036      	movs	r0, #54	; 0x36
 8004d24:	f7fd fec4 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d28:	2000      	movs	r0, #0
 8004d2a:	f7fd fec1 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8004d2e:	2046      	movs	r0, #70	; 0x46
 8004d30:	f7fd febe 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d34:	2000      	movs	r0, #0
 8004d36:	f7fd febb 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8004d3a:	2052      	movs	r0, #82	; 0x52
 8004d3c:	f7fd feb8 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d40:	2000      	movs	r0, #0
 8004d42:	f7fd feb5 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8004d46:	2064      	movs	r0, #100	; 0x64
 8004d48:	f7fd feb2 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	f7fd feaf 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8004d52:	207a      	movs	r0, #122	; 0x7a
 8004d54:	f7fd feac 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d58:	2000      	movs	r0, #0
 8004d5a:	f7fd fea9 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8004d5e:	208b      	movs	r0, #139	; 0x8b
 8004d60:	f7fd fea6 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d64:	2000      	movs	r0, #0
 8004d66:	f7fd fea3 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004d6a:	2099      	movs	r0, #153	; 0x99
 8004d6c:	f7fd fea0 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d70:	2000      	movs	r0, #0
 8004d72:	f7fd fe9d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8004d76:	20a8      	movs	r0, #168	; 0xa8
 8004d78:	f7fd fe9a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	f7fd fe97 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8004d82:	20b9      	movs	r0, #185	; 0xb9
 8004d84:	f7fd fe94 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d88:	2000      	movs	r0, #0
 8004d8a:	f7fd fe91 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8004d8e:	20c4      	movs	r0, #196	; 0xc4
 8004d90:	f7fd fe8e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d94:	2000      	movs	r0, #0
 8004d96:	f7fd fe8b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8004d9a:	20ca      	movs	r0, #202	; 0xca
 8004d9c:	f7fd fe88 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004da0:	2000      	movs	r0, #0
 8004da2:	f7fd fe85 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8004da6:	20d2      	movs	r0, #210	; 0xd2
 8004da8:	f7fd fe82 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dac:	2000      	movs	r0, #0
 8004dae:	f7fd fe7f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8004db2:	20d9      	movs	r0, #217	; 0xd9
 8004db4:	f7fd fe7c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004db8:	2000      	movs	r0, #0
 8004dba:	f7fd fe79 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8004dbe:	20e0      	movs	r0, #224	; 0xe0
 8004dc0:	f7fd fe76 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	f7fd fe73 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004dca:	20f3      	movs	r0, #243	; 0xf3
 8004dcc:	f7fd fe70 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	f7fd fe6d 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8004dd6:	20e1      	movs	r0, #225	; 0xe1
 8004dd8:	f7fd fe46 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8004ddc:	2016      	movs	r0, #22
 8004dde:	f7fd fe67 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004de2:	2000      	movs	r0, #0
 8004de4:	f7fd fe64 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8004de8:	201c      	movs	r0, #28
 8004dea:	f7fd fe61 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dee:	2000      	movs	r0, #0
 8004df0:	f7fd fe5e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8004df4:	2022      	movs	r0, #34	; 0x22
 8004df6:	f7fd fe5b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	f7fd fe58 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8004e00:	2036      	movs	r0, #54	; 0x36
 8004e02:	f7fd fe55 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e06:	2000      	movs	r0, #0
 8004e08:	f7fd fe52 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8004e0c:	2045      	movs	r0, #69	; 0x45
 8004e0e:	f7fd fe4f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e12:	2000      	movs	r0, #0
 8004e14:	f7fd fe4c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8004e18:	2052      	movs	r0, #82	; 0x52
 8004e1a:	f7fd fe49 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e1e:	2000      	movs	r0, #0
 8004e20:	f7fd fe46 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8004e24:	2064      	movs	r0, #100	; 0x64
 8004e26:	f7fd fe43 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	f7fd fe40 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8004e30:	207a      	movs	r0, #122	; 0x7a
 8004e32:	f7fd fe3d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e36:	2000      	movs	r0, #0
 8004e38:	f7fd fe3a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8004e3c:	208b      	movs	r0, #139	; 0x8b
 8004e3e:	f7fd fe37 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e42:	2000      	movs	r0, #0
 8004e44:	f7fd fe34 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004e48:	2099      	movs	r0, #153	; 0x99
 8004e4a:	f7fd fe31 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e4e:	2000      	movs	r0, #0
 8004e50:	f7fd fe2e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8004e54:	20a8      	movs	r0, #168	; 0xa8
 8004e56:	f7fd fe2b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	f7fd fe28 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8004e60:	20b9      	movs	r0, #185	; 0xb9
 8004e62:	f7fd fe25 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e66:	2000      	movs	r0, #0
 8004e68:	f7fd fe22 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8004e6c:	20c4      	movs	r0, #196	; 0xc4
 8004e6e:	f7fd fe1f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e72:	2000      	movs	r0, #0
 8004e74:	f7fd fe1c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8004e78:	20ca      	movs	r0, #202	; 0xca
 8004e7a:	f7fd fe19 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e7e:	2000      	movs	r0, #0
 8004e80:	f7fd fe16 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8004e84:	20d2      	movs	r0, #210	; 0xd2
 8004e86:	f7fd fe13 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	f7fd fe10 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8004e90:	20d8      	movs	r0, #216	; 0xd8
 8004e92:	f7fd fe0d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e96:	2000      	movs	r0, #0
 8004e98:	f7fd fe0a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8004e9c:	20e0      	movs	r0, #224	; 0xe0
 8004e9e:	f7fd fe07 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	f7fd fe04 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004ea8:	20f3      	movs	r0, #243	; 0xf3
 8004eaa:	f7fd fe01 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eae:	2000      	movs	r0, #0
 8004eb0:	f7fd fdfe 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8004eb4:	20e2      	movs	r0, #226	; 0xe2
 8004eb6:	f7fd fdd7 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8004eba:	2005      	movs	r0, #5
 8004ebc:	f7fd fdf8 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	f7fd fdf5 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8004ec6:	200b      	movs	r0, #11
 8004ec8:	f7fd fdf2 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ecc:	2000      	movs	r0, #0
 8004ece:	f7fd fdef 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8004ed2:	201b      	movs	r0, #27
 8004ed4:	f7fd fdec 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ed8:	2000      	movs	r0, #0
 8004eda:	f7fd fde9 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8004ede:	2034      	movs	r0, #52	; 0x34
 8004ee0:	f7fd fde6 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	f7fd fde3 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8004eea:	2044      	movs	r0, #68	; 0x44
 8004eec:	f7fd fde0 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	f7fd fddd 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8004ef6:	204f      	movs	r0, #79	; 0x4f
 8004ef8:	f7fd fdda 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004efc:	2000      	movs	r0, #0
 8004efe:	f7fd fdd7 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8004f02:	2061      	movs	r0, #97	; 0x61
 8004f04:	f7fd fdd4 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f08:	2000      	movs	r0, #0
 8004f0a:	f7fd fdd1 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8004f0e:	2079      	movs	r0, #121	; 0x79
 8004f10:	f7fd fdce 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f14:	2000      	movs	r0, #0
 8004f16:	f7fd fdcb 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004f1a:	2088      	movs	r0, #136	; 0x88
 8004f1c:	f7fd fdc8 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f20:	2000      	movs	r0, #0
 8004f22:	f7fd fdc5 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8004f26:	2097      	movs	r0, #151	; 0x97
 8004f28:	f7fd fdc2 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	f7fd fdbf 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8004f32:	20a6      	movs	r0, #166	; 0xa6
 8004f34:	f7fd fdbc 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f38:	2000      	movs	r0, #0
 8004f3a:	f7fd fdb9 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8004f3e:	20b7      	movs	r0, #183	; 0xb7
 8004f40:	f7fd fdb6 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f44:	2000      	movs	r0, #0
 8004f46:	f7fd fdb3 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8004f4a:	20c2      	movs	r0, #194	; 0xc2
 8004f4c:	f7fd fdb0 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f50:	2000      	movs	r0, #0
 8004f52:	f7fd fdad 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8004f56:	20c7      	movs	r0, #199	; 0xc7
 8004f58:	f7fd fdaa 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	f7fd fda7 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8004f62:	20d1      	movs	r0, #209	; 0xd1
 8004f64:	f7fd fda4 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f68:	2000      	movs	r0, #0
 8004f6a:	f7fd fda1 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8004f6e:	20d6      	movs	r0, #214	; 0xd6
 8004f70:	f7fd fd9e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f74:	2000      	movs	r0, #0
 8004f76:	f7fd fd9b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8004f7a:	20dd      	movs	r0, #221	; 0xdd
 8004f7c:	f7fd fd98 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f80:	2000      	movs	r0, #0
 8004f82:	f7fd fd95 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004f86:	20f3      	movs	r0, #243	; 0xf3
 8004f88:	f7fd fd92 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	f7fd fd8f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8004f92:	20e3      	movs	r0, #227	; 0xe3
 8004f94:	f7fd fd68 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8004f98:	2005      	movs	r0, #5
 8004f9a:	f7fd fd89 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	f7fd fd86 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8004fa4:	200a      	movs	r0, #10
 8004fa6:	f7fd fd83 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004faa:	2000      	movs	r0, #0
 8004fac:	f7fd fd80 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8004fb0:	201c      	movs	r0, #28
 8004fb2:	f7fd fd7d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	f7fd fd7a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8004fbc:	2033      	movs	r0, #51	; 0x33
 8004fbe:	f7fd fd77 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	f7fd fd74 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8004fc8:	2044      	movs	r0, #68	; 0x44
 8004fca:	f7fd fd71 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fce:	2000      	movs	r0, #0
 8004fd0:	f7fd fd6e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8004fd4:	2050      	movs	r0, #80	; 0x50
 8004fd6:	f7fd fd6b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fda:	2000      	movs	r0, #0
 8004fdc:	f7fd fd68 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8004fe0:	2062      	movs	r0, #98	; 0x62
 8004fe2:	f7fd fd65 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	f7fd fd62 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8004fec:	2078      	movs	r0, #120	; 0x78
 8004fee:	f7fd fd5f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	f7fd fd5c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004ff8:	2088      	movs	r0, #136	; 0x88
 8004ffa:	f7fd fd59 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ffe:	2000      	movs	r0, #0
 8005000:	f7fd fd56 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8005004:	2097      	movs	r0, #151	; 0x97
 8005006:	f7fd fd53 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800500a:	2000      	movs	r0, #0
 800500c:	f7fd fd50 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8005010:	20a6      	movs	r0, #166	; 0xa6
 8005012:	f7fd fd4d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005016:	2000      	movs	r0, #0
 8005018:	f7fd fd4a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 800501c:	20b7      	movs	r0, #183	; 0xb7
 800501e:	f7fd fd47 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005022:	2000      	movs	r0, #0
 8005024:	f7fd fd44 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8005028:	20c2      	movs	r0, #194	; 0xc2
 800502a:	f7fd fd41 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800502e:	2000      	movs	r0, #0
 8005030:	f7fd fd3e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8005034:	20c7      	movs	r0, #199	; 0xc7
 8005036:	f7fd fd3b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800503a:	2000      	movs	r0, #0
 800503c:	f7fd fd38 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8005040:	20d1      	movs	r0, #209	; 0xd1
 8005042:	f7fd fd35 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005046:	2000      	movs	r0, #0
 8005048:	f7fd fd32 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 800504c:	20d5      	movs	r0, #213	; 0xd5
 800504e:	f7fd fd2f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005052:	2000      	movs	r0, #0
 8005054:	f7fd fd2c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8005058:	20dd      	movs	r0, #221	; 0xdd
 800505a:	f7fd fd29 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800505e:	2000      	movs	r0, #0
 8005060:	f7fd fd26 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8005064:	20f3      	movs	r0, #243	; 0xf3
 8005066:	f7fd fd23 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800506a:	2000      	movs	r0, #0
 800506c:	f7fd fd20 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8005070:	20e4      	movs	r0, #228	; 0xe4
 8005072:	f7fd fcf9 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8005076:	2001      	movs	r0, #1
 8005078:	f7fd fd1a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800507c:	2000      	movs	r0, #0
 800507e:	f7fd fd17 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8005082:	2001      	movs	r0, #1
 8005084:	f7fd fd14 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005088:	2000      	movs	r0, #0
 800508a:	f7fd fd11 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800508e:	2002      	movs	r0, #2
 8005090:	f7fd fd0e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005094:	2000      	movs	r0, #0
 8005096:	f7fd fd0b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 800509a:	202a      	movs	r0, #42	; 0x2a
 800509c:	f7fd fd08 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050a0:	2000      	movs	r0, #0
 80050a2:	f7fd fd05 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80050a6:	203c      	movs	r0, #60	; 0x3c
 80050a8:	f7fd fd02 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050ac:	2000      	movs	r0, #0
 80050ae:	f7fd fcff 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 80050b2:	204b      	movs	r0, #75	; 0x4b
 80050b4:	f7fd fcfc 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050b8:	2000      	movs	r0, #0
 80050ba:	f7fd fcf9 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80050be:	205d      	movs	r0, #93	; 0x5d
 80050c0:	f7fd fcf6 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050c4:	2000      	movs	r0, #0
 80050c6:	f7fd fcf3 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 80050ca:	2074      	movs	r0, #116	; 0x74
 80050cc:	f7fd fcf0 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050d0:	2000      	movs	r0, #0
 80050d2:	f7fd fced 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80050d6:	2084      	movs	r0, #132	; 0x84
 80050d8:	f7fd fcea 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050dc:	2000      	movs	r0, #0
 80050de:	f7fd fce7 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 80050e2:	2093      	movs	r0, #147	; 0x93
 80050e4:	f7fd fce4 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050e8:	2000      	movs	r0, #0
 80050ea:	f7fd fce1 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80050ee:	20a2      	movs	r0, #162	; 0xa2
 80050f0:	f7fd fcde 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050f4:	2000      	movs	r0, #0
 80050f6:	f7fd fcdb 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 80050fa:	20b3      	movs	r0, #179	; 0xb3
 80050fc:	f7fd fcd8 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005100:	2000      	movs	r0, #0
 8005102:	f7fd fcd5 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8005106:	20be      	movs	r0, #190	; 0xbe
 8005108:	f7fd fcd2 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800510c:	2000      	movs	r0, #0
 800510e:	f7fd fccf 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8005112:	20c4      	movs	r0, #196	; 0xc4
 8005114:	f7fd fccc 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005118:	2000      	movs	r0, #0
 800511a:	f7fd fcc9 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 800511e:	20cd      	movs	r0, #205	; 0xcd
 8005120:	f7fd fcc6 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005124:	2000      	movs	r0, #0
 8005126:	f7fd fcc3 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 800512a:	20d3      	movs	r0, #211	; 0xd3
 800512c:	f7fd fcc0 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005130:	2000      	movs	r0, #0
 8005132:	f7fd fcbd 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8005136:	20dd      	movs	r0, #221	; 0xdd
 8005138:	f7fd fcba 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800513c:	2000      	movs	r0, #0
 800513e:	f7fd fcb7 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8005142:	20f3      	movs	r0, #243	; 0xf3
 8005144:	f7fd fcb4 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005148:	2000      	movs	r0, #0
 800514a:	f7fd fcb1 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 800514e:	20e5      	movs	r0, #229	; 0xe5
 8005150:	f7fd fc8a 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005154:	2000      	movs	r0, #0
 8005156:	f7fd fcab 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800515a:	2000      	movs	r0, #0
 800515c:	f7fd fca8 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005160:	2000      	movs	r0, #0
 8005162:	f7fd fca5 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005166:	2000      	movs	r0, #0
 8005168:	f7fd fca2 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800516c:	2002      	movs	r0, #2
 800516e:	f7fd fc9f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005172:	2000      	movs	r0, #0
 8005174:	f7fd fc9c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8005178:	2029      	movs	r0, #41	; 0x29
 800517a:	f7fd fc99 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800517e:	2000      	movs	r0, #0
 8005180:	f7fd fc96 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8005184:	203c      	movs	r0, #60	; 0x3c
 8005186:	f7fd fc93 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800518a:	2000      	movs	r0, #0
 800518c:	f7fd fc90 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8005190:	204b      	movs	r0, #75	; 0x4b
 8005192:	f7fd fc8d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005196:	2000      	movs	r0, #0
 8005198:	f7fd fc8a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800519c:	205d      	movs	r0, #93	; 0x5d
 800519e:	f7fd fc87 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051a2:	2000      	movs	r0, #0
 80051a4:	f7fd fc84 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 80051a8:	2074      	movs	r0, #116	; 0x74
 80051aa:	f7fd fc81 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051ae:	2000      	movs	r0, #0
 80051b0:	f7fd fc7e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80051b4:	2084      	movs	r0, #132	; 0x84
 80051b6:	f7fd fc7b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051ba:	2000      	movs	r0, #0
 80051bc:	f7fd fc78 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 80051c0:	2093      	movs	r0, #147	; 0x93
 80051c2:	f7fd fc75 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051c6:	2000      	movs	r0, #0
 80051c8:	f7fd fc72 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80051cc:	20a2      	movs	r0, #162	; 0xa2
 80051ce:	f7fd fc6f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051d2:	2000      	movs	r0, #0
 80051d4:	f7fd fc6c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 80051d8:	20b3      	movs	r0, #179	; 0xb3
 80051da:	f7fd fc69 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051de:	2000      	movs	r0, #0
 80051e0:	f7fd fc66 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 80051e4:	20be      	movs	r0, #190	; 0xbe
 80051e6:	f7fd fc63 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051ea:	2000      	movs	r0, #0
 80051ec:	f7fd fc60 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80051f0:	20c4      	movs	r0, #196	; 0xc4
 80051f2:	f7fd fc5d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051f6:	2000      	movs	r0, #0
 80051f8:	f7fd fc5a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80051fc:	20cd      	movs	r0, #205	; 0xcd
 80051fe:	f7fd fc57 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005202:	2000      	movs	r0, #0
 8005204:	f7fd fc54 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8005208:	20d3      	movs	r0, #211	; 0xd3
 800520a:	f7fd fc51 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800520e:	2000      	movs	r0, #0
 8005210:	f7fd fc4e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8005214:	20dc      	movs	r0, #220	; 0xdc
 8005216:	f7fd fc4b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800521a:	2000      	movs	r0, #0
 800521c:	f7fd fc48 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8005220:	20f3      	movs	r0, #243	; 0xf3
 8005222:	f7fd fc45 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005226:	2000      	movs	r0, #0
 8005228:	f7fd fc42 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 800522c:	20e6      	movs	r0, #230	; 0xe6
 800522e:	f7fd fc1b 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8005232:	2011      	movs	r0, #17
 8005234:	f7fd fc3c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005238:	2000      	movs	r0, #0
 800523a:	f7fd fc39 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800523e:	2034      	movs	r0, #52	; 0x34
 8005240:	f7fd fc36 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005244:	2000      	movs	r0, #0
 8005246:	f7fd fc33 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 800524a:	2056      	movs	r0, #86	; 0x56
 800524c:	f7fd fc30 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005250:	2000      	movs	r0, #0
 8005252:	f7fd fc2d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8005256:	2076      	movs	r0, #118	; 0x76
 8005258:	f7fd fc2a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800525c:	2000      	movs	r0, #0
 800525e:	f7fd fc27 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8005262:	2077      	movs	r0, #119	; 0x77
 8005264:	f7fd fc24 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005268:	2000      	movs	r0, #0
 800526a:	f7fd fc21 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800526e:	2066      	movs	r0, #102	; 0x66
 8005270:	f7fd fc1e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005274:	2000      	movs	r0, #0
 8005276:	f7fd fc1b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800527a:	2088      	movs	r0, #136	; 0x88
 800527c:	f7fd fc18 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005280:	2000      	movs	r0, #0
 8005282:	f7fd fc15 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005286:	2099      	movs	r0, #153	; 0x99
 8005288:	f7fd fc12 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800528c:	2000      	movs	r0, #0
 800528e:	f7fd fc0f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8005292:	20bb      	movs	r0, #187	; 0xbb
 8005294:	f7fd fc0c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005298:	2000      	movs	r0, #0
 800529a:	f7fd fc09 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800529e:	2099      	movs	r0, #153	; 0x99
 80052a0:	f7fd fc06 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052a4:	2000      	movs	r0, #0
 80052a6:	f7fd fc03 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80052aa:	2066      	movs	r0, #102	; 0x66
 80052ac:	f7fd fc00 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052b0:	2000      	movs	r0, #0
 80052b2:	f7fd fbfd 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80052b6:	2055      	movs	r0, #85	; 0x55
 80052b8:	f7fd fbfa 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052bc:	2000      	movs	r0, #0
 80052be:	f7fd fbf7 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80052c2:	2055      	movs	r0, #85	; 0x55
 80052c4:	f7fd fbf4 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052c8:	2000      	movs	r0, #0
 80052ca:	f7fd fbf1 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80052ce:	2045      	movs	r0, #69	; 0x45
 80052d0:	f7fd fbee 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052d4:	2000      	movs	r0, #0
 80052d6:	f7fd fbeb 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80052da:	2043      	movs	r0, #67	; 0x43
 80052dc:	f7fd fbe8 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052e0:	2000      	movs	r0, #0
 80052e2:	f7fd fbe5 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80052e6:	2044      	movs	r0, #68	; 0x44
 80052e8:	f7fd fbe2 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052ec:	2000      	movs	r0, #0
 80052ee:	f7fd fbdf 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 80052f2:	20e7      	movs	r0, #231	; 0xe7
 80052f4:	f7fd fbb8 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80052f8:	2032      	movs	r0, #50	; 0x32
 80052fa:	f7fd fbd9 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052fe:	2000      	movs	r0, #0
 8005300:	f7fd fbd6 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005304:	2055      	movs	r0, #85	; 0x55
 8005306:	f7fd fbd3 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800530a:	2000      	movs	r0, #0
 800530c:	f7fd fbd0 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8005310:	2076      	movs	r0, #118	; 0x76
 8005312:	f7fd fbcd 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005316:	2000      	movs	r0, #0
 8005318:	f7fd fbca 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800531c:	2066      	movs	r0, #102	; 0x66
 800531e:	f7fd fbc7 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005322:	2000      	movs	r0, #0
 8005324:	f7fd fbc4 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8005328:	2067      	movs	r0, #103	; 0x67
 800532a:	f7fd fbc1 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800532e:	2000      	movs	r0, #0
 8005330:	f7fd fbbe 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8005334:	2067      	movs	r0, #103	; 0x67
 8005336:	f7fd fbbb 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800533a:	2000      	movs	r0, #0
 800533c:	f7fd fbb8 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8005340:	2087      	movs	r0, #135	; 0x87
 8005342:	f7fd fbb5 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005346:	2000      	movs	r0, #0
 8005348:	f7fd fbb2 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800534c:	2099      	movs	r0, #153	; 0x99
 800534e:	f7fd fbaf 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005352:	2000      	movs	r0, #0
 8005354:	f7fd fbac 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8005358:	20bb      	movs	r0, #187	; 0xbb
 800535a:	f7fd fba9 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800535e:	2000      	movs	r0, #0
 8005360:	f7fd fba6 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005364:	2099      	movs	r0, #153	; 0x99
 8005366:	f7fd fba3 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800536a:	2000      	movs	r0, #0
 800536c:	f7fd fba0 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8005370:	2077      	movs	r0, #119	; 0x77
 8005372:	f7fd fb9d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005376:	2000      	movs	r0, #0
 8005378:	f7fd fb9a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800537c:	2044      	movs	r0, #68	; 0x44
 800537e:	f7fd fb97 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005382:	2000      	movs	r0, #0
 8005384:	f7fd fb94 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8005388:	2056      	movs	r0, #86	; 0x56
 800538a:	f7fd fb91 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800538e:	2000      	movs	r0, #0
 8005390:	f7fd fb8e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8005394:	2023      	movs	r0, #35	; 0x23
 8005396:	f7fd fb8b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800539a:	2000      	movs	r0, #0
 800539c:	f7fd fb88 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 80053a0:	2033      	movs	r0, #51	; 0x33
 80053a2:	f7fd fb85 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053a6:	2000      	movs	r0, #0
 80053a8:	f7fd fb82 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80053ac:	2045      	movs	r0, #69	; 0x45
 80053ae:	f7fd fb7f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053b2:	2000      	movs	r0, #0
 80053b4:	f7fd fb7c 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 80053b8:	20e8      	movs	r0, #232	; 0xe8
 80053ba:	f7fd fb55 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80053be:	2000      	movs	r0, #0
 80053c0:	f7fd fb76 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053c4:	2000      	movs	r0, #0
 80053c6:	f7fd fb73 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80053ca:	2099      	movs	r0, #153	; 0x99
 80053cc:	f7fd fb70 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053d0:	2000      	movs	r0, #0
 80053d2:	f7fd fb6d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80053d6:	2087      	movs	r0, #135	; 0x87
 80053d8:	f7fd fb6a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053dc:	2000      	movs	r0, #0
 80053de:	f7fd fb67 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80053e2:	2088      	movs	r0, #136	; 0x88
 80053e4:	f7fd fb64 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053e8:	2000      	movs	r0, #0
 80053ea:	f7fd fb61 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80053ee:	2077      	movs	r0, #119	; 0x77
 80053f0:	f7fd fb5e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053f4:	2000      	movs	r0, #0
 80053f6:	f7fd fb5b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80053fa:	2066      	movs	r0, #102	; 0x66
 80053fc:	f7fd fb58 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005400:	2000      	movs	r0, #0
 8005402:	f7fd fb55 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005406:	2088      	movs	r0, #136	; 0x88
 8005408:	f7fd fb52 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800540c:	2000      	movs	r0, #0
 800540e:	f7fd fb4f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8005412:	20aa      	movs	r0, #170	; 0xaa
 8005414:	f7fd fb4c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005418:	2000      	movs	r0, #0
 800541a:	f7fd fb49 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 800541e:	20bb      	movs	r0, #187	; 0xbb
 8005420:	f7fd fb46 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005424:	2000      	movs	r0, #0
 8005426:	f7fd fb43 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800542a:	2099      	movs	r0, #153	; 0x99
 800542c:	f7fd fb40 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005430:	2000      	movs	r0, #0
 8005432:	f7fd fb3d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8005436:	2066      	movs	r0, #102	; 0x66
 8005438:	f7fd fb3a 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800543c:	2000      	movs	r0, #0
 800543e:	f7fd fb37 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005442:	2055      	movs	r0, #85	; 0x55
 8005444:	f7fd fb34 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005448:	2000      	movs	r0, #0
 800544a:	f7fd fb31 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800544e:	2055      	movs	r0, #85	; 0x55
 8005450:	f7fd fb2e 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005454:	2000      	movs	r0, #0
 8005456:	f7fd fb2b 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800545a:	2044      	movs	r0, #68	; 0x44
 800545c:	f7fd fb28 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005460:	2000      	movs	r0, #0
 8005462:	f7fd fb25 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005466:	2044      	movs	r0, #68	; 0x44
 8005468:	f7fd fb22 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800546c:	2000      	movs	r0, #0
 800546e:	f7fd fb1f 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005472:	2055      	movs	r0, #85	; 0x55
 8005474:	f7fd fb1c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005478:	2000      	movs	r0, #0
 800547a:	f7fd fb19 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 800547e:	20e9      	movs	r0, #233	; 0xe9
 8005480:	f7fd faf2 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8005484:	20aa      	movs	r0, #170	; 0xaa
 8005486:	f7fd fb13 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800548a:	2000      	movs	r0, #0
 800548c:	f7fd fb10 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005490:	2000      	movs	r0, #0
 8005492:	f7fd fb0d 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005496:	2000      	movs	r0, #0
 8005498:	f7fd fb0a 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 800549c:	2000      	movs	r0, #0
 800549e:	f7fd fae3 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80054a2:	20aa      	movs	r0, #170	; 0xaa
 80054a4:	f7fd fb04 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 80054a8:	20cf      	movs	r0, #207	; 0xcf
 80054aa:	f7fd fadd 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80054ae:	2000      	movs	r0, #0
 80054b0:	f7fd fafe 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054b4:	2000      	movs	r0, #0
 80054b6:	f7fd fafb 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054ba:	2000      	movs	r0, #0
 80054bc:	f7fd faf8 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054c0:	2000      	movs	r0, #0
 80054c2:	f7fd faf5 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054c6:	2000      	movs	r0, #0
 80054c8:	f7fd faf2 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054cc:	2000      	movs	r0, #0
 80054ce:	f7fd faef 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054d2:	2000      	movs	r0, #0
 80054d4:	f7fd faec 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054d8:	2000      	movs	r0, #0
 80054da:	f7fd fae9 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054de:	2000      	movs	r0, #0
 80054e0:	f7fd fae6 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054e4:	2000      	movs	r0, #0
 80054e6:	f7fd fae3 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054ea:	2000      	movs	r0, #0
 80054ec:	f7fd fae0 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054f0:	2000      	movs	r0, #0
 80054f2:	f7fd fadd 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054f6:	2000      	movs	r0, #0
 80054f8:	f7fd fada 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054fc:	2000      	movs	r0, #0
 80054fe:	f7fd fad7 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005502:	2000      	movs	r0, #0
 8005504:	f7fd fad4 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005508:	2000      	movs	r0, #0
 800550a:	f7fd fad1 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800550e:	2000      	movs	r0, #0
 8005510:	f7fd face 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8005514:	20f0      	movs	r0, #240	; 0xf0
 8005516:	f7fd faa7 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800551a:	2000      	movs	r0, #0
 800551c:	f7fd fac8 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8005520:	2050      	movs	r0, #80	; 0x50
 8005522:	f7fd fac5 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005526:	2000      	movs	r0, #0
 8005528:	f7fd fac2 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800552c:	2000      	movs	r0, #0
 800552e:	f7fd fabf 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005532:	2000      	movs	r0, #0
 8005534:	f7fd fabc 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8005538:	20f3      	movs	r0, #243	; 0xf3
 800553a:	f7fd fa95 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800553e:	2000      	movs	r0, #0
 8005540:	f7fd fab6 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 8005544:	20f9      	movs	r0, #249	; 0xf9
 8005546:	f7fd fa8f 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 800554a:	2006      	movs	r0, #6
 800554c:	f7fd fab0 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8005550:	2010      	movs	r0, #16
 8005552:	f7fd faad 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8005556:	2029      	movs	r0, #41	; 0x29
 8005558:	f7fd faaa 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800555c:	2000      	movs	r0, #0
 800555e:	f7fd faa7 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8005562:	203a      	movs	r0, #58	; 0x3a
 8005564:	f7fd fa80 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8005568:	2055      	movs	r0, #85	; 0x55
 800556a:	f7fd faa1 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 800556e:	2011      	movs	r0, #17
 8005570:	f7fd fa7a 	bl	8002a68 <LCD_WR_REG>
		HAL_Delay(100);
 8005574:	2064      	movs	r0, #100	; 0x64
 8005576:	f7fb faa7 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x29);
 800557a:	2029      	movs	r0, #41	; 0x29
 800557c:	f7fd fa74 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8005580:	2035      	movs	r0, #53	; 0x35
 8005582:	f7fd fa71 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005586:	2000      	movs	r0, #0
 8005588:	f7fd fa92 	bl	8002ab0 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 800558c:	2051      	movs	r0, #81	; 0x51
 800558e:	f7fd fa6b 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8005592:	20ff      	movs	r0, #255	; 0xff
 8005594:	f7fd fa8c 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8005598:	2053      	movs	r0, #83	; 0x53
 800559a:	f7fd fa65 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 800559e:	202c      	movs	r0, #44	; 0x2c
 80055a0:	f7fd fa86 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 80055a4:	2055      	movs	r0, #85	; 0x55
 80055a6:	f7fd fa5f 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 80055aa:	2082      	movs	r0, #130	; 0x82
 80055ac:	f7fd fa80 	bl	8002ab0 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 80055b0:	202c      	movs	r0, #44	; 0x2c
 80055b2:	f7fd fa59 	bl	8002a68 <LCD_WR_REG>
 80055b6:	f002 bca1 	b.w	8007efc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 80055ba:	4b04      	ldr	r3, [pc, #16]	; (80055cc <LCD_Init+0x1504>)
 80055bc:	889b      	ldrh	r3, [r3, #4]
 80055be:	f245 5210 	movw	r2, #21776	; 0x5510
 80055c2:	4293      	cmp	r3, r2
 80055c4:	f040 8782 	bne.w	80064cc <LCD_Init+0x2404>
 80055c8:	e002      	b.n	80055d0 <LCD_Init+0x1508>
 80055ca:	bf00      	nop
 80055cc:	200007cc 	.word	0x200007cc
		LCD_WriteReg(0xF000, 0x55);
 80055d0:	2155      	movs	r1, #85	; 0x55
 80055d2:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80055d6:	f7fd fad3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 80055da:	21aa      	movs	r1, #170	; 0xaa
 80055dc:	f24f 0001 	movw	r0, #61441	; 0xf001
 80055e0:	f7fd face 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 80055e4:	2152      	movs	r1, #82	; 0x52
 80055e6:	f24f 0002 	movw	r0, #61442	; 0xf002
 80055ea:	f7fd fac9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80055ee:	2108      	movs	r1, #8
 80055f0:	f24f 0003 	movw	r0, #61443	; 0xf003
 80055f4:	f7fd fac4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 80055f8:	2101      	movs	r1, #1
 80055fa:	f24f 0004 	movw	r0, #61444	; 0xf004
 80055fe:	f7fd fabf 	bl	8002b80 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 8005602:	210d      	movs	r1, #13
 8005604:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8005608:	f7fd faba 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 800560c:	210d      	movs	r1, #13
 800560e:	f24b 0001 	movw	r0, #45057	; 0xb001
 8005612:	f7fd fab5 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 8005616:	210d      	movs	r1, #13
 8005618:	f24b 0002 	movw	r0, #45058	; 0xb002
 800561c:	f7fd fab0 	bl	8002b80 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8005620:	2134      	movs	r1, #52	; 0x34
 8005622:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8005626:	f7fd faab 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 800562a:	2134      	movs	r1, #52	; 0x34
 800562c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8005630:	f7fd faa6 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 8005634:	2134      	movs	r1, #52	; 0x34
 8005636:	f24b 6002 	movw	r0, #46594	; 0xb602
 800563a:	f7fd faa1 	bl	8002b80 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 800563e:	210d      	movs	r1, #13
 8005640:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8005644:	f7fd fa9c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8005648:	210d      	movs	r1, #13
 800564a:	f24b 1001 	movw	r0, #45313	; 0xb101
 800564e:	f7fd fa97 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8005652:	210d      	movs	r1, #13
 8005654:	f24b 1002 	movw	r0, #45314	; 0xb102
 8005658:	f7fd fa92 	bl	8002b80 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 800565c:	2134      	movs	r1, #52	; 0x34
 800565e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8005662:	f7fd fa8d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8005666:	2134      	movs	r1, #52	; 0x34
 8005668:	f24b 7001 	movw	r0, #46849	; 0xb701
 800566c:	f7fd fa88 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8005670:	2134      	movs	r1, #52	; 0x34
 8005672:	f24b 7002 	movw	r0, #46850	; 0xb702
 8005676:	f7fd fa83 	bl	8002b80 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 800567a:	2100      	movs	r1, #0
 800567c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8005680:	f7fd fa7e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8005684:	2100      	movs	r1, #0
 8005686:	f24b 2001 	movw	r0, #45569	; 0xb201
 800568a:	f7fd fa79 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 800568e:	2100      	movs	r1, #0
 8005690:	f24b 2002 	movw	r0, #45570	; 0xb202
 8005694:	f7fd fa74 	bl	8002b80 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8005698:	2124      	movs	r1, #36	; 0x24
 800569a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800569e:	f7fd fa6f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 80056a2:	2124      	movs	r1, #36	; 0x24
 80056a4:	f64b 0001 	movw	r0, #47105	; 0xb801
 80056a8:	f7fd fa6a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 80056ac:	2124      	movs	r1, #36	; 0x24
 80056ae:	f64b 0002 	movw	r0, #47106	; 0xb802
 80056b2:	f7fd fa65 	bl	8002b80 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 80056b6:	2101      	movs	r1, #1
 80056b8:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 80056bc:	f7fd fa60 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 80056c0:	210f      	movs	r1, #15
 80056c2:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80056c6:	f7fd fa5b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 80056ca:	210f      	movs	r1, #15
 80056cc:	f24b 3001 	movw	r0, #45825	; 0xb301
 80056d0:	f7fd fa56 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 80056d4:	210f      	movs	r1, #15
 80056d6:	f24b 3002 	movw	r0, #45826	; 0xb302
 80056da:	f7fd fa51 	bl	8002b80 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 80056de:	2134      	movs	r1, #52	; 0x34
 80056e0:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80056e4:	f7fd fa4c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 80056e8:	2134      	movs	r1, #52	; 0x34
 80056ea:	f64b 1001 	movw	r0, #47361	; 0xb901
 80056ee:	f7fd fa47 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 80056f2:	2134      	movs	r1, #52	; 0x34
 80056f4:	f64b 1002 	movw	r0, #47362	; 0xb902
 80056f8:	f7fd fa42 	bl	8002b80 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 80056fc:	2108      	movs	r1, #8
 80056fe:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8005702:	f7fd fa3d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 8005706:	2108      	movs	r1, #8
 8005708:	f24b 5001 	movw	r0, #46337	; 0xb501
 800570c:	f7fd fa38 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8005710:	2108      	movs	r1, #8
 8005712:	f24b 5002 	movw	r0, #46338	; 0xb502
 8005716:	f7fd fa33 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 800571a:	2103      	movs	r1, #3
 800571c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8005720:	f7fd fa2e 	bl	8002b80 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 8005724:	2124      	movs	r1, #36	; 0x24
 8005726:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 800572a:	f7fd fa29 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 800572e:	2124      	movs	r1, #36	; 0x24
 8005730:	f64b 2001 	movw	r0, #47617	; 0xba01
 8005734:	f7fd fa24 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8005738:	2124      	movs	r1, #36	; 0x24
 800573a:	f64b 2002 	movw	r0, #47618	; 0xba02
 800573e:	f7fd fa1f 	bl	8002b80 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 8005742:	2100      	movs	r1, #0
 8005744:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8005748:	f7fd fa1a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 800574c:	2178      	movs	r1, #120	; 0x78
 800574e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8005752:	f7fd fa15 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8005756:	2100      	movs	r1, #0
 8005758:	f64b 4002 	movw	r0, #48130	; 0xbc02
 800575c:	f7fd fa10 	bl	8002b80 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8005760:	2100      	movs	r1, #0
 8005762:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8005766:	f7fd fa0b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 800576a:	2178      	movs	r1, #120	; 0x78
 800576c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8005770:	f7fd fa06 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8005774:	2100      	movs	r1, #0
 8005776:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800577a:	f7fd fa01 	bl	8002b80 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 800577e:	2100      	movs	r1, #0
 8005780:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8005784:	f7fd f9fc 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8005788:	2164      	movs	r1, #100	; 0x64
 800578a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800578e:	f7fd f9f7 	bl	8002b80 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8005792:	2100      	movs	r1, #0
 8005794:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8005798:	f7fd f9f2 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 800579c:	2133      	movs	r1, #51	; 0x33
 800579e:	f24d 1001 	movw	r0, #53505	; 0xd101
 80057a2:	f7fd f9ed 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 80057a6:	2100      	movs	r1, #0
 80057a8:	f24d 1002 	movw	r0, #53506	; 0xd102
 80057ac:	f7fd f9e8 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 80057b0:	2134      	movs	r1, #52	; 0x34
 80057b2:	f24d 1003 	movw	r0, #53507	; 0xd103
 80057b6:	f7fd f9e3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 80057ba:	2100      	movs	r1, #0
 80057bc:	f24d 1004 	movw	r0, #53508	; 0xd104
 80057c0:	f7fd f9de 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 80057c4:	213a      	movs	r1, #58	; 0x3a
 80057c6:	f24d 1005 	movw	r0, #53509	; 0xd105
 80057ca:	f7fd f9d9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 80057ce:	2100      	movs	r1, #0
 80057d0:	f24d 1006 	movw	r0, #53510	; 0xd106
 80057d4:	f7fd f9d4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 80057d8:	214a      	movs	r1, #74	; 0x4a
 80057da:	f24d 1007 	movw	r0, #53511	; 0xd107
 80057de:	f7fd f9cf 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 80057e2:	2100      	movs	r1, #0
 80057e4:	f24d 1008 	movw	r0, #53512	; 0xd108
 80057e8:	f7fd f9ca 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 80057ec:	215c      	movs	r1, #92	; 0x5c
 80057ee:	f24d 1009 	movw	r0, #53513	; 0xd109
 80057f2:	f7fd f9c5 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 80057f6:	2100      	movs	r1, #0
 80057f8:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80057fc:	f7fd f9c0 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8005800:	2181      	movs	r1, #129	; 0x81
 8005802:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8005806:	f7fd f9bb 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 800580a:	2100      	movs	r1, #0
 800580c:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8005810:	f7fd f9b6 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 8005814:	21a6      	movs	r1, #166	; 0xa6
 8005816:	f24d 100d 	movw	r0, #53517	; 0xd10d
 800581a:	f7fd f9b1 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 800581e:	2100      	movs	r1, #0
 8005820:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8005824:	f7fd f9ac 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8005828:	21e5      	movs	r1, #229	; 0xe5
 800582a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800582e:	f7fd f9a7 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 8005832:	2101      	movs	r1, #1
 8005834:	f24d 1010 	movw	r0, #53520	; 0xd110
 8005838:	f7fd f9a2 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 800583c:	2113      	movs	r1, #19
 800583e:	f24d 1011 	movw	r0, #53521	; 0xd111
 8005842:	f7fd f99d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 8005846:	2101      	movs	r1, #1
 8005848:	f24d 1012 	movw	r0, #53522	; 0xd112
 800584c:	f7fd f998 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8005850:	2154      	movs	r1, #84	; 0x54
 8005852:	f24d 1013 	movw	r0, #53523	; 0xd113
 8005856:	f7fd f993 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 800585a:	2101      	movs	r1, #1
 800585c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8005860:	f7fd f98e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8005864:	2182      	movs	r1, #130	; 0x82
 8005866:	f24d 1015 	movw	r0, #53525	; 0xd115
 800586a:	f7fd f989 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 800586e:	2101      	movs	r1, #1
 8005870:	f24d 1016 	movw	r0, #53526	; 0xd116
 8005874:	f7fd f984 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8005878:	21ca      	movs	r1, #202	; 0xca
 800587a:	f24d 1017 	movw	r0, #53527	; 0xd117
 800587e:	f7fd f97f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8005882:	2102      	movs	r1, #2
 8005884:	f24d 1018 	movw	r0, #53528	; 0xd118
 8005888:	f7fd f97a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 800588c:	2100      	movs	r1, #0
 800588e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8005892:	f7fd f975 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8005896:	2102      	movs	r1, #2
 8005898:	f24d 101a 	movw	r0, #53530	; 0xd11a
 800589c:	f7fd f970 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 80058a0:	2101      	movs	r1, #1
 80058a2:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80058a6:	f7fd f96b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 80058aa:	2102      	movs	r1, #2
 80058ac:	f24d 101c 	movw	r0, #53532	; 0xd11c
 80058b0:	f7fd f966 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 80058b4:	2134      	movs	r1, #52	; 0x34
 80058b6:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80058ba:	f7fd f961 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 80058be:	2102      	movs	r1, #2
 80058c0:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80058c4:	f7fd f95c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 80058c8:	2167      	movs	r1, #103	; 0x67
 80058ca:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80058ce:	f7fd f957 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 80058d2:	2102      	movs	r1, #2
 80058d4:	f24d 1020 	movw	r0, #53536	; 0xd120
 80058d8:	f7fd f952 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 80058dc:	2184      	movs	r1, #132	; 0x84
 80058de:	f24d 1021 	movw	r0, #53537	; 0xd121
 80058e2:	f7fd f94d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 80058e6:	2102      	movs	r1, #2
 80058e8:	f24d 1022 	movw	r0, #53538	; 0xd122
 80058ec:	f7fd f948 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 80058f0:	21a4      	movs	r1, #164	; 0xa4
 80058f2:	f24d 1023 	movw	r0, #53539	; 0xd123
 80058f6:	f7fd f943 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 80058fa:	2102      	movs	r1, #2
 80058fc:	f24d 1024 	movw	r0, #53540	; 0xd124
 8005900:	f7fd f93e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 8005904:	21b7      	movs	r1, #183	; 0xb7
 8005906:	f24d 1025 	movw	r0, #53541	; 0xd125
 800590a:	f7fd f939 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 800590e:	2102      	movs	r1, #2
 8005910:	f24d 1026 	movw	r0, #53542	; 0xd126
 8005914:	f7fd f934 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8005918:	21cf      	movs	r1, #207	; 0xcf
 800591a:	f24d 1027 	movw	r0, #53543	; 0xd127
 800591e:	f7fd f92f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8005922:	2102      	movs	r1, #2
 8005924:	f24d 1028 	movw	r0, #53544	; 0xd128
 8005928:	f7fd f92a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 800592c:	21de      	movs	r1, #222	; 0xde
 800592e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8005932:	f7fd f925 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8005936:	2102      	movs	r1, #2
 8005938:	f24d 102a 	movw	r0, #53546	; 0xd12a
 800593c:	f7fd f920 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8005940:	21f2      	movs	r1, #242	; 0xf2
 8005942:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8005946:	f7fd f91b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 800594a:	2102      	movs	r1, #2
 800594c:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8005950:	f7fd f916 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8005954:	21fe      	movs	r1, #254	; 0xfe
 8005956:	f24d 102d 	movw	r0, #53549	; 0xd12d
 800595a:	f7fd f911 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 800595e:	2103      	movs	r1, #3
 8005960:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8005964:	f7fd f90c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8005968:	2110      	movs	r1, #16
 800596a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800596e:	f7fd f907 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8005972:	2103      	movs	r1, #3
 8005974:	f24d 1030 	movw	r0, #53552	; 0xd130
 8005978:	f7fd f902 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 800597c:	2133      	movs	r1, #51	; 0x33
 800597e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8005982:	f7fd f8fd 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8005986:	2103      	movs	r1, #3
 8005988:	f24d 1032 	movw	r0, #53554	; 0xd132
 800598c:	f7fd f8f8 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8005990:	216d      	movs	r1, #109	; 0x6d
 8005992:	f24d 1033 	movw	r0, #53555	; 0xd133
 8005996:	f7fd f8f3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 800599a:	2100      	movs	r1, #0
 800599c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80059a0:	f7fd f8ee 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 80059a4:	2133      	movs	r1, #51	; 0x33
 80059a6:	f24d 2001 	movw	r0, #53761	; 0xd201
 80059aa:	f7fd f8e9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 80059ae:	2100      	movs	r1, #0
 80059b0:	f24d 2002 	movw	r0, #53762	; 0xd202
 80059b4:	f7fd f8e4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 80059b8:	2134      	movs	r1, #52	; 0x34
 80059ba:	f24d 2003 	movw	r0, #53763	; 0xd203
 80059be:	f7fd f8df 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 80059c2:	2100      	movs	r1, #0
 80059c4:	f24d 2004 	movw	r0, #53764	; 0xd204
 80059c8:	f7fd f8da 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 80059cc:	213a      	movs	r1, #58	; 0x3a
 80059ce:	f24d 2005 	movw	r0, #53765	; 0xd205
 80059d2:	f7fd f8d5 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 80059d6:	2100      	movs	r1, #0
 80059d8:	f24d 2006 	movw	r0, #53766	; 0xd206
 80059dc:	f7fd f8d0 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 80059e0:	214a      	movs	r1, #74	; 0x4a
 80059e2:	f24d 2007 	movw	r0, #53767	; 0xd207
 80059e6:	f7fd f8cb 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 80059ea:	2100      	movs	r1, #0
 80059ec:	f24d 2008 	movw	r0, #53768	; 0xd208
 80059f0:	f7fd f8c6 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 80059f4:	215c      	movs	r1, #92	; 0x5c
 80059f6:	f24d 2009 	movw	r0, #53769	; 0xd209
 80059fa:	f7fd f8c1 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 80059fe:	2100      	movs	r1, #0
 8005a00:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8005a04:	f7fd f8bc 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8005a08:	2181      	movs	r1, #129	; 0x81
 8005a0a:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8005a0e:	f7fd f8b7 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8005a12:	2100      	movs	r1, #0
 8005a14:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8005a18:	f7fd f8b2 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8005a1c:	21a6      	movs	r1, #166	; 0xa6
 8005a1e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8005a22:	f7fd f8ad 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8005a26:	2100      	movs	r1, #0
 8005a28:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8005a2c:	f7fd f8a8 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8005a30:	21e5      	movs	r1, #229	; 0xe5
 8005a32:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8005a36:	f7fd f8a3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	f24d 2010 	movw	r0, #53776	; 0xd210
 8005a40:	f7fd f89e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8005a44:	2113      	movs	r1, #19
 8005a46:	f24d 2011 	movw	r0, #53777	; 0xd211
 8005a4a:	f7fd f899 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8005a4e:	2101      	movs	r1, #1
 8005a50:	f24d 2012 	movw	r0, #53778	; 0xd212
 8005a54:	f7fd f894 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8005a58:	2154      	movs	r1, #84	; 0x54
 8005a5a:	f24d 2013 	movw	r0, #53779	; 0xd213
 8005a5e:	f7fd f88f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8005a62:	2101      	movs	r1, #1
 8005a64:	f24d 2014 	movw	r0, #53780	; 0xd214
 8005a68:	f7fd f88a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8005a6c:	2182      	movs	r1, #130	; 0x82
 8005a6e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8005a72:	f7fd f885 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8005a76:	2101      	movs	r1, #1
 8005a78:	f24d 2016 	movw	r0, #53782	; 0xd216
 8005a7c:	f7fd f880 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8005a80:	21ca      	movs	r1, #202	; 0xca
 8005a82:	f24d 2017 	movw	r0, #53783	; 0xd217
 8005a86:	f7fd f87b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8005a8a:	2102      	movs	r1, #2
 8005a8c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8005a90:	f7fd f876 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8005a94:	2100      	movs	r1, #0
 8005a96:	f24d 2019 	movw	r0, #53785	; 0xd219
 8005a9a:	f7fd f871 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8005a9e:	2102      	movs	r1, #2
 8005aa0:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8005aa4:	f7fd f86c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8005aae:	f7fd f867 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8005ab2:	2102      	movs	r1, #2
 8005ab4:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8005ab8:	f7fd f862 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8005abc:	2134      	movs	r1, #52	; 0x34
 8005abe:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8005ac2:	f7fd f85d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8005ac6:	2102      	movs	r1, #2
 8005ac8:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8005acc:	f7fd f858 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8005ad0:	2167      	movs	r1, #103	; 0x67
 8005ad2:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8005ad6:	f7fd f853 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8005ada:	2102      	movs	r1, #2
 8005adc:	f24d 2020 	movw	r0, #53792	; 0xd220
 8005ae0:	f7fd f84e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8005ae4:	2184      	movs	r1, #132	; 0x84
 8005ae6:	f24d 2021 	movw	r0, #53793	; 0xd221
 8005aea:	f7fd f849 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8005aee:	2102      	movs	r1, #2
 8005af0:	f24d 2022 	movw	r0, #53794	; 0xd222
 8005af4:	f7fd f844 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8005af8:	21a4      	movs	r1, #164	; 0xa4
 8005afa:	f24d 2023 	movw	r0, #53795	; 0xd223
 8005afe:	f7fd f83f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8005b02:	2102      	movs	r1, #2
 8005b04:	f24d 2024 	movw	r0, #53796	; 0xd224
 8005b08:	f7fd f83a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8005b0c:	21b7      	movs	r1, #183	; 0xb7
 8005b0e:	f24d 2025 	movw	r0, #53797	; 0xd225
 8005b12:	f7fd f835 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8005b16:	2102      	movs	r1, #2
 8005b18:	f24d 2026 	movw	r0, #53798	; 0xd226
 8005b1c:	f7fd f830 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8005b20:	21cf      	movs	r1, #207	; 0xcf
 8005b22:	f24d 2027 	movw	r0, #53799	; 0xd227
 8005b26:	f7fd f82b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8005b2a:	2102      	movs	r1, #2
 8005b2c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8005b30:	f7fd f826 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8005b34:	21de      	movs	r1, #222	; 0xde
 8005b36:	f24d 2029 	movw	r0, #53801	; 0xd229
 8005b3a:	f7fd f821 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8005b3e:	2102      	movs	r1, #2
 8005b40:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8005b44:	f7fd f81c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8005b48:	21f2      	movs	r1, #242	; 0xf2
 8005b4a:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8005b4e:	f7fd f817 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8005b52:	2102      	movs	r1, #2
 8005b54:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8005b58:	f7fd f812 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8005b5c:	21fe      	movs	r1, #254	; 0xfe
 8005b5e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8005b62:	f7fd f80d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8005b66:	2103      	movs	r1, #3
 8005b68:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8005b6c:	f7fd f808 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8005b70:	2110      	movs	r1, #16
 8005b72:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8005b76:	f7fd f803 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8005b7a:	2103      	movs	r1, #3
 8005b7c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8005b80:	f7fc fffe 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8005b84:	2133      	movs	r1, #51	; 0x33
 8005b86:	f24d 2031 	movw	r0, #53809	; 0xd231
 8005b8a:	f7fc fff9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8005b8e:	2103      	movs	r1, #3
 8005b90:	f24d 2032 	movw	r0, #53810	; 0xd232
 8005b94:	f7fc fff4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8005b98:	216d      	movs	r1, #109	; 0x6d
 8005b9a:	f24d 2033 	movw	r0, #53811	; 0xd233
 8005b9e:	f7fc ffef 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8005ba8:	f7fc ffea 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8005bac:	2133      	movs	r1, #51	; 0x33
 8005bae:	f24d 3001 	movw	r0, #54017	; 0xd301
 8005bb2:	f7fc ffe5 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	f24d 3002 	movw	r0, #54018	; 0xd302
 8005bbc:	f7fc ffe0 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8005bc0:	2134      	movs	r1, #52	; 0x34
 8005bc2:	f24d 3003 	movw	r0, #54019	; 0xd303
 8005bc6:	f7fc ffdb 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8005bca:	2100      	movs	r1, #0
 8005bcc:	f24d 3004 	movw	r0, #54020	; 0xd304
 8005bd0:	f7fc ffd6 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8005bd4:	213a      	movs	r1, #58	; 0x3a
 8005bd6:	f24d 3005 	movw	r0, #54021	; 0xd305
 8005bda:	f7fc ffd1 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8005bde:	2100      	movs	r1, #0
 8005be0:	f24d 3006 	movw	r0, #54022	; 0xd306
 8005be4:	f7fc ffcc 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8005be8:	214a      	movs	r1, #74	; 0x4a
 8005bea:	f24d 3007 	movw	r0, #54023	; 0xd307
 8005bee:	f7fc ffc7 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	f24d 3008 	movw	r0, #54024	; 0xd308
 8005bf8:	f7fc ffc2 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8005bfc:	215c      	movs	r1, #92	; 0x5c
 8005bfe:	f24d 3009 	movw	r0, #54025	; 0xd309
 8005c02:	f7fc ffbd 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8005c06:	2100      	movs	r1, #0
 8005c08:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8005c0c:	f7fc ffb8 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8005c10:	2181      	movs	r1, #129	; 0x81
 8005c12:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8005c16:	f7fc ffb3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8005c20:	f7fc ffae 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8005c24:	21a6      	movs	r1, #166	; 0xa6
 8005c26:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8005c2a:	f7fc ffa9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8005c2e:	2100      	movs	r1, #0
 8005c30:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8005c34:	f7fc ffa4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8005c38:	21e5      	movs	r1, #229	; 0xe5
 8005c3a:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8005c3e:	f7fc ff9f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8005c42:	2101      	movs	r1, #1
 8005c44:	f24d 3010 	movw	r0, #54032	; 0xd310
 8005c48:	f7fc ff9a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8005c4c:	2113      	movs	r1, #19
 8005c4e:	f24d 3011 	movw	r0, #54033	; 0xd311
 8005c52:	f7fc ff95 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8005c56:	2101      	movs	r1, #1
 8005c58:	f24d 3012 	movw	r0, #54034	; 0xd312
 8005c5c:	f7fc ff90 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8005c60:	2154      	movs	r1, #84	; 0x54
 8005c62:	f24d 3013 	movw	r0, #54035	; 0xd313
 8005c66:	f7fc ff8b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8005c70:	f7fc ff86 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8005c74:	2182      	movs	r1, #130	; 0x82
 8005c76:	f24d 3015 	movw	r0, #54037	; 0xd315
 8005c7a:	f7fc ff81 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8005c7e:	2101      	movs	r1, #1
 8005c80:	f24d 3016 	movw	r0, #54038	; 0xd316
 8005c84:	f7fc ff7c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8005c88:	21ca      	movs	r1, #202	; 0xca
 8005c8a:	f24d 3017 	movw	r0, #54039	; 0xd317
 8005c8e:	f7fc ff77 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8005c92:	2102      	movs	r1, #2
 8005c94:	f24d 3018 	movw	r0, #54040	; 0xd318
 8005c98:	f7fc ff72 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8005ca2:	f7fc ff6d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8005ca6:	2102      	movs	r1, #2
 8005ca8:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8005cac:	f7fc ff68 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8005cb6:	f7fc ff63 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8005cba:	2102      	movs	r1, #2
 8005cbc:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8005cc0:	f7fc ff5e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8005cc4:	2134      	movs	r1, #52	; 0x34
 8005cc6:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8005cca:	f7fc ff59 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8005cce:	2102      	movs	r1, #2
 8005cd0:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8005cd4:	f7fc ff54 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8005cd8:	2167      	movs	r1, #103	; 0x67
 8005cda:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8005cde:	f7fc ff4f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8005ce2:	2102      	movs	r1, #2
 8005ce4:	f24d 3020 	movw	r0, #54048	; 0xd320
 8005ce8:	f7fc ff4a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8005cec:	2184      	movs	r1, #132	; 0x84
 8005cee:	f24d 3021 	movw	r0, #54049	; 0xd321
 8005cf2:	f7fc ff45 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8005cf6:	2102      	movs	r1, #2
 8005cf8:	f24d 3022 	movw	r0, #54050	; 0xd322
 8005cfc:	f7fc ff40 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8005d00:	21a4      	movs	r1, #164	; 0xa4
 8005d02:	f24d 3023 	movw	r0, #54051	; 0xd323
 8005d06:	f7fc ff3b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8005d0a:	2102      	movs	r1, #2
 8005d0c:	f24d 3024 	movw	r0, #54052	; 0xd324
 8005d10:	f7fc ff36 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8005d14:	21b7      	movs	r1, #183	; 0xb7
 8005d16:	f24d 3025 	movw	r0, #54053	; 0xd325
 8005d1a:	f7fc ff31 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8005d1e:	2102      	movs	r1, #2
 8005d20:	f24d 3026 	movw	r0, #54054	; 0xd326
 8005d24:	f7fc ff2c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8005d28:	21cf      	movs	r1, #207	; 0xcf
 8005d2a:	f24d 3027 	movw	r0, #54055	; 0xd327
 8005d2e:	f7fc ff27 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8005d32:	2102      	movs	r1, #2
 8005d34:	f24d 3028 	movw	r0, #54056	; 0xd328
 8005d38:	f7fc ff22 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8005d3c:	21de      	movs	r1, #222	; 0xde
 8005d3e:	f24d 3029 	movw	r0, #54057	; 0xd329
 8005d42:	f7fc ff1d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8005d46:	2102      	movs	r1, #2
 8005d48:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8005d4c:	f7fc ff18 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8005d50:	21f2      	movs	r1, #242	; 0xf2
 8005d52:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8005d56:	f7fc ff13 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8005d5a:	2102      	movs	r1, #2
 8005d5c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8005d60:	f7fc ff0e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8005d64:	21fe      	movs	r1, #254	; 0xfe
 8005d66:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8005d6a:	f7fc ff09 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8005d6e:	2103      	movs	r1, #3
 8005d70:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8005d74:	f7fc ff04 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8005d78:	2110      	movs	r1, #16
 8005d7a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8005d7e:	f7fc feff 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8005d82:	2103      	movs	r1, #3
 8005d84:	f24d 3030 	movw	r0, #54064	; 0xd330
 8005d88:	f7fc fefa 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8005d8c:	2133      	movs	r1, #51	; 0x33
 8005d8e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8005d92:	f7fc fef5 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8005d96:	2103      	movs	r1, #3
 8005d98:	f24d 3032 	movw	r0, #54066	; 0xd332
 8005d9c:	f7fc fef0 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8005da0:	216d      	movs	r1, #109	; 0x6d
 8005da2:	f24d 3033 	movw	r0, #54067	; 0xd333
 8005da6:	f7fc feeb 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8005daa:	2100      	movs	r1, #0
 8005dac:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8005db0:	f7fc fee6 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8005db4:	2133      	movs	r1, #51	; 0x33
 8005db6:	f24d 4001 	movw	r0, #54273	; 0xd401
 8005dba:	f7fc fee1 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	f24d 4002 	movw	r0, #54274	; 0xd402
 8005dc4:	f7fc fedc 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8005dc8:	2134      	movs	r1, #52	; 0x34
 8005dca:	f24d 4003 	movw	r0, #54275	; 0xd403
 8005dce:	f7fc fed7 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	f24d 4004 	movw	r0, #54276	; 0xd404
 8005dd8:	f7fc fed2 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8005ddc:	213a      	movs	r1, #58	; 0x3a
 8005dde:	f24d 4005 	movw	r0, #54277	; 0xd405
 8005de2:	f7fc fecd 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8005de6:	2100      	movs	r1, #0
 8005de8:	f24d 4006 	movw	r0, #54278	; 0xd406
 8005dec:	f7fc fec8 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8005df0:	214a      	movs	r1, #74	; 0x4a
 8005df2:	f24d 4007 	movw	r0, #54279	; 0xd407
 8005df6:	f7fc fec3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	f24d 4008 	movw	r0, #54280	; 0xd408
 8005e00:	f7fc febe 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8005e04:	215c      	movs	r1, #92	; 0x5c
 8005e06:	f24d 4009 	movw	r0, #54281	; 0xd409
 8005e0a:	f7fc feb9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8005e0e:	2100      	movs	r1, #0
 8005e10:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8005e14:	f7fc feb4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8005e18:	2181      	movs	r1, #129	; 0x81
 8005e1a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8005e1e:	f7fc feaf 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8005e22:	2100      	movs	r1, #0
 8005e24:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8005e28:	f7fc feaa 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8005e2c:	21a6      	movs	r1, #166	; 0xa6
 8005e2e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8005e32:	f7fc fea5 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8005e36:	2100      	movs	r1, #0
 8005e38:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8005e3c:	f7fc fea0 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8005e40:	21e5      	movs	r1, #229	; 0xe5
 8005e42:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8005e46:	f7fc fe9b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	f24d 4010 	movw	r0, #54288	; 0xd410
 8005e50:	f7fc fe96 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8005e54:	2113      	movs	r1, #19
 8005e56:	f24d 4011 	movw	r0, #54289	; 0xd411
 8005e5a:	f7fc fe91 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8005e5e:	2101      	movs	r1, #1
 8005e60:	f24d 4012 	movw	r0, #54290	; 0xd412
 8005e64:	f7fc fe8c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8005e68:	2154      	movs	r1, #84	; 0x54
 8005e6a:	f24d 4013 	movw	r0, #54291	; 0xd413
 8005e6e:	f7fc fe87 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8005e72:	2101      	movs	r1, #1
 8005e74:	f24d 4014 	movw	r0, #54292	; 0xd414
 8005e78:	f7fc fe82 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8005e7c:	2182      	movs	r1, #130	; 0x82
 8005e7e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8005e82:	f7fc fe7d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8005e86:	2101      	movs	r1, #1
 8005e88:	f24d 4016 	movw	r0, #54294	; 0xd416
 8005e8c:	f7fc fe78 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8005e90:	21ca      	movs	r1, #202	; 0xca
 8005e92:	f24d 4017 	movw	r0, #54295	; 0xd417
 8005e96:	f7fc fe73 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8005e9a:	2102      	movs	r1, #2
 8005e9c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8005ea0:	f7fc fe6e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	f24d 4019 	movw	r0, #54297	; 0xd419
 8005eaa:	f7fc fe69 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8005eae:	2102      	movs	r1, #2
 8005eb0:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8005eb4:	f7fc fe64 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8005eb8:	2101      	movs	r1, #1
 8005eba:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8005ebe:	f7fc fe5f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8005ec2:	2102      	movs	r1, #2
 8005ec4:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8005ec8:	f7fc fe5a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8005ecc:	2134      	movs	r1, #52	; 0x34
 8005ece:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8005ed2:	f7fc fe55 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8005ed6:	2102      	movs	r1, #2
 8005ed8:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8005edc:	f7fc fe50 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8005ee0:	2167      	movs	r1, #103	; 0x67
 8005ee2:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8005ee6:	f7fc fe4b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8005eea:	2102      	movs	r1, #2
 8005eec:	f24d 4020 	movw	r0, #54304	; 0xd420
 8005ef0:	f7fc fe46 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8005ef4:	2184      	movs	r1, #132	; 0x84
 8005ef6:	f24d 4021 	movw	r0, #54305	; 0xd421
 8005efa:	f7fc fe41 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8005efe:	2102      	movs	r1, #2
 8005f00:	f24d 4022 	movw	r0, #54306	; 0xd422
 8005f04:	f7fc fe3c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8005f08:	21a4      	movs	r1, #164	; 0xa4
 8005f0a:	f24d 4023 	movw	r0, #54307	; 0xd423
 8005f0e:	f7fc fe37 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8005f12:	2102      	movs	r1, #2
 8005f14:	f24d 4024 	movw	r0, #54308	; 0xd424
 8005f18:	f7fc fe32 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8005f1c:	21b7      	movs	r1, #183	; 0xb7
 8005f1e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8005f22:	f7fc fe2d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8005f26:	2102      	movs	r1, #2
 8005f28:	f24d 4026 	movw	r0, #54310	; 0xd426
 8005f2c:	f7fc fe28 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8005f30:	21cf      	movs	r1, #207	; 0xcf
 8005f32:	f24d 4027 	movw	r0, #54311	; 0xd427
 8005f36:	f7fc fe23 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8005f3a:	2102      	movs	r1, #2
 8005f3c:	f24d 4028 	movw	r0, #54312	; 0xd428
 8005f40:	f7fc fe1e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8005f44:	21de      	movs	r1, #222	; 0xde
 8005f46:	f24d 4029 	movw	r0, #54313	; 0xd429
 8005f4a:	f7fc fe19 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8005f4e:	2102      	movs	r1, #2
 8005f50:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8005f54:	f7fc fe14 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8005f58:	21f2      	movs	r1, #242	; 0xf2
 8005f5a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8005f5e:	f7fc fe0f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8005f62:	2102      	movs	r1, #2
 8005f64:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8005f68:	f7fc fe0a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8005f6c:	21fe      	movs	r1, #254	; 0xfe
 8005f6e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8005f72:	f7fc fe05 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8005f76:	2103      	movs	r1, #3
 8005f78:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8005f7c:	f7fc fe00 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8005f80:	2110      	movs	r1, #16
 8005f82:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8005f86:	f7fc fdfb 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8005f8a:	2103      	movs	r1, #3
 8005f8c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8005f90:	f7fc fdf6 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8005f94:	2133      	movs	r1, #51	; 0x33
 8005f96:	f24d 4031 	movw	r0, #54321	; 0xd431
 8005f9a:	f7fc fdf1 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8005f9e:	2103      	movs	r1, #3
 8005fa0:	f24d 4032 	movw	r0, #54322	; 0xd432
 8005fa4:	f7fc fdec 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8005fa8:	216d      	movs	r1, #109	; 0x6d
 8005faa:	f24d 4033 	movw	r0, #54323	; 0xd433
 8005fae:	f7fc fde7 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8005fb8:	f7fc fde2 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8005fbc:	2133      	movs	r1, #51	; 0x33
 8005fbe:	f24d 5001 	movw	r0, #54529	; 0xd501
 8005fc2:	f7fc fddd 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	f24d 5002 	movw	r0, #54530	; 0xd502
 8005fcc:	f7fc fdd8 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8005fd0:	2134      	movs	r1, #52	; 0x34
 8005fd2:	f24d 5003 	movw	r0, #54531	; 0xd503
 8005fd6:	f7fc fdd3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8005fda:	2100      	movs	r1, #0
 8005fdc:	f24d 5004 	movw	r0, #54532	; 0xd504
 8005fe0:	f7fc fdce 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8005fe4:	213a      	movs	r1, #58	; 0x3a
 8005fe6:	f24d 5005 	movw	r0, #54533	; 0xd505
 8005fea:	f7fc fdc9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8005fee:	2100      	movs	r1, #0
 8005ff0:	f24d 5006 	movw	r0, #54534	; 0xd506
 8005ff4:	f7fc fdc4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8005ff8:	214a      	movs	r1, #74	; 0x4a
 8005ffa:	f24d 5007 	movw	r0, #54535	; 0xd507
 8005ffe:	f7fc fdbf 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8006002:	2100      	movs	r1, #0
 8006004:	f24d 5008 	movw	r0, #54536	; 0xd508
 8006008:	f7fc fdba 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 800600c:	215c      	movs	r1, #92	; 0x5c
 800600e:	f24d 5009 	movw	r0, #54537	; 0xd509
 8006012:	f7fc fdb5 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8006016:	2100      	movs	r1, #0
 8006018:	f24d 500a 	movw	r0, #54538	; 0xd50a
 800601c:	f7fc fdb0 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8006020:	2181      	movs	r1, #129	; 0x81
 8006022:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8006026:	f7fc fdab 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 800602a:	2100      	movs	r1, #0
 800602c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8006030:	f7fc fda6 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8006034:	21a6      	movs	r1, #166	; 0xa6
 8006036:	f24d 500d 	movw	r0, #54541	; 0xd50d
 800603a:	f7fc fda1 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 800603e:	2100      	movs	r1, #0
 8006040:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8006044:	f7fc fd9c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8006048:	21e5      	movs	r1, #229	; 0xe5
 800604a:	f24d 500f 	movw	r0, #54543	; 0xd50f
 800604e:	f7fc fd97 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8006052:	2101      	movs	r1, #1
 8006054:	f24d 5010 	movw	r0, #54544	; 0xd510
 8006058:	f7fc fd92 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 800605c:	2113      	movs	r1, #19
 800605e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8006062:	f7fc fd8d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8006066:	2101      	movs	r1, #1
 8006068:	f24d 5012 	movw	r0, #54546	; 0xd512
 800606c:	f7fc fd88 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8006070:	2154      	movs	r1, #84	; 0x54
 8006072:	f24d 5013 	movw	r0, #54547	; 0xd513
 8006076:	f7fc fd83 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 800607a:	2101      	movs	r1, #1
 800607c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8006080:	f7fc fd7e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8006084:	2182      	movs	r1, #130	; 0x82
 8006086:	f24d 5015 	movw	r0, #54549	; 0xd515
 800608a:	f7fc fd79 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 800608e:	2101      	movs	r1, #1
 8006090:	f24d 5016 	movw	r0, #54550	; 0xd516
 8006094:	f7fc fd74 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8006098:	21ca      	movs	r1, #202	; 0xca
 800609a:	f24d 5017 	movw	r0, #54551	; 0xd517
 800609e:	f7fc fd6f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 80060a2:	2102      	movs	r1, #2
 80060a4:	f24d 5018 	movw	r0, #54552	; 0xd518
 80060a8:	f7fc fd6a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 80060ac:	2100      	movs	r1, #0
 80060ae:	f24d 5019 	movw	r0, #54553	; 0xd519
 80060b2:	f7fc fd65 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 80060b6:	2102      	movs	r1, #2
 80060b8:	f24d 501a 	movw	r0, #54554	; 0xd51a
 80060bc:	f7fc fd60 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 80060c0:	2101      	movs	r1, #1
 80060c2:	f24d 501b 	movw	r0, #54555	; 0xd51b
 80060c6:	f7fc fd5b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 80060ca:	2102      	movs	r1, #2
 80060cc:	f24d 501c 	movw	r0, #54556	; 0xd51c
 80060d0:	f7fc fd56 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 80060d4:	2134      	movs	r1, #52	; 0x34
 80060d6:	f24d 501d 	movw	r0, #54557	; 0xd51d
 80060da:	f7fc fd51 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 80060de:	2102      	movs	r1, #2
 80060e0:	f24d 501e 	movw	r0, #54558	; 0xd51e
 80060e4:	f7fc fd4c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 80060e8:	2167      	movs	r1, #103	; 0x67
 80060ea:	f24d 501f 	movw	r0, #54559	; 0xd51f
 80060ee:	f7fc fd47 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 80060f2:	2102      	movs	r1, #2
 80060f4:	f24d 5020 	movw	r0, #54560	; 0xd520
 80060f8:	f7fc fd42 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 80060fc:	2184      	movs	r1, #132	; 0x84
 80060fe:	f24d 5021 	movw	r0, #54561	; 0xd521
 8006102:	f7fc fd3d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8006106:	2102      	movs	r1, #2
 8006108:	f24d 5022 	movw	r0, #54562	; 0xd522
 800610c:	f7fc fd38 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8006110:	21a4      	movs	r1, #164	; 0xa4
 8006112:	f24d 5023 	movw	r0, #54563	; 0xd523
 8006116:	f7fc fd33 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 800611a:	2102      	movs	r1, #2
 800611c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8006120:	f7fc fd2e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8006124:	21b7      	movs	r1, #183	; 0xb7
 8006126:	f24d 5025 	movw	r0, #54565	; 0xd525
 800612a:	f7fc fd29 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 800612e:	2102      	movs	r1, #2
 8006130:	f24d 5026 	movw	r0, #54566	; 0xd526
 8006134:	f7fc fd24 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8006138:	21cf      	movs	r1, #207	; 0xcf
 800613a:	f24d 5027 	movw	r0, #54567	; 0xd527
 800613e:	f7fc fd1f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8006142:	2102      	movs	r1, #2
 8006144:	f24d 5028 	movw	r0, #54568	; 0xd528
 8006148:	f7fc fd1a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 800614c:	21de      	movs	r1, #222	; 0xde
 800614e:	f24d 5029 	movw	r0, #54569	; 0xd529
 8006152:	f7fc fd15 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8006156:	2102      	movs	r1, #2
 8006158:	f24d 502a 	movw	r0, #54570	; 0xd52a
 800615c:	f7fc fd10 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8006160:	21f2      	movs	r1, #242	; 0xf2
 8006162:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8006166:	f7fc fd0b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 800616a:	2102      	movs	r1, #2
 800616c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8006170:	f7fc fd06 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8006174:	21fe      	movs	r1, #254	; 0xfe
 8006176:	f24d 502d 	movw	r0, #54573	; 0xd52d
 800617a:	f7fc fd01 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 800617e:	2103      	movs	r1, #3
 8006180:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8006184:	f7fc fcfc 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8006188:	2110      	movs	r1, #16
 800618a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 800618e:	f7fc fcf7 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8006192:	2103      	movs	r1, #3
 8006194:	f24d 5030 	movw	r0, #54576	; 0xd530
 8006198:	f7fc fcf2 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 800619c:	2133      	movs	r1, #51	; 0x33
 800619e:	f24d 5031 	movw	r0, #54577	; 0xd531
 80061a2:	f7fc fced 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 80061a6:	2103      	movs	r1, #3
 80061a8:	f24d 5032 	movw	r0, #54578	; 0xd532
 80061ac:	f7fc fce8 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 80061b0:	216d      	movs	r1, #109	; 0x6d
 80061b2:	f24d 5033 	movw	r0, #54579	; 0xd533
 80061b6:	f7fc fce3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 80061ba:	2100      	movs	r1, #0
 80061bc:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 80061c0:	f7fc fcde 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 80061c4:	2133      	movs	r1, #51	; 0x33
 80061c6:	f24d 6001 	movw	r0, #54785	; 0xd601
 80061ca:	f7fc fcd9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 80061ce:	2100      	movs	r1, #0
 80061d0:	f24d 6002 	movw	r0, #54786	; 0xd602
 80061d4:	f7fc fcd4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 80061d8:	2134      	movs	r1, #52	; 0x34
 80061da:	f24d 6003 	movw	r0, #54787	; 0xd603
 80061de:	f7fc fccf 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 80061e2:	2100      	movs	r1, #0
 80061e4:	f24d 6004 	movw	r0, #54788	; 0xd604
 80061e8:	f7fc fcca 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 80061ec:	213a      	movs	r1, #58	; 0x3a
 80061ee:	f24d 6005 	movw	r0, #54789	; 0xd605
 80061f2:	f7fc fcc5 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 80061f6:	2100      	movs	r1, #0
 80061f8:	f24d 6006 	movw	r0, #54790	; 0xd606
 80061fc:	f7fc fcc0 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8006200:	214a      	movs	r1, #74	; 0x4a
 8006202:	f24d 6007 	movw	r0, #54791	; 0xd607
 8006206:	f7fc fcbb 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 800620a:	2100      	movs	r1, #0
 800620c:	f24d 6008 	movw	r0, #54792	; 0xd608
 8006210:	f7fc fcb6 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8006214:	215c      	movs	r1, #92	; 0x5c
 8006216:	f24d 6009 	movw	r0, #54793	; 0xd609
 800621a:	f7fc fcb1 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 800621e:	2100      	movs	r1, #0
 8006220:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8006224:	f7fc fcac 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8006228:	2181      	movs	r1, #129	; 0x81
 800622a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 800622e:	f7fc fca7 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8006232:	2100      	movs	r1, #0
 8006234:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8006238:	f7fc fca2 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 800623c:	21a6      	movs	r1, #166	; 0xa6
 800623e:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8006242:	f7fc fc9d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8006246:	2100      	movs	r1, #0
 8006248:	f24d 600e 	movw	r0, #54798	; 0xd60e
 800624c:	f7fc fc98 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8006250:	21e5      	movs	r1, #229	; 0xe5
 8006252:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8006256:	f7fc fc93 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 800625a:	2101      	movs	r1, #1
 800625c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8006260:	f7fc fc8e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8006264:	2113      	movs	r1, #19
 8006266:	f24d 6011 	movw	r0, #54801	; 0xd611
 800626a:	f7fc fc89 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 800626e:	2101      	movs	r1, #1
 8006270:	f24d 6012 	movw	r0, #54802	; 0xd612
 8006274:	f7fc fc84 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8006278:	2154      	movs	r1, #84	; 0x54
 800627a:	f24d 6013 	movw	r0, #54803	; 0xd613
 800627e:	f7fc fc7f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8006282:	2101      	movs	r1, #1
 8006284:	f24d 6014 	movw	r0, #54804	; 0xd614
 8006288:	f7fc fc7a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 800628c:	2182      	movs	r1, #130	; 0x82
 800628e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8006292:	f7fc fc75 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8006296:	2101      	movs	r1, #1
 8006298:	f24d 6016 	movw	r0, #54806	; 0xd616
 800629c:	f7fc fc70 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 80062a0:	21ca      	movs	r1, #202	; 0xca
 80062a2:	f24d 6017 	movw	r0, #54807	; 0xd617
 80062a6:	f7fc fc6b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 80062aa:	2102      	movs	r1, #2
 80062ac:	f24d 6018 	movw	r0, #54808	; 0xd618
 80062b0:	f7fc fc66 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 80062b4:	2100      	movs	r1, #0
 80062b6:	f24d 6019 	movw	r0, #54809	; 0xd619
 80062ba:	f7fc fc61 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 80062be:	2102      	movs	r1, #2
 80062c0:	f24d 601a 	movw	r0, #54810	; 0xd61a
 80062c4:	f7fc fc5c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 80062c8:	2101      	movs	r1, #1
 80062ca:	f24d 601b 	movw	r0, #54811	; 0xd61b
 80062ce:	f7fc fc57 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 80062d2:	2102      	movs	r1, #2
 80062d4:	f24d 601c 	movw	r0, #54812	; 0xd61c
 80062d8:	f7fc fc52 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 80062dc:	2134      	movs	r1, #52	; 0x34
 80062de:	f24d 601d 	movw	r0, #54813	; 0xd61d
 80062e2:	f7fc fc4d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 80062e6:	2102      	movs	r1, #2
 80062e8:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80062ec:	f7fc fc48 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 80062f0:	2167      	movs	r1, #103	; 0x67
 80062f2:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80062f6:	f7fc fc43 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 80062fa:	2102      	movs	r1, #2
 80062fc:	f24d 6020 	movw	r0, #54816	; 0xd620
 8006300:	f7fc fc3e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 8006304:	2184      	movs	r1, #132	; 0x84
 8006306:	f24d 6021 	movw	r0, #54817	; 0xd621
 800630a:	f7fc fc39 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 800630e:	2102      	movs	r1, #2
 8006310:	f24d 6022 	movw	r0, #54818	; 0xd622
 8006314:	f7fc fc34 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8006318:	21a4      	movs	r1, #164	; 0xa4
 800631a:	f24d 6023 	movw	r0, #54819	; 0xd623
 800631e:	f7fc fc2f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 8006322:	2102      	movs	r1, #2
 8006324:	f24d 6024 	movw	r0, #54820	; 0xd624
 8006328:	f7fc fc2a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 800632c:	21b7      	movs	r1, #183	; 0xb7
 800632e:	f24d 6025 	movw	r0, #54821	; 0xd625
 8006332:	f7fc fc25 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 8006336:	2102      	movs	r1, #2
 8006338:	f24d 6026 	movw	r0, #54822	; 0xd626
 800633c:	f7fc fc20 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8006340:	21cf      	movs	r1, #207	; 0xcf
 8006342:	f24d 6027 	movw	r0, #54823	; 0xd627
 8006346:	f7fc fc1b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 800634a:	2102      	movs	r1, #2
 800634c:	f24d 6028 	movw	r0, #54824	; 0xd628
 8006350:	f7fc fc16 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 8006354:	21de      	movs	r1, #222	; 0xde
 8006356:	f24d 6029 	movw	r0, #54825	; 0xd629
 800635a:	f7fc fc11 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 800635e:	2102      	movs	r1, #2
 8006360:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8006364:	f7fc fc0c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8006368:	21f2      	movs	r1, #242	; 0xf2
 800636a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800636e:	f7fc fc07 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8006372:	2102      	movs	r1, #2
 8006374:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8006378:	f7fc fc02 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 800637c:	21fe      	movs	r1, #254	; 0xfe
 800637e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8006382:	f7fc fbfd 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8006386:	2103      	movs	r1, #3
 8006388:	f24d 602e 	movw	r0, #54830	; 0xd62e
 800638c:	f7fc fbf8 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8006390:	2110      	movs	r1, #16
 8006392:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8006396:	f7fc fbf3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 800639a:	2103      	movs	r1, #3
 800639c:	f24d 6030 	movw	r0, #54832	; 0xd630
 80063a0:	f7fc fbee 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 80063a4:	2133      	movs	r1, #51	; 0x33
 80063a6:	f24d 6031 	movw	r0, #54833	; 0xd631
 80063aa:	f7fc fbe9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 80063ae:	2103      	movs	r1, #3
 80063b0:	f24d 6032 	movw	r0, #54834	; 0xd632
 80063b4:	f7fc fbe4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 80063b8:	216d      	movs	r1, #109	; 0x6d
 80063ba:	f24d 6033 	movw	r0, #54835	; 0xd633
 80063be:	f7fc fbdf 	bl	8002b80 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 80063c2:	2155      	movs	r1, #85	; 0x55
 80063c4:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80063c8:	f7fc fbda 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 80063cc:	21aa      	movs	r1, #170	; 0xaa
 80063ce:	f24f 0001 	movw	r0, #61441	; 0xf001
 80063d2:	f7fc fbd5 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 80063d6:	2152      	movs	r1, #82	; 0x52
 80063d8:	f24f 0002 	movw	r0, #61442	; 0xf002
 80063dc:	f7fc fbd0 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80063e0:	2108      	movs	r1, #8
 80063e2:	f24f 0003 	movw	r0, #61443	; 0xf003
 80063e6:	f7fc fbcb 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 80063ea:	2100      	movs	r1, #0
 80063ec:	f24f 0004 	movw	r0, #61444	; 0xf004
 80063f0:	f7fc fbc6 	bl	8002b80 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 80063f4:	21cc      	movs	r1, #204	; 0xcc
 80063f6:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80063fa:	f7fc fbc1 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 80063fe:	2100      	movs	r1, #0
 8006400:	f24b 1001 	movw	r0, #45313	; 0xb101
 8006404:	f7fc fbbc 	bl	8002b80 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8006408:	2105      	movs	r1, #5
 800640a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800640e:	f7fc fbb7 	bl	8002b80 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 8006412:	2170      	movs	r1, #112	; 0x70
 8006414:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8006418:	f7fc fbb2 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 800641c:	2170      	movs	r1, #112	; 0x70
 800641e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8006422:	f7fc fbad 	bl	8002b80 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 8006426:	2101      	movs	r1, #1
 8006428:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800642c:	f7fc fba8 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8006430:	2103      	movs	r1, #3
 8006432:	f64b 0001 	movw	r0, #47105	; 0xb801
 8006436:	f7fc fba3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 800643a:	2103      	movs	r1, #3
 800643c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8006440:	f7fc fb9e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 8006444:	2103      	movs	r1, #3
 8006446:	f64b 0003 	movw	r0, #47107	; 0xb803
 800644a:	f7fc fb99 	bl	8002b80 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 800644e:	2102      	movs	r1, #2
 8006450:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8006454:	f7fc fb94 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8006458:	2100      	movs	r1, #0
 800645a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800645e:	f7fc fb8f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8006462:	2100      	movs	r1, #0
 8006464:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8006468:	f7fc fb8a 	bl	8002b80 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 800646c:	21d0      	movs	r1, #208	; 0xd0
 800646e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8006472:	f7fc fb85 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8006476:	2102      	movs	r1, #2
 8006478:	f64c 1001 	movw	r0, #51457	; 0xc901
 800647c:	f7fc fb80 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8006480:	2150      	movs	r1, #80	; 0x50
 8006482:	f64c 1002 	movw	r0, #51458	; 0xc902
 8006486:	f7fc fb7b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 800648a:	2150      	movs	r1, #80	; 0x50
 800648c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8006490:	f7fc fb76 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8006494:	2150      	movs	r1, #80	; 0x50
 8006496:	f64c 1004 	movw	r0, #51460	; 0xc904
 800649a:	f7fc fb71 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 800649e:	2100      	movs	r1, #0
 80064a0:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 80064a4:	f7fc fb6c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 80064a8:	2155      	movs	r1, #85	; 0x55
 80064aa:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 80064ae:	f7fc fb67 	bl	8002b80 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 80064b2:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80064b6:	f7fc fad7 	bl	8002a68 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 80064ba:	2001      	movs	r0, #1
 80064bc:	f7fa fb04 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x2900);
 80064c0:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 80064c4:	f7fc fad0 	bl	8002a68 <LCD_WR_REG>
 80064c8:	f001 bd18 	b.w	8007efc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 80064cc:	4bec      	ldr	r3, [pc, #944]	; (8006880 <LCD_Init+0x27b8>)
 80064ce:	889b      	ldrh	r3, [r3, #4]
 80064d0:	f249 3225 	movw	r2, #37669	; 0x9325
 80064d4:	4293      	cmp	r3, r2
 80064d6:	f040 80d7 	bne.w	8006688 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 80064da:	f647 01f0 	movw	r1, #30960	; 0x78f0
 80064de:	20e5      	movs	r0, #229	; 0xe5
 80064e0:	f7fc fb4e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 80064e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064e8:	2001      	movs	r0, #1
 80064ea:	f7fc fb49 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80064ee:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80064f2:	2002      	movs	r0, #2
 80064f4:	f7fc fb44 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80064f8:	f241 0130 	movw	r1, #4144	; 0x1030
 80064fc:	2003      	movs	r0, #3
 80064fe:	f7fc fb3f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8006502:	2100      	movs	r1, #0
 8006504:	2004      	movs	r0, #4
 8006506:	f7fc fb3b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800650a:	f240 2102 	movw	r1, #514	; 0x202
 800650e:	2008      	movs	r0, #8
 8006510:	f7fc fb36 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8006514:	2100      	movs	r1, #0
 8006516:	2009      	movs	r0, #9
 8006518:	f7fc fb32 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 800651c:	2100      	movs	r1, #0
 800651e:	200a      	movs	r0, #10
 8006520:	f7fc fb2e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8006524:	2100      	movs	r1, #0
 8006526:	200c      	movs	r0, #12
 8006528:	f7fc fb2a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 800652c:	2100      	movs	r1, #0
 800652e:	200d      	movs	r0, #13
 8006530:	f7fc fb26 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8006534:	2100      	movs	r1, #0
 8006536:	200f      	movs	r0, #15
 8006538:	f7fc fb22 	bl	8002b80 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 800653c:	2100      	movs	r1, #0
 800653e:	2010      	movs	r0, #16
 8006540:	f7fc fb1e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8006544:	2107      	movs	r1, #7
 8006546:	2011      	movs	r0, #17
 8006548:	f7fc fb1a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800654c:	2100      	movs	r1, #0
 800654e:	2012      	movs	r0, #18
 8006550:	f7fc fb16 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8006554:	2100      	movs	r1, #0
 8006556:	2013      	movs	r0, #19
 8006558:	f7fc fb12 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 800655c:	2100      	movs	r1, #0
 800655e:	2007      	movs	r0, #7
 8006560:	f7fc fb0e 	bl	8002b80 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8006564:	f241 6190 	movw	r1, #5776	; 0x1690
 8006568:	2010      	movs	r0, #16
 800656a:	f7fc fb09 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800656e:	f240 2127 	movw	r1, #551	; 0x227
 8006572:	2011      	movs	r0, #17
 8006574:	f7fc fb04 	bl	8002b80 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8006578:	219d      	movs	r1, #157	; 0x9d
 800657a:	2012      	movs	r0, #18
 800657c:	f7fc fb00 	bl	8002b80 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8006580:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8006584:	2013      	movs	r0, #19
 8006586:	f7fc fafb 	bl	8002b80 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 800658a:	2125      	movs	r1, #37	; 0x25
 800658c:	2029      	movs	r0, #41	; 0x29
 800658e:	f7fc faf7 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8006592:	210d      	movs	r1, #13
 8006594:	202b      	movs	r0, #43	; 0x2b
 8006596:	f7fc faf3 	bl	8002b80 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 800659a:	2107      	movs	r1, #7
 800659c:	2030      	movs	r0, #48	; 0x30
 800659e:	f7fc faef 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 80065a2:	f240 3103 	movw	r1, #771	; 0x303
 80065a6:	2031      	movs	r0, #49	; 0x31
 80065a8:	f7fc faea 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 80065ac:	2103      	movs	r1, #3
 80065ae:	2032      	movs	r0, #50	; 0x32
 80065b0:	f7fc fae6 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 80065b4:	f240 2106 	movw	r1, #518	; 0x206
 80065b8:	2035      	movs	r0, #53	; 0x35
 80065ba:	f7fc fae1 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 80065be:	2108      	movs	r1, #8
 80065c0:	2036      	movs	r0, #54	; 0x36
 80065c2:	f7fc fadd 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 80065c6:	f240 4106 	movw	r1, #1030	; 0x406
 80065ca:	2037      	movs	r0, #55	; 0x37
 80065cc:	f7fc fad8 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 80065d0:	f44f 7141 	mov.w	r1, #772	; 0x304
 80065d4:	2038      	movs	r0, #56	; 0x38
 80065d6:	f7fc fad3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 80065da:	2107      	movs	r1, #7
 80065dc:	2039      	movs	r0, #57	; 0x39
 80065de:	f7fc facf 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 80065e2:	f240 6102 	movw	r1, #1538	; 0x602
 80065e6:	203c      	movs	r0, #60	; 0x3c
 80065e8:	f7fc faca 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 80065ec:	2108      	movs	r1, #8
 80065ee:	203d      	movs	r0, #61	; 0x3d
 80065f0:	f7fc fac6 	bl	8002b80 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 80065f4:	2100      	movs	r1, #0
 80065f6:	2050      	movs	r0, #80	; 0x50
 80065f8:	f7fc fac2 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80065fc:	21ef      	movs	r1, #239	; 0xef
 80065fe:	2051      	movs	r0, #81	; 0x51
 8006600:	f7fc fabe 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8006604:	2100      	movs	r1, #0
 8006606:	2052      	movs	r0, #82	; 0x52
 8006608:	f7fc faba 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800660c:	f240 113f 	movw	r1, #319	; 0x13f
 8006610:	2053      	movs	r0, #83	; 0x53
 8006612:	f7fc fab5 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 8006616:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 800661a:	2060      	movs	r0, #96	; 0x60
 800661c:	f7fc fab0 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8006620:	2101      	movs	r1, #1
 8006622:	2061      	movs	r0, #97	; 0x61
 8006624:	f7fc faac 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8006628:	2100      	movs	r1, #0
 800662a:	206a      	movs	r0, #106	; 0x6a
 800662c:	f7fc faa8 	bl	8002b80 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8006630:	2100      	movs	r1, #0
 8006632:	2080      	movs	r0, #128	; 0x80
 8006634:	f7fc faa4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8006638:	2100      	movs	r1, #0
 800663a:	2081      	movs	r0, #129	; 0x81
 800663c:	f7fc faa0 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006640:	2100      	movs	r1, #0
 8006642:	2082      	movs	r0, #130	; 0x82
 8006644:	f7fc fa9c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006648:	2100      	movs	r1, #0
 800664a:	2083      	movs	r0, #131	; 0x83
 800664c:	f7fc fa98 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006650:	2100      	movs	r1, #0
 8006652:	2084      	movs	r0, #132	; 0x84
 8006654:	f7fc fa94 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006658:	2100      	movs	r1, #0
 800665a:	2085      	movs	r0, #133	; 0x85
 800665c:	f7fc fa90 	bl	8002b80 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8006660:	2110      	movs	r1, #16
 8006662:	2090      	movs	r0, #144	; 0x90
 8006664:	f7fc fa8c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006668:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800666c:	2092      	movs	r0, #146	; 0x92
 800666e:	f7fc fa87 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8006672:	f240 1133 	movw	r1, #307	; 0x133
 8006676:	2007      	movs	r0, #7
 8006678:	f7fc fa82 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 800667c:	2122      	movs	r1, #34	; 0x22
 800667e:	2000      	movs	r0, #0
 8006680:	f7fc fa7e 	bl	8002b80 <LCD_WriteReg>
 8006684:	f001 bc3a 	b.w	8007efc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8006688:	4b7d      	ldr	r3, [pc, #500]	; (8006880 <LCD_Init+0x27b8>)
 800668a:	889b      	ldrh	r3, [r3, #4]
 800668c:	f249 3228 	movw	r2, #37672	; 0x9328
 8006690:	4293      	cmp	r3, r2
 8006692:	f040 80f7 	bne.w	8006884 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8006696:	f241 018f 	movw	r1, #4239	; 0x108f
 800669a:	20ec      	movs	r0, #236	; 0xec
 800669c:	f7fc fa70 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 80066a0:	f241 2134 	movw	r1, #4660	; 0x1234
 80066a4:	20ef      	movs	r0, #239	; 0xef
 80066a6:	f7fc fa6b 	bl	8002b80 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 80066aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066ae:	2001      	movs	r0, #1
 80066b0:	f7fc fa66 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 80066b4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80066b8:	2002      	movs	r0, #2
 80066ba:	f7fc fa61 	bl	8002b80 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 80066be:	f241 0130 	movw	r1, #4144	; 0x1030
 80066c2:	2003      	movs	r0, #3
 80066c4:	f7fc fa5c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80066c8:	2100      	movs	r1, #0
 80066ca:	2004      	movs	r0, #4
 80066cc:	f7fc fa58 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80066d0:	f240 2102 	movw	r1, #514	; 0x202
 80066d4:	2008      	movs	r0, #8
 80066d6:	f7fc fa53 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80066da:	2100      	movs	r1, #0
 80066dc:	2009      	movs	r0, #9
 80066de:	f7fc fa4f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 80066e2:	2100      	movs	r1, #0
 80066e4:	200a      	movs	r0, #10
 80066e6:	f7fc fa4b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 80066ea:	2101      	movs	r1, #1
 80066ec:	200c      	movs	r0, #12
 80066ee:	f7fc fa47 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 80066f2:	2100      	movs	r1, #0
 80066f4:	200d      	movs	r0, #13
 80066f6:	f7fc fa43 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 80066fa:	2100      	movs	r1, #0
 80066fc:	200f      	movs	r0, #15
 80066fe:	f7fc fa3f 	bl	8002b80 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 8006702:	2100      	movs	r1, #0
 8006704:	2010      	movs	r0, #16
 8006706:	f7fc fa3b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800670a:	2107      	movs	r1, #7
 800670c:	2011      	movs	r0, #17
 800670e:	f7fc fa37 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8006712:	2100      	movs	r1, #0
 8006714:	2012      	movs	r0, #18
 8006716:	f7fc fa33 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800671a:	2100      	movs	r1, #0
 800671c:	2013      	movs	r0, #19
 800671e:	f7fc fa2f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 8006722:	2101      	movs	r1, #1
 8006724:	2007      	movs	r0, #7
 8006726:	f7fc fa2b 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(50);
 800672a:	2032      	movs	r0, #50	; 0x32
 800672c:	f7fa f9cc 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8006730:	f241 4190 	movw	r1, #5264	; 0x1490
 8006734:	2010      	movs	r0, #16
 8006736:	f7fc fa23 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800673a:	f240 2127 	movw	r1, #551	; 0x227
 800673e:	2011      	movs	r0, #17
 8006740:	f7fc fa1e 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(50);
 8006744:	2032      	movs	r0, #50	; 0x32
 8006746:	f7fa f9bf 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 800674a:	218a      	movs	r1, #138	; 0x8a
 800674c:	2012      	movs	r0, #18
 800674e:	f7fc fa17 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(50);
 8006752:	2032      	movs	r0, #50	; 0x32
 8006754:	f7fa f9b8 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8006758:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800675c:	2013      	movs	r0, #19
 800675e:	f7fc fa0f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8006762:	2106      	movs	r1, #6
 8006764:	2029      	movs	r0, #41	; 0x29
 8006766:	f7fc fa0b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 800676a:	210d      	movs	r1, #13
 800676c:	202b      	movs	r0, #43	; 0x2b
 800676e:	f7fc fa07 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(50);
 8006772:	2032      	movs	r0, #50	; 0x32
 8006774:	f7fa f9a8 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8006778:	2100      	movs	r1, #0
 800677a:	2020      	movs	r0, #32
 800677c:	f7fc fa00 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8006780:	2100      	movs	r1, #0
 8006782:	2021      	movs	r0, #33	; 0x21
 8006784:	f7fc f9fc 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(50);
 8006788:	2032      	movs	r0, #50	; 0x32
 800678a:	f7fa f99d 	bl	8000ac8 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 800678e:	2100      	movs	r1, #0
 8006790:	2030      	movs	r0, #48	; 0x30
 8006792:	f7fc f9f5 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8006796:	f240 6104 	movw	r1, #1540	; 0x604
 800679a:	2031      	movs	r0, #49	; 0x31
 800679c:	f7fc f9f0 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 80067a0:	f240 3105 	movw	r1, #773	; 0x305
 80067a4:	2032      	movs	r0, #50	; 0x32
 80067a6:	f7fc f9eb 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 80067aa:	2100      	movs	r1, #0
 80067ac:	2035      	movs	r0, #53	; 0x35
 80067ae:	f7fc f9e7 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 80067b2:	f640 4109 	movw	r1, #3081	; 0xc09
 80067b6:	2036      	movs	r0, #54	; 0x36
 80067b8:	f7fc f9e2 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 80067bc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80067c0:	2037      	movs	r0, #55	; 0x37
 80067c2:	f7fc f9dd 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 80067c6:	f240 3101 	movw	r1, #769	; 0x301
 80067ca:	2038      	movs	r0, #56	; 0x38
 80067cc:	f7fc f9d8 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80067d0:	f240 7107 	movw	r1, #1799	; 0x707
 80067d4:	2039      	movs	r0, #57	; 0x39
 80067d6:	f7fc f9d3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 80067da:	2100      	movs	r1, #0
 80067dc:	203c      	movs	r0, #60	; 0x3c
 80067de:	f7fc f9cf 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 80067e2:	f640 210a 	movw	r1, #2570	; 0xa0a
 80067e6:	203d      	movs	r0, #61	; 0x3d
 80067e8:	f7fc f9ca 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(50);
 80067ec:	2032      	movs	r0, #50	; 0x32
 80067ee:	f7fa f96b 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 80067f2:	2100      	movs	r1, #0
 80067f4:	2050      	movs	r0, #80	; 0x50
 80067f6:	f7fc f9c3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 80067fa:	21ef      	movs	r1, #239	; 0xef
 80067fc:	2051      	movs	r0, #81	; 0x51
 80067fe:	f7fc f9bf 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 8006802:	2100      	movs	r1, #0
 8006804:	2052      	movs	r0, #82	; 0x52
 8006806:	f7fc f9bb 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 800680a:	f240 113f 	movw	r1, #319	; 0x13f
 800680e:	2053      	movs	r0, #83	; 0x53
 8006810:	f7fc f9b6 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 8006814:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8006818:	2060      	movs	r0, #96	; 0x60
 800681a:	f7fc f9b1 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800681e:	2101      	movs	r1, #1
 8006820:	2061      	movs	r0, #97	; 0x61
 8006822:	f7fc f9ad 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8006826:	2100      	movs	r1, #0
 8006828:	206a      	movs	r0, #106	; 0x6a
 800682a:	f7fc f9a9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 800682e:	2100      	movs	r1, #0
 8006830:	2080      	movs	r0, #128	; 0x80
 8006832:	f7fc f9a5 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8006836:	2100      	movs	r1, #0
 8006838:	2081      	movs	r0, #129	; 0x81
 800683a:	f7fc f9a1 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 800683e:	2100      	movs	r1, #0
 8006840:	2082      	movs	r0, #130	; 0x82
 8006842:	f7fc f99d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006846:	2100      	movs	r1, #0
 8006848:	2083      	movs	r0, #131	; 0x83
 800684a:	f7fc f999 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 800684e:	2100      	movs	r1, #0
 8006850:	2084      	movs	r0, #132	; 0x84
 8006852:	f7fc f995 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006856:	2100      	movs	r1, #0
 8006858:	2085      	movs	r0, #133	; 0x85
 800685a:	f7fc f991 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 800685e:	2110      	movs	r1, #16
 8006860:	2090      	movs	r0, #144	; 0x90
 8006862:	f7fc f98d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006866:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800686a:	2092      	movs	r0, #146	; 0x92
 800686c:	f7fc f988 	bl	8002b80 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8006870:	f240 1133 	movw	r1, #307	; 0x133
 8006874:	2007      	movs	r0, #7
 8006876:	f7fc f983 	bl	8002b80 <LCD_WriteReg>
 800687a:	f001 bb3f 	b.w	8007efc <LCD_Init+0x3e34>
 800687e:	bf00      	nop
 8006880:	200007cc 	.word	0x200007cc
	} else if (lcddev.id == 0x9320) //测试OK.
 8006884:	4bce      	ldr	r3, [pc, #824]	; (8006bc0 <LCD_Init+0x2af8>)
 8006886:	889b      	ldrh	r3, [r3, #4]
 8006888:	f249 3220 	movw	r2, #37664	; 0x9320
 800688c:	4293      	cmp	r3, r2
 800688e:	f040 80ad 	bne.w	80069ec <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8006892:	2100      	movs	r1, #0
 8006894:	2000      	movs	r0, #0
 8006896:	f7fc f973 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 800689a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800689e:	2001      	movs	r0, #1
 80068a0:	f7fc f96e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 80068a4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80068a8:	2002      	movs	r0, #2
 80068aa:	f7fc f969 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 80068ae:	f241 0130 	movw	r1, #4144	; 0x1030
 80068b2:	2003      	movs	r0, #3
 80068b4:	f7fc f964 	bl	8002b80 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 80068b8:	2100      	movs	r1, #0
 80068ba:	2004      	movs	r0, #4
 80068bc:	f7fc f960 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 80068c0:	f240 2102 	movw	r1, #514	; 0x202
 80068c4:	2008      	movs	r0, #8
 80068c6:	f7fc f95b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 80068ca:	2100      	movs	r1, #0
 80068cc:	2009      	movs	r0, #9
 80068ce:	f7fc f957 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 80068d2:	2100      	movs	r1, #0
 80068d4:	200a      	movs	r0, #10
 80068d6:	f7fc f953 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 80068da:	2101      	movs	r1, #1
 80068dc:	200c      	movs	r0, #12
 80068de:	f7fc f94f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 80068e2:	2100      	movs	r1, #0
 80068e4:	200d      	movs	r0, #13
 80068e6:	f7fc f94b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 80068ea:	2100      	movs	r1, #0
 80068ec:	200f      	movs	r0, #15
 80068ee:	f7fc f947 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(50);
 80068f2:	2032      	movs	r0, #50	; 0x32
 80068f4:	f7fa f8e8 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 80068f8:	f240 1101 	movw	r1, #257	; 0x101
 80068fc:	2007      	movs	r0, #7
 80068fe:	f7fc f93f 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(50);
 8006902:	2032      	movs	r0, #50	; 0x32
 8006904:	f7fa f8e0 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8006908:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800690c:	2010      	movs	r0, #16
 800690e:	f7fc f937 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8006912:	2107      	movs	r1, #7
 8006914:	2011      	movs	r0, #17
 8006916:	f7fc f933 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 800691a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800691e:	2012      	movs	r0, #18
 8006920:	f7fc f92e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8006924:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8006928:	2013      	movs	r0, #19
 800692a:	f7fc f929 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 800692e:	2100      	movs	r1, #0
 8006930:	2029      	movs	r0, #41	; 0x29
 8006932:	f7fc f925 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8006936:	f244 0110 	movw	r1, #16400	; 0x4010
 800693a:	202b      	movs	r0, #43	; 0x2b
 800693c:	f7fc f920 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8006940:	2100      	movs	r1, #0
 8006942:	2050      	movs	r0, #80	; 0x50
 8006944:	f7fc f91c 	bl	8002b80 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8006948:	21ef      	movs	r1, #239	; 0xef
 800694a:	2051      	movs	r0, #81	; 0x51
 800694c:	f7fc f918 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8006950:	2100      	movs	r1, #0
 8006952:	2052      	movs	r0, #82	; 0x52
 8006954:	f7fc f914 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8006958:	f240 113f 	movw	r1, #319	; 0x13f
 800695c:	2053      	movs	r0, #83	; 0x53
 800695e:	f7fc f90f 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8006962:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006966:	2060      	movs	r0, #96	; 0x60
 8006968:	f7fc f90a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 800696c:	2101      	movs	r1, #1
 800696e:	2061      	movs	r0, #97	; 0x61
 8006970:	f7fc f906 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8006974:	2100      	movs	r1, #0
 8006976:	206a      	movs	r0, #106	; 0x6a
 8006978:	f7fc f902 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 800697c:	2100      	movs	r1, #0
 800697e:	2080      	movs	r0, #128	; 0x80
 8006980:	f7fc f8fe 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8006984:	2100      	movs	r1, #0
 8006986:	2081      	movs	r0, #129	; 0x81
 8006988:	f7fc f8fa 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 800698c:	2100      	movs	r1, #0
 800698e:	2082      	movs	r0, #130	; 0x82
 8006990:	f7fc f8f6 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8006994:	2100      	movs	r1, #0
 8006996:	2083      	movs	r0, #131	; 0x83
 8006998:	f7fc f8f2 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 800699c:	2100      	movs	r1, #0
 800699e:	2084      	movs	r0, #132	; 0x84
 80069a0:	f7fc f8ee 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 80069a4:	2100      	movs	r1, #0
 80069a6:	2085      	movs	r0, #133	; 0x85
 80069a8:	f7fc f8ea 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 80069ac:	2110      	movs	r1, #16
 80069ae:	2090      	movs	r0, #144	; 0x90
 80069b0:	f7fc f8e6 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 80069b4:	2100      	movs	r1, #0
 80069b6:	2092      	movs	r0, #146	; 0x92
 80069b8:	f7fc f8e2 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 80069bc:	2101      	movs	r1, #1
 80069be:	2093      	movs	r0, #147	; 0x93
 80069c0:	f7fc f8de 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 80069c4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80069c8:	2095      	movs	r0, #149	; 0x95
 80069ca:	f7fc f8d9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 80069ce:	2100      	movs	r1, #0
 80069d0:	2097      	movs	r0, #151	; 0x97
 80069d2:	f7fc f8d5 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 80069d6:	2100      	movs	r1, #0
 80069d8:	2098      	movs	r0, #152	; 0x98
 80069da:	f7fc f8d1 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 80069de:	f240 1173 	movw	r1, #371	; 0x173
 80069e2:	2007      	movs	r0, #7
 80069e4:	f7fc f8cc 	bl	8002b80 <LCD_WriteReg>
 80069e8:	f001 ba88 	b.w	8007efc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 80069ec:	4b74      	ldr	r3, [pc, #464]	; (8006bc0 <LCD_Init+0x2af8>)
 80069ee:	889b      	ldrh	r3, [r3, #4]
 80069f0:	f249 3231 	movw	r2, #37681	; 0x9331
 80069f4:	4293      	cmp	r3, r2
 80069f6:	f040 80e5 	bne.w	8006bc4 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 80069fa:	f241 0114 	movw	r1, #4116	; 0x1014
 80069fe:	20e7      	movs	r0, #231	; 0xe7
 8006a00:	f7fc f8be 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8006a04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a08:	2001      	movs	r0, #1
 8006a0a:	f7fc f8b9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8006a0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a12:	2002      	movs	r0, #2
 8006a14:	f7fc f8b4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8006a18:	f241 0138 	movw	r1, #4152	; 0x1038
 8006a1c:	2003      	movs	r0, #3
 8006a1e:	f7fc f8af 	bl	8002b80 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8006a22:	f240 2102 	movw	r1, #514	; 0x202
 8006a26:	2008      	movs	r0, #8
 8006a28:	f7fc f8aa 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	2009      	movs	r0, #9
 8006a30:	f7fc f8a6 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8006a34:	2100      	movs	r1, #0
 8006a36:	200a      	movs	r0, #10
 8006a38:	f7fc f8a2 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	200c      	movs	r0, #12
 8006a40:	f7fc f89e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8006a44:	2100      	movs	r1, #0
 8006a46:	200d      	movs	r0, #13
 8006a48:	f7fc f89a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	200f      	movs	r0, #15
 8006a50:	f7fc f896 	bl	8002b80 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8006a54:	2100      	movs	r1, #0
 8006a56:	2010      	movs	r0, #16
 8006a58:	f7fc f892 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8006a5c:	2107      	movs	r1, #7
 8006a5e:	2011      	movs	r0, #17
 8006a60:	f7fc f88e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8006a64:	2100      	movs	r1, #0
 8006a66:	2012      	movs	r0, #18
 8006a68:	f7fc f88a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	2013      	movs	r0, #19
 8006a70:	f7fc f886 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8006a74:	20c8      	movs	r0, #200	; 0xc8
 8006a76:	f7fa f827 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8006a7a:	f241 6190 	movw	r1, #5776	; 0x1690
 8006a7e:	2010      	movs	r0, #16
 8006a80:	f7fc f87e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8006a84:	f240 2127 	movw	r1, #551	; 0x227
 8006a88:	2011      	movs	r0, #17
 8006a8a:	f7fc f879 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8006a8e:	2032      	movs	r0, #50	; 0x32
 8006a90:	f7fa f81a 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8006a94:	210c      	movs	r1, #12
 8006a96:	2012      	movs	r0, #18
 8006a98:	f7fc f872 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8006a9c:	2032      	movs	r0, #50	; 0x32
 8006a9e:	f7fa f813 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8006aa2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006aa6:	2013      	movs	r0, #19
 8006aa8:	f7fc f86a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8006aac:	2111      	movs	r1, #17
 8006aae:	2029      	movs	r0, #41	; 0x29
 8006ab0:	f7fc f866 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8006ab4:	210b      	movs	r1, #11
 8006ab6:	202b      	movs	r0, #43	; 0x2b
 8006ab8:	f7fc f862 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8006abc:	2032      	movs	r0, #50	; 0x32
 8006abe:	f7fa f803 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	2020      	movs	r0, #32
 8006ac6:	f7fc f85b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8006aca:	f240 113f 	movw	r1, #319	; 0x13f
 8006ace:	2021      	movs	r0, #33	; 0x21
 8006ad0:	f7fc f856 	bl	8002b80 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	2030      	movs	r0, #48	; 0x30
 8006ad8:	f7fc f852 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8006adc:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006ae0:	2031      	movs	r0, #49	; 0x31
 8006ae2:	f7fc f84d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	2032      	movs	r0, #50	; 0x32
 8006aea:	f7fc f849 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8006aee:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006af2:	2035      	movs	r0, #53	; 0x35
 8006af4:	f7fc f844 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8006af8:	f241 610a 	movw	r1, #5642	; 0x160a
 8006afc:	2036      	movs	r0, #54	; 0x36
 8006afe:	f7fc f83f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8006b02:	f240 7107 	movw	r1, #1799	; 0x707
 8006b06:	2037      	movs	r0, #55	; 0x37
 8006b08:	f7fc f83a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8006b0c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006b10:	2038      	movs	r0, #56	; 0x38
 8006b12:	f7fc f835 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8006b16:	f240 7107 	movw	r1, #1799	; 0x707
 8006b1a:	2039      	movs	r0, #57	; 0x39
 8006b1c:	f7fc f830 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8006b20:	f240 4102 	movw	r1, #1026	; 0x402
 8006b24:	203c      	movs	r0, #60	; 0x3c
 8006b26:	f7fc f82b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8006b2a:	f640 410f 	movw	r1, #3087	; 0xc0f
 8006b2e:	203d      	movs	r0, #61	; 0x3d
 8006b30:	f7fc f826 	bl	8002b80 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8006b34:	2100      	movs	r1, #0
 8006b36:	2050      	movs	r0, #80	; 0x50
 8006b38:	f7fc f822 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8006b3c:	21ef      	movs	r1, #239	; 0xef
 8006b3e:	2051      	movs	r0, #81	; 0x51
 8006b40:	f7fc f81e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8006b44:	2100      	movs	r1, #0
 8006b46:	2052      	movs	r0, #82	; 0x52
 8006b48:	f7fc f81a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8006b4c:	f240 113f 	movw	r1, #319	; 0x13f
 8006b50:	2053      	movs	r0, #83	; 0x53
 8006b52:	f7fc f815 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8006b56:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006b5a:	2060      	movs	r0, #96	; 0x60
 8006b5c:	f7fc f810 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8006b60:	2101      	movs	r1, #1
 8006b62:	2061      	movs	r0, #97	; 0x61
 8006b64:	f7fc f80c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8006b68:	2100      	movs	r1, #0
 8006b6a:	206a      	movs	r0, #106	; 0x6a
 8006b6c:	f7fc f808 	bl	8002b80 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8006b70:	2100      	movs	r1, #0
 8006b72:	2080      	movs	r0, #128	; 0x80
 8006b74:	f7fc f804 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8006b78:	2100      	movs	r1, #0
 8006b7a:	2081      	movs	r0, #129	; 0x81
 8006b7c:	f7fc f800 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006b80:	2100      	movs	r1, #0
 8006b82:	2082      	movs	r0, #130	; 0x82
 8006b84:	f7fb fffc 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006b88:	2100      	movs	r1, #0
 8006b8a:	2083      	movs	r0, #131	; 0x83
 8006b8c:	f7fb fff8 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006b90:	2100      	movs	r1, #0
 8006b92:	2084      	movs	r0, #132	; 0x84
 8006b94:	f7fb fff4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006b98:	2100      	movs	r1, #0
 8006b9a:	2085      	movs	r0, #133	; 0x85
 8006b9c:	f7fb fff0 	bl	8002b80 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8006ba0:	2110      	movs	r1, #16
 8006ba2:	2090      	movs	r0, #144	; 0x90
 8006ba4:	f7fb ffec 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006ba8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006bac:	2092      	movs	r0, #146	; 0x92
 8006bae:	f7fb ffe7 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8006bb2:	f240 1133 	movw	r1, #307	; 0x133
 8006bb6:	2007      	movs	r0, #7
 8006bb8:	f7fb ffe2 	bl	8002b80 <LCD_WriteReg>
 8006bbc:	f001 b99e 	b.w	8007efc <LCD_Init+0x3e34>
 8006bc0:	200007cc 	.word	0x200007cc
	} else if (lcddev.id == 0x5408) {
 8006bc4:	4be2      	ldr	r3, [pc, #904]	; (8006f50 <LCD_Init+0x2e88>)
 8006bc6:	889b      	ldrh	r3, [r3, #4]
 8006bc8:	f245 4208 	movw	r2, #21512	; 0x5408
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	f040 80a3 	bne.w	8006d18 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8006bd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006bd6:	2001      	movs	r0, #1
 8006bd8:	f7fb ffd2 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8006bdc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006be0:	2002      	movs	r0, #2
 8006be2:	f7fb ffcd 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8006be6:	f241 0130 	movw	r1, #4144	; 0x1030
 8006bea:	2003      	movs	r0, #3
 8006bec:	f7fb ffc8 	bl	8002b80 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	2004      	movs	r0, #4
 8006bf4:	f7fb ffc4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8006bf8:	f240 2107 	movw	r1, #519	; 0x207
 8006bfc:	2008      	movs	r0, #8
 8006bfe:	f7fb ffbf 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8006c02:	2100      	movs	r1, #0
 8006c04:	2009      	movs	r0, #9
 8006c06:	f7fb ffbb 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	200a      	movs	r0, #10
 8006c0e:	f7fb ffb7 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8006c12:	2100      	movs	r1, #0
 8006c14:	200c      	movs	r0, #12
 8006c16:	f7fb ffb3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	200d      	movs	r0, #13
 8006c1e:	f7fb ffaf 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8006c22:	2100      	movs	r1, #0
 8006c24:	200f      	movs	r0, #15
 8006c26:	f7fb ffab 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(20);
 8006c2a:	2014      	movs	r0, #20
 8006c2c:	f7f9 ff4c 	bl	8000ac8 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8006c30:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8006c34:	2010      	movs	r0, #16
 8006c36:	f7fb ffa3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	2011      	movs	r0, #17
 8006c3e:	f7fb ff9f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8006c42:	2101      	movs	r1, #1
 8006c44:	2017      	movs	r0, #23
 8006c46:	f7fb ff9b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8006c4a:	f44f 719c 	mov.w	r1, #312	; 0x138
 8006c4e:	2012      	movs	r0, #18
 8006c50:	f7fb ff96 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8006c54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c58:	2013      	movs	r0, #19
 8006c5a:	f7fb ff91 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8006c5e:	2109      	movs	r1, #9
 8006c60:	2029      	movs	r0, #41	; 0x29
 8006c62:	f7fb ff8d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8006c66:	2109      	movs	r1, #9
 8006c68:	202a      	movs	r0, #42	; 0x2a
 8006c6a:	f7fb ff89 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8006c6e:	2100      	movs	r1, #0
 8006c70:	20a4      	movs	r0, #164	; 0xa4
 8006c72:	f7fb ff85 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8006c76:	2100      	movs	r1, #0
 8006c78:	2050      	movs	r0, #80	; 0x50
 8006c7a:	f7fb ff81 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8006c7e:	21ef      	movs	r1, #239	; 0xef
 8006c80:	2051      	movs	r0, #81	; 0x51
 8006c82:	f7fb ff7d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8006c86:	2100      	movs	r1, #0
 8006c88:	2052      	movs	r0, #82	; 0x52
 8006c8a:	f7fb ff79 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8006c8e:	f240 113f 	movw	r1, #319	; 0x13f
 8006c92:	2053      	movs	r0, #83	; 0x53
 8006c94:	f7fb ff74 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8006c98:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006c9c:	2060      	movs	r0, #96	; 0x60
 8006c9e:	f7fb ff6f 	bl	8002b80 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	2061      	movs	r0, #97	; 0x61
 8006ca6:	f7fb ff6b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8006caa:	2100      	movs	r1, #0
 8006cac:	206a      	movs	r0, #106	; 0x6a
 8006cae:	f7fb ff67 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	2080      	movs	r0, #128	; 0x80
 8006cb6:	f7fb ff63 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8006cba:	2100      	movs	r1, #0
 8006cbc:	2081      	movs	r0, #129	; 0x81
 8006cbe:	f7fb ff5f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	2082      	movs	r0, #130	; 0x82
 8006cc6:	f7fb ff5b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8006cca:	2100      	movs	r1, #0
 8006ccc:	2083      	movs	r0, #131	; 0x83
 8006cce:	f7fb ff57 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	2084      	movs	r0, #132	; 0x84
 8006cd6:	f7fb ff53 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8006cda:	2100      	movs	r1, #0
 8006cdc:	2085      	movs	r0, #133	; 0x85
 8006cde:	f7fb ff4f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8006ce2:	2113      	movs	r1, #19
 8006ce4:	2090      	movs	r0, #144	; 0x90
 8006ce6:	f7fb ff4b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8006cea:	2100      	movs	r1, #0
 8006cec:	2092      	movs	r0, #146	; 0x92
 8006cee:	f7fb ff47 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8006cf2:	2103      	movs	r1, #3
 8006cf4:	2093      	movs	r0, #147	; 0x93
 8006cf6:	f7fb ff43 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8006cfa:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006cfe:	2095      	movs	r0, #149	; 0x95
 8006d00:	f7fb ff3e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8006d04:	f240 1173 	movw	r1, #371	; 0x173
 8006d08:	2007      	movs	r0, #7
 8006d0a:	f7fb ff39 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(50);
 8006d0e:	2032      	movs	r0, #50	; 0x32
 8006d10:	f7f9 feda 	bl	8000ac8 <HAL_Delay>
 8006d14:	f001 b8f2 	b.w	8007efc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8006d18:	4b8d      	ldr	r3, [pc, #564]	; (8006f50 <LCD_Init+0x2e88>)
 8006d1a:	889b      	ldrh	r3, [r3, #4]
 8006d1c:	f241 5205 	movw	r2, #5381	; 0x1505
 8006d20:	4293      	cmp	r3, r2
 8006d22:	f040 8117 	bne.w	8006f54 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8006d26:	2100      	movs	r1, #0
 8006d28:	2007      	movs	r0, #7
 8006d2a:	f7fb ff29 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(50);
 8006d2e:	2032      	movs	r0, #50	; 0x32
 8006d30:	f7f9 feca 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8006d34:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8006d38:	2012      	movs	r0, #18
 8006d3a:	f7fb ff21 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8006d3e:	2101      	movs	r1, #1
 8006d40:	20a4      	movs	r0, #164	; 0xa4
 8006d42:	f7fb ff1d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8006d46:	210f      	movs	r1, #15
 8006d48:	2008      	movs	r0, #8
 8006d4a:	f7fb ff19 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8006d4e:	2108      	movs	r1, #8
 8006d50:	200a      	movs	r0, #10
 8006d52:	f7fb ff15 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8006d56:	2108      	movs	r1, #8
 8006d58:	200d      	movs	r0, #13
 8006d5a:	f7fb ff11 	bl	8002b80 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8006d5e:	f240 7107 	movw	r1, #1799	; 0x707
 8006d62:	2030      	movs	r0, #48	; 0x30
 8006d64:	f7fb ff0c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8006d68:	2107      	movs	r1, #7
 8006d6a:	2031      	movs	r0, #49	; 0x31
 8006d6c:	f7fb ff08 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8006d70:	f240 6103 	movw	r1, #1539	; 0x603
 8006d74:	2032      	movs	r0, #50	; 0x32
 8006d76:	f7fb ff03 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8006d7a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006d7e:	2033      	movs	r0, #51	; 0x33
 8006d80:	f7fb fefe 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8006d84:	f240 2102 	movw	r1, #514	; 0x202
 8006d88:	2034      	movs	r0, #52	; 0x34
 8006d8a:	f7fb fef9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8006d8e:	2102      	movs	r1, #2
 8006d90:	2035      	movs	r0, #53	; 0x35
 8006d92:	f7fb fef5 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8006d96:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8006d9a:	2036      	movs	r0, #54	; 0x36
 8006d9c:	f7fb fef0 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8006da0:	f240 7107 	movw	r1, #1799	; 0x707
 8006da4:	2037      	movs	r0, #55	; 0x37
 8006da6:	f7fb feeb 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8006daa:	2100      	movs	r1, #0
 8006dac:	2038      	movs	r0, #56	; 0x38
 8006dae:	f7fb fee7 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8006db2:	2100      	movs	r1, #0
 8006db4:	2039      	movs	r0, #57	; 0x39
 8006db6:	f7fb fee3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8006dba:	f240 7107 	movw	r1, #1799	; 0x707
 8006dbe:	203a      	movs	r0, #58	; 0x3a
 8006dc0:	f7fb fede 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	203b      	movs	r0, #59	; 0x3b
 8006dc8:	f7fb feda 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8006dcc:	2107      	movs	r1, #7
 8006dce:	203c      	movs	r0, #60	; 0x3c
 8006dd0:	f7fb fed6 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	203d      	movs	r0, #61	; 0x3d
 8006dd8:	f7fb fed2 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(50);
 8006ddc:	2032      	movs	r0, #50	; 0x32
 8006dde:	f7f9 fe73 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8006de2:	2101      	movs	r1, #1
 8006de4:	2007      	movs	r0, #7
 8006de6:	f7fb fecb 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8006dea:	2101      	movs	r1, #1
 8006dec:	2017      	movs	r0, #23
 8006dee:	f7fb fec7 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(50);
 8006df2:	2032      	movs	r0, #50	; 0x32
 8006df4:	f7f9 fe68 	bl	8000ac8 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8006df8:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8006dfc:	2010      	movs	r0, #16
 8006dfe:	f7fb febf 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8006e02:	f240 2117 	movw	r1, #535	; 0x217
 8006e06:	2011      	movs	r0, #17
 8006e08:	f7fb feba 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8006e0c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8006e10:	2012      	movs	r0, #18
 8006e12:	f7fb feb5 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8006e16:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8006e1a:	2013      	movs	r0, #19
 8006e1c:	f7fb feb0 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8006e20:	2100      	movs	r1, #0
 8006e22:	202a      	movs	r0, #42	; 0x2a
 8006e24:	f7fb feac 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8006e28:	210a      	movs	r1, #10
 8006e2a:	2029      	movs	r0, #41	; 0x29
 8006e2c:	f7fb fea8 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8006e30:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8006e34:	2012      	movs	r0, #18
 8006e36:	f7fb fea3 	bl	8002b80 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	2050      	movs	r0, #80	; 0x50
 8006e3e:	f7fb fe9f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8006e42:	21ef      	movs	r1, #239	; 0xef
 8006e44:	2051      	movs	r0, #81	; 0x51
 8006e46:	f7fb fe9b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	2052      	movs	r0, #82	; 0x52
 8006e4e:	f7fb fe97 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8006e52:	f240 113f 	movw	r1, #319	; 0x13f
 8006e56:	2053      	movs	r0, #83	; 0x53
 8006e58:	f7fb fe92 	bl	8002b80 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8006e5c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006e60:	2060      	movs	r0, #96	; 0x60
 8006e62:	f7fb fe8d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8006e66:	2101      	movs	r1, #1
 8006e68:	2061      	movs	r0, #97	; 0x61
 8006e6a:	f7fb fe89 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8006e6e:	2100      	movs	r1, #0
 8006e70:	206a      	movs	r0, #106	; 0x6a
 8006e72:	f7fb fe85 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8006e76:	2100      	movs	r1, #0
 8006e78:	2080      	movs	r0, #128	; 0x80
 8006e7a:	f7fb fe81 	bl	8002b80 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8006e7e:	2100      	movs	r1, #0
 8006e80:	2081      	movs	r0, #129	; 0x81
 8006e82:	f7fb fe7d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006e86:	2100      	movs	r1, #0
 8006e88:	2082      	movs	r0, #130	; 0x82
 8006e8a:	f7fb fe79 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006e8e:	2100      	movs	r1, #0
 8006e90:	2083      	movs	r0, #131	; 0x83
 8006e92:	f7fb fe75 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006e96:	2100      	movs	r1, #0
 8006e98:	2084      	movs	r0, #132	; 0x84
 8006e9a:	f7fb fe71 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	2085      	movs	r0, #133	; 0x85
 8006ea2:	f7fb fe6d 	bl	8002b80 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8006ea6:	2113      	movs	r1, #19
 8006ea8:	2090      	movs	r0, #144	; 0x90
 8006eaa:	f7fb fe69 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8006eae:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006eb2:	2092      	movs	r0, #146	; 0x92
 8006eb4:	f7fb fe64 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8006eb8:	2105      	movs	r1, #5
 8006eba:	2093      	movs	r0, #147	; 0x93
 8006ebc:	f7fb fe60 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	2095      	movs	r0, #149	; 0x95
 8006ec4:	f7fb fe5c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8006ec8:	2100      	movs	r1, #0
 8006eca:	2097      	movs	r0, #151	; 0x97
 8006ecc:	f7fb fe58 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	2098      	movs	r0, #152	; 0x98
 8006ed4:	f7fb fe54 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8006ed8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006edc:	2001      	movs	r0, #1
 8006ede:	f7fb fe4f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8006ee2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006ee6:	2002      	movs	r0, #2
 8006ee8:	f7fb fe4a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8006eec:	f241 0138 	movw	r1, #4152	; 0x1038
 8006ef0:	2003      	movs	r0, #3
 8006ef2:	f7fb fe45 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	2004      	movs	r0, #4
 8006efa:	f7fb fe41 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8006efe:	2100      	movs	r1, #0
 8006f00:	200c      	movs	r0, #12
 8006f02:	f7fb fe3d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8006f06:	2100      	movs	r1, #0
 8006f08:	200f      	movs	r0, #15
 8006f0a:	f7fb fe39 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8006f0e:	2100      	movs	r1, #0
 8006f10:	2020      	movs	r0, #32
 8006f12:	f7fb fe35 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8006f16:	2100      	movs	r1, #0
 8006f18:	2021      	movs	r0, #33	; 0x21
 8006f1a:	f7fb fe31 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8006f1e:	2121      	movs	r1, #33	; 0x21
 8006f20:	2007      	movs	r0, #7
 8006f22:	f7fb fe2d 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(20);
 8006f26:	2014      	movs	r0, #20
 8006f28:	f7f9 fdce 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8006f2c:	2161      	movs	r1, #97	; 0x61
 8006f2e:	2007      	movs	r0, #7
 8006f30:	f7fb fe26 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(20);
 8006f34:	2014      	movs	r0, #20
 8006f36:	f7f9 fdc7 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8006f3a:	f240 1173 	movw	r1, #371	; 0x173
 8006f3e:	2007      	movs	r0, #7
 8006f40:	f7fb fe1e 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(20);
 8006f44:	2014      	movs	r0, #20
 8006f46:	f7f9 fdbf 	bl	8000ac8 <HAL_Delay>
 8006f4a:	f000 bfd7 	b.w	8007efc <LCD_Init+0x3e34>
 8006f4e:	bf00      	nop
 8006f50:	200007cc 	.word	0x200007cc
	} else if (lcddev.id == 0xB505) {
 8006f54:	4bf0      	ldr	r3, [pc, #960]	; (8007318 <LCD_Init+0x3250>)
 8006f56:	889b      	ldrh	r3, [r3, #4]
 8006f58:	f24b 5205 	movw	r2, #46341	; 0xb505
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	f040 8103 	bne.w	8007168 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8006f62:	2100      	movs	r1, #0
 8006f64:	2000      	movs	r0, #0
 8006f66:	f7fb fe0b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	f7fb fe07 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006f72:	2100      	movs	r1, #0
 8006f74:	2000      	movs	r0, #0
 8006f76:	f7fb fe03 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	f7fb fdff 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8006f82:	2101      	movs	r1, #1
 8006f84:	20a4      	movs	r0, #164	; 0xa4
 8006f86:	f7fb fdfb 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(20);
 8006f8a:	2014      	movs	r0, #20
 8006f8c:	f7f9 fd9c 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8006f90:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006f94:	2060      	movs	r0, #96	; 0x60
 8006f96:	f7fb fdf3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8006f9a:	f240 2102 	movw	r1, #514	; 0x202
 8006f9e:	2008      	movs	r0, #8
 8006fa0:	f7fb fdee 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8006fa4:	f44f 7105 	mov.w	r1, #532	; 0x214
 8006fa8:	2030      	movs	r0, #48	; 0x30
 8006faa:	f7fb fde9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8006fae:	f243 7115 	movw	r1, #14101	; 0x3715
 8006fb2:	2031      	movs	r0, #49	; 0x31
 8006fb4:	f7fb fde4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8006fb8:	f240 6104 	movw	r1, #1540	; 0x604
 8006fbc:	2032      	movs	r0, #50	; 0x32
 8006fbe:	f7fb fddf 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8006fc2:	f640 6116 	movw	r1, #3606	; 0xe16
 8006fc6:	2033      	movs	r0, #51	; 0x33
 8006fc8:	f7fb fdda 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8006fcc:	f242 2111 	movw	r1, #8721	; 0x2211
 8006fd0:	2034      	movs	r0, #52	; 0x34
 8006fd2:	f7fb fdd5 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8006fd6:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8006fda:	2035      	movs	r0, #53	; 0x35
 8006fdc:	f7fb fdd0 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8006fe0:	f248 5107 	movw	r1, #34055	; 0x8507
 8006fe4:	2036      	movs	r0, #54	; 0x36
 8006fe6:	f7fb fdcb 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8006fea:	f241 4107 	movw	r1, #5127	; 0x1407
 8006fee:	2037      	movs	r0, #55	; 0x37
 8006ff0:	f7fb fdc6 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8006ff4:	f241 4103 	movw	r1, #5123	; 0x1403
 8006ff8:	2038      	movs	r0, #56	; 0x38
 8006ffa:	f7fb fdc1 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8006ffe:	2120      	movs	r1, #32
 8007000:	2039      	movs	r0, #57	; 0x39
 8007002:	f7fb fdbd 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8007006:	211a      	movs	r1, #26
 8007008:	2090      	movs	r0, #144	; 0x90
 800700a:	f7fb fdb9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 800700e:	2100      	movs	r1, #0
 8007010:	2010      	movs	r0, #16
 8007012:	f7fb fdb5 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8007016:	2107      	movs	r1, #7
 8007018:	2011      	movs	r0, #17
 800701a:	f7fb fdb1 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800701e:	2100      	movs	r1, #0
 8007020:	2012      	movs	r0, #18
 8007022:	f7fb fdad 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8007026:	2100      	movs	r1, #0
 8007028:	2013      	movs	r0, #19
 800702a:	f7fb fda9 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(20);
 800702e:	2014      	movs	r0, #20
 8007030:	f7f9 fd4a 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8007034:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8007038:	2010      	movs	r0, #16
 800703a:	f7fb fda1 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 800703e:	f240 1137 	movw	r1, #311	; 0x137
 8007042:	2011      	movs	r0, #17
 8007044:	f7fb fd9c 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(20);
 8007048:	2014      	movs	r0, #20
 800704a:	f7f9 fd3d 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 800704e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8007052:	2012      	movs	r0, #18
 8007054:	f7fb fd94 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(20);
 8007058:	2014      	movs	r0, #20
 800705a:	f7f9 fd35 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 800705e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8007062:	2013      	movs	r0, #19
 8007064:	f7fb fd8c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8007068:	2180      	movs	r1, #128	; 0x80
 800706a:	202a      	movs	r0, #42	; 0x2a
 800706c:	f7fb fd88 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8007070:	2148      	movs	r1, #72	; 0x48
 8007072:	2029      	movs	r0, #41	; 0x29
 8007074:	f7fb fd84 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(20);
 8007078:	2014      	movs	r0, #20
 800707a:	f7f9 fd25 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 800707e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007082:	2001      	movs	r0, #1
 8007084:	f7fb fd7c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8007088:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800708c:	2002      	movs	r0, #2
 800708e:	f7fb fd77 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8007092:	f241 0138 	movw	r1, #4152	; 0x1038
 8007096:	2003      	movs	r0, #3
 8007098:	f7fb fd72 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800709c:	f240 2102 	movw	r1, #514	; 0x202
 80070a0:	2008      	movs	r0, #8
 80070a2:	f7fb fd6d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 80070a6:	2100      	movs	r1, #0
 80070a8:	200a      	movs	r0, #10
 80070aa:	f7fb fd69 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 80070ae:	2100      	movs	r1, #0
 80070b0:	200c      	movs	r0, #12
 80070b2:	f7fb fd65 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 80070b6:	2100      	movs	r1, #0
 80070b8:	200d      	movs	r0, #13
 80070ba:	f7fb fd61 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 80070be:	2130      	movs	r1, #48	; 0x30
 80070c0:	200e      	movs	r0, #14
 80070c2:	f7fb fd5d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 80070c6:	2100      	movs	r1, #0
 80070c8:	2050      	movs	r0, #80	; 0x50
 80070ca:	f7fb fd59 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 80070ce:	21ef      	movs	r1, #239	; 0xef
 80070d0:	2051      	movs	r0, #81	; 0x51
 80070d2:	f7fb fd55 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80070d6:	2100      	movs	r1, #0
 80070d8:	2052      	movs	r0, #82	; 0x52
 80070da:	f7fb fd51 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 80070de:	f240 113f 	movw	r1, #319	; 0x13f
 80070e2:	2053      	movs	r0, #83	; 0x53
 80070e4:	f7fb fd4c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 80070e8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80070ec:	2060      	movs	r0, #96	; 0x60
 80070ee:	f7fb fd47 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80070f2:	2101      	movs	r1, #1
 80070f4:	2061      	movs	r0, #97	; 0x61
 80070f6:	f7fb fd43 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80070fa:	2100      	movs	r1, #0
 80070fc:	206a      	movs	r0, #106	; 0x6a
 80070fe:	f7fb fd3f 	bl	8002b80 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8007102:	2111      	movs	r1, #17
 8007104:	2090      	movs	r0, #144	; 0x90
 8007106:	f7fb fd3b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 800710a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800710e:	2092      	movs	r0, #146	; 0x92
 8007110:	f7fb fd36 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8007114:	f240 4102 	movw	r1, #1026	; 0x402
 8007118:	2093      	movs	r0, #147	; 0x93
 800711a:	f7fb fd31 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 800711e:	2102      	movs	r1, #2
 8007120:	2094      	movs	r0, #148	; 0x94
 8007122:	f7fb fd2d 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(20);
 8007126:	2014      	movs	r0, #20
 8007128:	f7f9 fcce 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 800712c:	2101      	movs	r1, #1
 800712e:	2007      	movs	r0, #7
 8007130:	f7fb fd26 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(20);
 8007134:	2014      	movs	r0, #20
 8007136:	f7f9 fcc7 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 800713a:	2161      	movs	r1, #97	; 0x61
 800713c:	2007      	movs	r0, #7
 800713e:	f7fb fd1f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8007142:	f240 1173 	movw	r1, #371	; 0x173
 8007146:	2007      	movs	r0, #7
 8007148:	f7fb fd1a 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 800714c:	2100      	movs	r1, #0
 800714e:	2020      	movs	r0, #32
 8007150:	f7fb fd16 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8007154:	2100      	movs	r1, #0
 8007156:	2021      	movs	r0, #33	; 0x21
 8007158:	f7fb fd12 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 800715c:	2122      	movs	r1, #34	; 0x22
 800715e:	2000      	movs	r0, #0
 8007160:	f7fb fd0e 	bl	8002b80 <LCD_WriteReg>
 8007164:	f000 beca 	b.w	8007efc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8007168:	4b6b      	ldr	r3, [pc, #428]	; (8007318 <LCD_Init+0x3250>)
 800716a:	889b      	ldrh	r3, [r3, #4]
 800716c:	f24c 5205 	movw	r2, #50437	; 0xc505
 8007170:	4293      	cmp	r3, r2
 8007172:	f040 80d3 	bne.w	800731c <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8007176:	2100      	movs	r1, #0
 8007178:	2000      	movs	r0, #0
 800717a:	f7fb fd01 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800717e:	2100      	movs	r1, #0
 8007180:	2000      	movs	r0, #0
 8007182:	f7fb fcfd 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(20);
 8007186:	2014      	movs	r0, #20
 8007188:	f7f9 fc9e 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 800718c:	2100      	movs	r1, #0
 800718e:	2000      	movs	r0, #0
 8007190:	f7fb fcf6 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007194:	2100      	movs	r1, #0
 8007196:	2000      	movs	r0, #0
 8007198:	f7fb fcf2 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800719c:	2100      	movs	r1, #0
 800719e:	2000      	movs	r0, #0
 80071a0:	f7fb fcee 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80071a4:	2100      	movs	r1, #0
 80071a6:	2000      	movs	r0, #0
 80071a8:	f7fb fcea 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 80071ac:	2101      	movs	r1, #1
 80071ae:	20a4      	movs	r0, #164	; 0xa4
 80071b0:	f7fb fce6 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(20);
 80071b4:	2014      	movs	r0, #20
 80071b6:	f7f9 fc87 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 80071ba:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80071be:	2060      	movs	r0, #96	; 0x60
 80071c0:	f7fb fcde 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 80071c4:	f640 0106 	movw	r1, #2054	; 0x806
 80071c8:	2008      	movs	r0, #8
 80071ca:	f7fb fcd9 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 80071ce:	f240 7103 	movw	r1, #1795	; 0x703
 80071d2:	2030      	movs	r0, #48	; 0x30
 80071d4:	f7fb fcd4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 80071d8:	2101      	movs	r1, #1
 80071da:	2031      	movs	r0, #49	; 0x31
 80071dc:	f7fb fcd0 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 80071e0:	2104      	movs	r1, #4
 80071e2:	2032      	movs	r0, #50	; 0x32
 80071e4:	f7fb fccc 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 80071e8:	f44f 7181 	mov.w	r1, #258	; 0x102
 80071ec:	2033      	movs	r0, #51	; 0x33
 80071ee:	f7fb fcc7 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 80071f2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80071f6:	2034      	movs	r0, #52	; 0x34
 80071f8:	f7fb fcc2 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 80071fc:	f240 1103 	movw	r1, #259	; 0x103
 8007200:	2035      	movs	r0, #53	; 0x35
 8007202:	f7fb fcbd 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8007206:	211f      	movs	r1, #31
 8007208:	2036      	movs	r0, #54	; 0x36
 800720a:	f7fb fcb9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 800720e:	f240 7103 	movw	r1, #1795	; 0x703
 8007212:	2037      	movs	r0, #55	; 0x37
 8007214:	f7fb fcb4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8007218:	2101      	movs	r1, #1
 800721a:	2038      	movs	r0, #56	; 0x38
 800721c:	f7fb fcb0 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8007220:	2104      	movs	r1, #4
 8007222:	2039      	movs	r0, #57	; 0x39
 8007224:	f7fb fcac 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8007228:	2115      	movs	r1, #21
 800722a:	2090      	movs	r0, #144	; 0x90
 800722c:	f7fb fca8 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8007230:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8007234:	2010      	movs	r0, #16
 8007236:	f7fb fca3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 800723a:	f240 2147 	movw	r1, #583	; 0x247
 800723e:	2011      	movs	r0, #17
 8007240:	f7fb fc9e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8007244:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8007248:	2012      	movs	r0, #18
 800724a:	f7fb fc99 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 800724e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8007252:	2013      	movs	r0, #19
 8007254:	f7fb fc94 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(120);
 8007258:	2078      	movs	r0, #120	; 0x78
 800725a:	f7f9 fc35 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 800725e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007262:	2001      	movs	r0, #1
 8007264:	f7fb fc8c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8007268:	f44f 7100 	mov.w	r1, #512	; 0x200
 800726c:	2002      	movs	r0, #2
 800726e:	f7fb fc87 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8007272:	f241 0130 	movw	r1, #4144	; 0x1030
 8007276:	2003      	movs	r0, #3
 8007278:	f7fb fc82 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 800727c:	2108      	movs	r1, #8
 800727e:	200a      	movs	r0, #10
 8007280:	f7fb fc7e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8007284:	2100      	movs	r1, #0
 8007286:	200c      	movs	r0, #12
 8007288:	f7fb fc7a 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 800728c:	2120      	movs	r1, #32
 800728e:	200e      	movs	r0, #14
 8007290:	f7fb fc76 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8007294:	2100      	movs	r1, #0
 8007296:	200f      	movs	r0, #15
 8007298:	f7fb fc72 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 800729c:	2100      	movs	r1, #0
 800729e:	2020      	movs	r0, #32
 80072a0:	f7fb fc6e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 80072a4:	2100      	movs	r1, #0
 80072a6:	2021      	movs	r0, #33	; 0x21
 80072a8:	f7fb fc6a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 80072ac:	213d      	movs	r1, #61	; 0x3d
 80072ae:	202a      	movs	r0, #42	; 0x2a
 80072b0:	f7fb fc66 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(20);
 80072b4:	2014      	movs	r0, #20
 80072b6:	f7f9 fc07 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 80072ba:	212d      	movs	r1, #45	; 0x2d
 80072bc:	2029      	movs	r0, #41	; 0x29
 80072be:	f7fb fc5f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 80072c2:	2100      	movs	r1, #0
 80072c4:	2050      	movs	r0, #80	; 0x50
 80072c6:	f7fb fc5b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 80072ca:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 80072ce:	2051      	movs	r0, #81	; 0x51
 80072d0:	f7fb fc56 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80072d4:	2100      	movs	r1, #0
 80072d6:	2052      	movs	r0, #82	; 0x52
 80072d8:	f7fb fc52 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80072dc:	f240 113f 	movw	r1, #319	; 0x13f
 80072e0:	2053      	movs	r0, #83	; 0x53
 80072e2:	f7fb fc4d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 80072e6:	2100      	movs	r1, #0
 80072e8:	2061      	movs	r0, #97	; 0x61
 80072ea:	f7fb fc49 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80072ee:	2100      	movs	r1, #0
 80072f0:	206a      	movs	r0, #106	; 0x6a
 80072f2:	f7fb fc45 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 80072f6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80072fa:	2092      	movs	r0, #146	; 0x92
 80072fc:	f7fb fc40 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8007300:	2105      	movs	r1, #5
 8007302:	2093      	movs	r0, #147	; 0x93
 8007304:	f7fb fc3c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8007308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800730c:	2007      	movs	r0, #7
 800730e:	f7fb fc37 	bl	8002b80 <LCD_WriteReg>
 8007312:	f000 bdf3 	b.w	8007efc <LCD_Init+0x3e34>
 8007316:	bf00      	nop
 8007318:	200007cc 	.word	0x200007cc
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 800731c:	4bc2      	ldr	r3, [pc, #776]	; (8007628 <LCD_Init+0x3560>)
 800731e:	889b      	ldrh	r3, [r3, #4]
 8007320:	f648 1289 	movw	r2, #35209	; 0x8989
 8007324:	4293      	cmp	r3, r2
 8007326:	f040 80bc 	bne.w	80074a2 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 800732a:	2101      	movs	r1, #1
 800732c:	2000      	movs	r0, #0
 800732e:	f7fb fc27 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 8007332:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8007336:	2003      	movs	r0, #3
 8007338:	f7fb fc22 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800733c:	2100      	movs	r1, #0
 800733e:	200c      	movs	r0, #12
 8007340:	f7fb fc1e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 8007344:	f640 010c 	movw	r1, #2060	; 0x80c
 8007348:	200d      	movs	r0, #13
 800734a:	f7fb fc19 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 800734e:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8007352:	200e      	movs	r0, #14
 8007354:	f7fb fc14 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8007358:	21b0      	movs	r1, #176	; 0xb0
 800735a:	201e      	movs	r0, #30
 800735c:	f7fb fc10 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8007360:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8007364:	2001      	movs	r0, #1
 8007366:	f7fb fc0b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 800736a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800736e:	2002      	movs	r0, #2
 8007370:	f7fb fc06 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8007374:	2100      	movs	r1, #0
 8007376:	2010      	movs	r0, #16
 8007378:	f7fb fc02 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 800737c:	f246 0178 	movw	r1, #24696	; 0x6078
 8007380:	2011      	movs	r0, #17
 8007382:	f7fb fbfd 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8007386:	2100      	movs	r1, #0
 8007388:	2005      	movs	r0, #5
 800738a:	f7fb fbf9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 800738e:	2100      	movs	r1, #0
 8007390:	2006      	movs	r0, #6
 8007392:	f7fb fbf5 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8007396:	f64e 711c 	movw	r1, #61212	; 0xef1c
 800739a:	2016      	movs	r0, #22
 800739c:	f7fb fbf0 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 80073a0:	2103      	movs	r1, #3
 80073a2:	2017      	movs	r0, #23
 80073a4:	f7fb fbec 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 80073a8:	f240 2133 	movw	r1, #563	; 0x233
 80073ac:	2007      	movs	r0, #7
 80073ae:	f7fb fbe7 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 80073b2:	2100      	movs	r1, #0
 80073b4:	200b      	movs	r0, #11
 80073b6:	f7fb fbe3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 80073ba:	2100      	movs	r1, #0
 80073bc:	200f      	movs	r0, #15
 80073be:	f7fb fbdf 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 80073c2:	2100      	movs	r1, #0
 80073c4:	2041      	movs	r0, #65	; 0x41
 80073c6:	f7fb fbdb 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 80073ca:	2100      	movs	r1, #0
 80073cc:	2042      	movs	r0, #66	; 0x42
 80073ce:	f7fb fbd7 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 80073d2:	2100      	movs	r1, #0
 80073d4:	2048      	movs	r0, #72	; 0x48
 80073d6:	f7fb fbd3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 80073da:	f240 113f 	movw	r1, #319	; 0x13f
 80073de:	2049      	movs	r0, #73	; 0x49
 80073e0:	f7fb fbce 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 80073e4:	2100      	movs	r1, #0
 80073e6:	204a      	movs	r0, #74	; 0x4a
 80073e8:	f7fb fbca 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 80073ec:	2100      	movs	r1, #0
 80073ee:	204b      	movs	r0, #75	; 0x4b
 80073f0:	f7fb fbc6 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 80073f4:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 80073f8:	2044      	movs	r0, #68	; 0x44
 80073fa:	f7fb fbc1 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 80073fe:	2100      	movs	r1, #0
 8007400:	2045      	movs	r0, #69	; 0x45
 8007402:	f7fb fbbd 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8007406:	f240 113f 	movw	r1, #319	; 0x13f
 800740a:	2046      	movs	r0, #70	; 0x46
 800740c:	f7fb fbb8 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8007410:	f240 7107 	movw	r1, #1799	; 0x707
 8007414:	2030      	movs	r0, #48	; 0x30
 8007416:	f7fb fbb3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 800741a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800741e:	2031      	movs	r0, #49	; 0x31
 8007420:	f7fb fbae 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 8007424:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007428:	2032      	movs	r0, #50	; 0x32
 800742a:	f7fb fba9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 800742e:	f240 5102 	movw	r1, #1282	; 0x502
 8007432:	2033      	movs	r0, #51	; 0x33
 8007434:	f7fb fba4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8007438:	f240 5107 	movw	r1, #1287	; 0x507
 800743c:	2034      	movs	r0, #52	; 0x34
 800743e:	f7fb fb9f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8007442:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007446:	2035      	movs	r0, #53	; 0x35
 8007448:	f7fb fb9a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 800744c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007450:	2036      	movs	r0, #54	; 0x36
 8007452:	f7fb fb95 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8007456:	f240 5102 	movw	r1, #1282	; 0x502
 800745a:	2037      	movs	r0, #55	; 0x37
 800745c:	f7fb fb90 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8007460:	f240 3102 	movw	r1, #770	; 0x302
 8007464:	203a      	movs	r0, #58	; 0x3a
 8007466:	f7fb fb8b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 800746a:	f240 3102 	movw	r1, #770	; 0x302
 800746e:	203b      	movs	r0, #59	; 0x3b
 8007470:	f7fb fb86 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8007474:	2100      	movs	r1, #0
 8007476:	2023      	movs	r0, #35	; 0x23
 8007478:	f7fb fb82 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 800747c:	2100      	movs	r1, #0
 800747e:	2024      	movs	r0, #36	; 0x24
 8007480:	f7fb fb7e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8007484:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007488:	2025      	movs	r0, #37	; 0x25
 800748a:	f7fb fb79 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 800748e:	2100      	movs	r1, #0
 8007490:	204f      	movs	r0, #79	; 0x4f
 8007492:	f7fb fb75 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8007496:	2100      	movs	r1, #0
 8007498:	204e      	movs	r0, #78	; 0x4e
 800749a:	f7fb fb71 	bl	8002b80 <LCD_WriteReg>
 800749e:	f000 bd2d 	b.w	8007efc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 80074a2:	4b61      	ldr	r3, [pc, #388]	; (8007628 <LCD_Init+0x3560>)
 80074a4:	889b      	ldrh	r3, [r3, #4]
 80074a6:	f244 5231 	movw	r2, #17713	; 0x4531
 80074aa:	4293      	cmp	r3, r2
 80074ac:	f040 80be 	bne.w	800762c <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 80074b0:	2101      	movs	r1, #1
 80074b2:	2000      	movs	r0, #0
 80074b4:	f7fb fb64 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(10);
 80074b8:	200a      	movs	r0, #10
 80074ba:	f7f9 fb05 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 80074be:	f241 6128 	movw	r1, #5672	; 0x1628
 80074c2:	2010      	movs	r0, #16
 80074c4:	f7fb fb5c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 80074c8:	210e      	movs	r1, #14
 80074ca:	2012      	movs	r0, #18
 80074cc:	f7fb fb58 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 80074d0:	f640 2139 	movw	r1, #2617	; 0xa39
 80074d4:	2013      	movs	r0, #19
 80074d6:	f7fb fb53 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(10);
 80074da:	200a      	movs	r0, #10
 80074dc:	f7f9 faf4 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 80074e0:	2140      	movs	r1, #64	; 0x40
 80074e2:	2011      	movs	r0, #17
 80074e4:	f7fb fb4c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 80074e8:	2150      	movs	r1, #80	; 0x50
 80074ea:	2015      	movs	r0, #21
 80074ec:	f7fb fb48 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(10);
 80074f0:	200a      	movs	r0, #10
 80074f2:	f7f9 fae9 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 80074f6:	211e      	movs	r1, #30
 80074f8:	2012      	movs	r0, #18
 80074fa:	f7fb fb41 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(10);
 80074fe:	200a      	movs	r0, #10
 8007500:	f7f9 fae2 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8007504:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8007508:	2010      	movs	r0, #16
 800750a:	f7fb fb39 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 800750e:	f642 2139 	movw	r1, #10809	; 0x2a39
 8007512:	2013      	movs	r0, #19
 8007514:	f7fb fb34 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(10);
 8007518:	200a      	movs	r0, #10
 800751a:	f7f9 fad5 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 800751e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007522:	2001      	movs	r0, #1
 8007524:	f7fb fb2c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8007528:	f44f 7140 	mov.w	r1, #768	; 0x300
 800752c:	2002      	movs	r0, #2
 800752e:	f7fb fb27 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 8007532:	f241 0138 	movw	r1, #4152	; 0x1038
 8007536:	2003      	movs	r0, #3
 8007538:	f7fb fb22 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 800753c:	f240 2102 	movw	r1, #514	; 0x202
 8007540:	2008      	movs	r0, #8
 8007542:	f7fb fb1d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8007546:	2108      	movs	r1, #8
 8007548:	200a      	movs	r0, #10
 800754a:	f7fb fb19 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 800754e:	2100      	movs	r1, #0
 8007550:	2030      	movs	r0, #48	; 0x30
 8007552:	f7fb fb15 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8007556:	f240 4102 	movw	r1, #1026	; 0x402
 800755a:	2031      	movs	r0, #49	; 0x31
 800755c:	f7fb fb10 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8007560:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007564:	2032      	movs	r0, #50	; 0x32
 8007566:	f7fb fb0b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 800756a:	f240 5103 	movw	r1, #1283	; 0x503
 800756e:	2033      	movs	r0, #51	; 0x33
 8007570:	f7fb fb06 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8007574:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007578:	2034      	movs	r0, #52	; 0x34
 800757a:	f7fb fb01 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 800757e:	f240 3101 	movw	r1, #769	; 0x301
 8007582:	2035      	movs	r0, #53	; 0x35
 8007584:	f7fb fafc 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8007588:	f240 7107 	movw	r1, #1799	; 0x707
 800758c:	2036      	movs	r0, #54	; 0x36
 800758e:	f7fb faf7 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8007592:	f240 3105 	movw	r1, #773	; 0x305
 8007596:	2037      	movs	r0, #55	; 0x37
 8007598:	f7fb faf2 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 800759c:	f44f 7102 	mov.w	r1, #520	; 0x208
 80075a0:	2038      	movs	r0, #56	; 0x38
 80075a2:	f7fb faed 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 80075a6:	f640 710b 	movw	r1, #3851	; 0xf0b
 80075aa:	2039      	movs	r0, #57	; 0x39
 80075ac:	f7fb fae8 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 80075b0:	2102      	movs	r1, #2
 80075b2:	2041      	movs	r0, #65	; 0x41
 80075b4:	f7fb fae4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80075b8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80075bc:	2060      	movs	r0, #96	; 0x60
 80075be:	f7fb fadf 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80075c2:	2101      	movs	r1, #1
 80075c4:	2061      	movs	r0, #97	; 0x61
 80075c6:	f7fb fadb 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 80075ca:	f44f 7104 	mov.w	r1, #528	; 0x210
 80075ce:	2090      	movs	r0, #144	; 0x90
 80075d0:	f7fb fad6 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 80075d4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80075d8:	2092      	movs	r0, #146	; 0x92
 80075da:	f7fb fad1 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 80075de:	2104      	movs	r1, #4
 80075e0:	2093      	movs	r0, #147	; 0x93
 80075e2:	f7fb facd 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 80075e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80075ea:	20a0      	movs	r0, #160	; 0xa0
 80075ec:	f7fb fac8 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80075f0:	2101      	movs	r1, #1
 80075f2:	2007      	movs	r0, #7
 80075f4:	f7fb fac4 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80075f8:	2121      	movs	r1, #33	; 0x21
 80075fa:	2007      	movs	r0, #7
 80075fc:	f7fb fac0 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8007600:	2123      	movs	r1, #35	; 0x23
 8007602:	2007      	movs	r0, #7
 8007604:	f7fb fabc 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8007608:	2133      	movs	r1, #51	; 0x33
 800760a:	2007      	movs	r0, #7
 800760c:	f7fb fab8 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8007610:	f240 1133 	movw	r1, #307	; 0x133
 8007614:	2007      	movs	r0, #7
 8007616:	f7fb fab3 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 800761a:	2100      	movs	r1, #0
 800761c:	20a0      	movs	r0, #160	; 0xa0
 800761e:	f7fb faaf 	bl	8002b80 <LCD_WriteReg>
 8007622:	f000 bc6b 	b.w	8007efc <LCD_Init+0x3e34>
 8007626:	bf00      	nop
 8007628:	200007cc 	.word	0x200007cc
	} else if (lcddev.id == 0x4535) {
 800762c:	4b5b      	ldr	r3, [pc, #364]	; (800779c <LCD_Init+0x36d4>)
 800762e:	889b      	ldrh	r3, [r3, #4]
 8007630:	f244 5235 	movw	r2, #17717	; 0x4535
 8007634:	4293      	cmp	r3, r2
 8007636:	f040 80b3 	bne.w	80077a0 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 800763a:	2130      	movs	r1, #48	; 0x30
 800763c:	2015      	movs	r0, #21
 800763e:	f7fb fa9f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 8007642:	2110      	movs	r1, #16
 8007644:	209a      	movs	r0, #154	; 0x9a
 8007646:	f7fb fa9b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 800764a:	2120      	movs	r1, #32
 800764c:	2011      	movs	r0, #17
 800764e:	f7fb fa97 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8007652:	f243 4128 	movw	r1, #13352	; 0x3428
 8007656:	2010      	movs	r0, #16
 8007658:	f7fb fa92 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 800765c:	2102      	movs	r1, #2
 800765e:	2012      	movs	r0, #18
 8007660:	f7fb fa8e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8007664:	f241 0138 	movw	r1, #4152	; 0x1038
 8007668:	2013      	movs	r0, #19
 800766a:	f7fb fa89 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(40);
 800766e:	2028      	movs	r0, #40	; 0x28
 8007670:	f7f9 fa2a 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8007674:	2112      	movs	r1, #18
 8007676:	2012      	movs	r0, #18
 8007678:	f7fb fa82 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(40);
 800767c:	2028      	movs	r0, #40	; 0x28
 800767e:	f7f9 fa23 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8007682:	f243 4120 	movw	r1, #13344	; 0x3420
 8007686:	2010      	movs	r0, #16
 8007688:	f7fb fa7a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 800768c:	f243 0138 	movw	r1, #12344	; 0x3038
 8007690:	2013      	movs	r0, #19
 8007692:	f7fb fa75 	bl	8002b80 <LCD_WriteReg>
		HAL_Delay(70);
 8007696:	2046      	movs	r0, #70	; 0x46
 8007698:	f7f9 fa16 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 800769c:	2100      	movs	r1, #0
 800769e:	2030      	movs	r0, #48	; 0x30
 80076a0:	f7fb fa6e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80076a4:	f240 4102 	movw	r1, #1026	; 0x402
 80076a8:	2031      	movs	r0, #49	; 0x31
 80076aa:	f7fb fa69 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 80076ae:	f240 3107 	movw	r1, #775	; 0x307
 80076b2:	2032      	movs	r0, #50	; 0x32
 80076b4:	f7fb fa64 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 80076b8:	f44f 7141 	mov.w	r1, #772	; 0x304
 80076bc:	2033      	movs	r0, #51	; 0x33
 80076be:	f7fb fa5f 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 80076c2:	2104      	movs	r1, #4
 80076c4:	2034      	movs	r0, #52	; 0x34
 80076c6:	f7fb fa5b 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 80076ca:	f240 4101 	movw	r1, #1025	; 0x401
 80076ce:	2035      	movs	r0, #53	; 0x35
 80076d0:	f7fb fa56 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 80076d4:	f240 7107 	movw	r1, #1799	; 0x707
 80076d8:	2036      	movs	r0, #54	; 0x36
 80076da:	f7fb fa51 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80076de:	f240 3105 	movw	r1, #773	; 0x305
 80076e2:	2037      	movs	r0, #55	; 0x37
 80076e4:	f7fb fa4c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 80076e8:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80076ec:	2038      	movs	r0, #56	; 0x38
 80076ee:	f7fb fa47 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 80076f2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80076f6:	2039      	movs	r0, #57	; 0x39
 80076f8:	f7fb fa42 	bl	8002b80 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 80076fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007700:	2001      	movs	r0, #1
 8007702:	f7fb fa3d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8007706:	f44f 7140 	mov.w	r1, #768	; 0x300
 800770a:	2002      	movs	r0, #2
 800770c:	f7fb fa38 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8007710:	f241 0130 	movw	r1, #4144	; 0x1030
 8007714:	2003      	movs	r0, #3
 8007716:	f7fb fa33 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 800771a:	f640 0108 	movw	r1, #2056	; 0x808
 800771e:	2008      	movs	r0, #8
 8007720:	f7fb fa2e 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8007724:	2108      	movs	r1, #8
 8007726:	200a      	movs	r0, #10
 8007728:	f7fb fa2a 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 800772c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007730:	2060      	movs	r0, #96	; 0x60
 8007732:	f7fb fa25 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8007736:	2101      	movs	r1, #1
 8007738:	2061      	movs	r0, #97	; 0x61
 800773a:	f7fb fa21 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 800773e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8007742:	2090      	movs	r0, #144	; 0x90
 8007744:	f7fb fa1c 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8007748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800774c:	2092      	movs	r0, #146	; 0x92
 800774e:	f7fb fa17 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 8007752:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007756:	2093      	movs	r0, #147	; 0x93
 8007758:	f7fb fa12 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 800775c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8007760:	20a0      	movs	r0, #160	; 0xa0
 8007762:	f7fb fa0d 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8007766:	2110      	movs	r1, #16
 8007768:	20a3      	movs	r0, #163	; 0xa3
 800776a:	f7fb fa09 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 800776e:	2101      	movs	r1, #1
 8007770:	2007      	movs	r0, #7
 8007772:	f7fb fa05 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8007776:	2121      	movs	r1, #33	; 0x21
 8007778:	2007      	movs	r0, #7
 800777a:	f7fb fa01 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 800777e:	2123      	movs	r1, #35	; 0x23
 8007780:	2007      	movs	r0, #7
 8007782:	f7fb f9fd 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8007786:	2133      	movs	r1, #51	; 0x33
 8007788:	2007      	movs	r0, #7
 800778a:	f7fb f9f9 	bl	8002b80 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 800778e:	f240 1133 	movw	r1, #307	; 0x133
 8007792:	2007      	movs	r0, #7
 8007794:	f7fb f9f4 	bl	8002b80 <LCD_WriteReg>
 8007798:	e3b0      	b.n	8007efc <LCD_Init+0x3e34>
 800779a:	bf00      	nop
 800779c:	200007cc 	.word	0x200007cc
	} else if (lcddev.id == 0X1963) {
 80077a0:	4ba8      	ldr	r3, [pc, #672]	; (8007a44 <LCD_Init+0x397c>)
 80077a2:	889b      	ldrh	r3, [r3, #4]
 80077a4:	f641 1263 	movw	r2, #6499	; 0x1963
 80077a8:	4293      	cmp	r3, r2
 80077aa:	f040 83a7 	bne.w	8007efc <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80077ae:	20e2      	movs	r0, #226	; 0xe2
 80077b0:	f7fb f95a 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 80077b4:	4ba4      	ldr	r3, [pc, #656]	; (8007a48 <LCD_Init+0x3980>)
 80077b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077ba:	611a      	str	r2, [r3, #16]
 80077bc:	4ba2      	ldr	r3, [pc, #648]	; (8007a48 <LCD_Init+0x3980>)
 80077be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077c2:	615a      	str	r2, [r3, #20]
 80077c4:	4ba1      	ldr	r3, [pc, #644]	; (8007a4c <LCD_Init+0x3984>)
 80077c6:	221d      	movs	r2, #29
 80077c8:	60da      	str	r2, [r3, #12]
 80077ca:	4b9f      	ldr	r3, [pc, #636]	; (8007a48 <LCD_Init+0x3980>)
 80077cc:	2280      	movs	r2, #128	; 0x80
 80077ce:	615a      	str	r2, [r3, #20]
 80077d0:	4b9d      	ldr	r3, [pc, #628]	; (8007a48 <LCD_Init+0x3980>)
 80077d2:	2280      	movs	r2, #128	; 0x80
 80077d4:	611a      	str	r2, [r3, #16]
 80077d6:	4b9c      	ldr	r3, [pc, #624]	; (8007a48 <LCD_Init+0x3980>)
 80077d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077dc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80077de:	4b9a      	ldr	r3, [pc, #616]	; (8007a48 <LCD_Init+0x3980>)
 80077e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077e4:	611a      	str	r2, [r3, #16]
 80077e6:	4b98      	ldr	r3, [pc, #608]	; (8007a48 <LCD_Init+0x3980>)
 80077e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ec:	615a      	str	r2, [r3, #20]
 80077ee:	4b97      	ldr	r3, [pc, #604]	; (8007a4c <LCD_Init+0x3984>)
 80077f0:	2202      	movs	r2, #2
 80077f2:	60da      	str	r2, [r3, #12]
 80077f4:	4b94      	ldr	r3, [pc, #592]	; (8007a48 <LCD_Init+0x3980>)
 80077f6:	2280      	movs	r2, #128	; 0x80
 80077f8:	615a      	str	r2, [r3, #20]
 80077fa:	4b93      	ldr	r3, [pc, #588]	; (8007a48 <LCD_Init+0x3980>)
 80077fc:	2280      	movs	r2, #128	; 0x80
 80077fe:	611a      	str	r2, [r3, #16]
 8007800:	4b91      	ldr	r3, [pc, #580]	; (8007a48 <LCD_Init+0x3980>)
 8007802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007806:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8007808:	4b8f      	ldr	r3, [pc, #572]	; (8007a48 <LCD_Init+0x3980>)
 800780a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800780e:	611a      	str	r2, [r3, #16]
 8007810:	4b8d      	ldr	r3, [pc, #564]	; (8007a48 <LCD_Init+0x3980>)
 8007812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007816:	615a      	str	r2, [r3, #20]
 8007818:	4b8c      	ldr	r3, [pc, #560]	; (8007a4c <LCD_Init+0x3984>)
 800781a:	2204      	movs	r2, #4
 800781c:	60da      	str	r2, [r3, #12]
 800781e:	4b8a      	ldr	r3, [pc, #552]	; (8007a48 <LCD_Init+0x3980>)
 8007820:	2280      	movs	r2, #128	; 0x80
 8007822:	615a      	str	r2, [r3, #20]
 8007824:	4b88      	ldr	r3, [pc, #544]	; (8007a48 <LCD_Init+0x3980>)
 8007826:	2280      	movs	r2, #128	; 0x80
 8007828:	611a      	str	r2, [r3, #16]
 800782a:	4b87      	ldr	r3, [pc, #540]	; (8007a48 <LCD_Init+0x3980>)
 800782c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007830:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 8007832:	2001      	movs	r0, #1
 8007834:	f7f9 f948 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8007838:	20e0      	movs	r0, #224	; 0xe0
 800783a:	f7fb f915 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 800783e:	4b82      	ldr	r3, [pc, #520]	; (8007a48 <LCD_Init+0x3980>)
 8007840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007844:	611a      	str	r2, [r3, #16]
 8007846:	4b80      	ldr	r3, [pc, #512]	; (8007a48 <LCD_Init+0x3980>)
 8007848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800784c:	615a      	str	r2, [r3, #20]
 800784e:	4b7f      	ldr	r3, [pc, #508]	; (8007a4c <LCD_Init+0x3984>)
 8007850:	2201      	movs	r2, #1
 8007852:	60da      	str	r2, [r3, #12]
 8007854:	4b7c      	ldr	r3, [pc, #496]	; (8007a48 <LCD_Init+0x3980>)
 8007856:	2280      	movs	r2, #128	; 0x80
 8007858:	615a      	str	r2, [r3, #20]
 800785a:	4b7b      	ldr	r3, [pc, #492]	; (8007a48 <LCD_Init+0x3980>)
 800785c:	2280      	movs	r2, #128	; 0x80
 800785e:	611a      	str	r2, [r3, #16]
 8007860:	4b79      	ldr	r3, [pc, #484]	; (8007a48 <LCD_Init+0x3980>)
 8007862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007866:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8007868:	200a      	movs	r0, #10
 800786a:	f7f9 f92d 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 800786e:	20e0      	movs	r0, #224	; 0xe0
 8007870:	f7fb f8fa 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8007874:	4b74      	ldr	r3, [pc, #464]	; (8007a48 <LCD_Init+0x3980>)
 8007876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800787a:	611a      	str	r2, [r3, #16]
 800787c:	4b72      	ldr	r3, [pc, #456]	; (8007a48 <LCD_Init+0x3980>)
 800787e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007882:	615a      	str	r2, [r3, #20]
 8007884:	4b71      	ldr	r3, [pc, #452]	; (8007a4c <LCD_Init+0x3984>)
 8007886:	2203      	movs	r2, #3
 8007888:	60da      	str	r2, [r3, #12]
 800788a:	4b6f      	ldr	r3, [pc, #444]	; (8007a48 <LCD_Init+0x3980>)
 800788c:	2280      	movs	r2, #128	; 0x80
 800788e:	615a      	str	r2, [r3, #20]
 8007890:	4b6d      	ldr	r3, [pc, #436]	; (8007a48 <LCD_Init+0x3980>)
 8007892:	2280      	movs	r2, #128	; 0x80
 8007894:	611a      	str	r2, [r3, #16]
 8007896:	4b6c      	ldr	r3, [pc, #432]	; (8007a48 <LCD_Init+0x3980>)
 8007898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800789c:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 800789e:	200c      	movs	r0, #12
 80078a0:	f7f9 f912 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 80078a4:	2001      	movs	r0, #1
 80078a6:	f7fb f8df 	bl	8002a68 <LCD_WR_REG>
		HAL_Delay(10);
 80078aa:	200a      	movs	r0, #10
 80078ac:	f7f9 f90c 	bl	8000ac8 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 80078b0:	20e6      	movs	r0, #230	; 0xe6
 80078b2:	f7fb f8d9 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 80078b6:	4b64      	ldr	r3, [pc, #400]	; (8007a48 <LCD_Init+0x3980>)
 80078b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078bc:	611a      	str	r2, [r3, #16]
 80078be:	4b62      	ldr	r3, [pc, #392]	; (8007a48 <LCD_Init+0x3980>)
 80078c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078c4:	615a      	str	r2, [r3, #20]
 80078c6:	4b61      	ldr	r3, [pc, #388]	; (8007a4c <LCD_Init+0x3984>)
 80078c8:	222f      	movs	r2, #47	; 0x2f
 80078ca:	60da      	str	r2, [r3, #12]
 80078cc:	4b5e      	ldr	r3, [pc, #376]	; (8007a48 <LCD_Init+0x3980>)
 80078ce:	2280      	movs	r2, #128	; 0x80
 80078d0:	615a      	str	r2, [r3, #20]
 80078d2:	4b5d      	ldr	r3, [pc, #372]	; (8007a48 <LCD_Init+0x3980>)
 80078d4:	2280      	movs	r2, #128	; 0x80
 80078d6:	611a      	str	r2, [r3, #16]
 80078d8:	4b5b      	ldr	r3, [pc, #364]	; (8007a48 <LCD_Init+0x3980>)
 80078da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078de:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80078e0:	4b59      	ldr	r3, [pc, #356]	; (8007a48 <LCD_Init+0x3980>)
 80078e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078e6:	611a      	str	r2, [r3, #16]
 80078e8:	4b57      	ldr	r3, [pc, #348]	; (8007a48 <LCD_Init+0x3980>)
 80078ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078ee:	615a      	str	r2, [r3, #20]
 80078f0:	4b56      	ldr	r3, [pc, #344]	; (8007a4c <LCD_Init+0x3984>)
 80078f2:	22ff      	movs	r2, #255	; 0xff
 80078f4:	60da      	str	r2, [r3, #12]
 80078f6:	4b54      	ldr	r3, [pc, #336]	; (8007a48 <LCD_Init+0x3980>)
 80078f8:	2280      	movs	r2, #128	; 0x80
 80078fa:	615a      	str	r2, [r3, #20]
 80078fc:	4b52      	ldr	r3, [pc, #328]	; (8007a48 <LCD_Init+0x3980>)
 80078fe:	2280      	movs	r2, #128	; 0x80
 8007900:	611a      	str	r2, [r3, #16]
 8007902:	4b51      	ldr	r3, [pc, #324]	; (8007a48 <LCD_Init+0x3980>)
 8007904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007908:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 800790a:	4b4f      	ldr	r3, [pc, #316]	; (8007a48 <LCD_Init+0x3980>)
 800790c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007910:	611a      	str	r2, [r3, #16]
 8007912:	4b4d      	ldr	r3, [pc, #308]	; (8007a48 <LCD_Init+0x3980>)
 8007914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007918:	615a      	str	r2, [r3, #20]
 800791a:	4b4c      	ldr	r3, [pc, #304]	; (8007a4c <LCD_Init+0x3984>)
 800791c:	22ff      	movs	r2, #255	; 0xff
 800791e:	60da      	str	r2, [r3, #12]
 8007920:	4b49      	ldr	r3, [pc, #292]	; (8007a48 <LCD_Init+0x3980>)
 8007922:	2280      	movs	r2, #128	; 0x80
 8007924:	615a      	str	r2, [r3, #20]
 8007926:	4b48      	ldr	r3, [pc, #288]	; (8007a48 <LCD_Init+0x3980>)
 8007928:	2280      	movs	r2, #128	; 0x80
 800792a:	611a      	str	r2, [r3, #16]
 800792c:	4b46      	ldr	r3, [pc, #280]	; (8007a48 <LCD_Init+0x3980>)
 800792e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007932:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8007934:	20b0      	movs	r0, #176	; 0xb0
 8007936:	f7fb f897 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 800793a:	4b43      	ldr	r3, [pc, #268]	; (8007a48 <LCD_Init+0x3980>)
 800793c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007940:	611a      	str	r2, [r3, #16]
 8007942:	4b41      	ldr	r3, [pc, #260]	; (8007a48 <LCD_Init+0x3980>)
 8007944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007948:	615a      	str	r2, [r3, #20]
 800794a:	4b40      	ldr	r3, [pc, #256]	; (8007a4c <LCD_Init+0x3984>)
 800794c:	2220      	movs	r2, #32
 800794e:	60da      	str	r2, [r3, #12]
 8007950:	4b3d      	ldr	r3, [pc, #244]	; (8007a48 <LCD_Init+0x3980>)
 8007952:	2280      	movs	r2, #128	; 0x80
 8007954:	615a      	str	r2, [r3, #20]
 8007956:	4b3c      	ldr	r3, [pc, #240]	; (8007a48 <LCD_Init+0x3980>)
 8007958:	2280      	movs	r2, #128	; 0x80
 800795a:	611a      	str	r2, [r3, #16]
 800795c:	4b3a      	ldr	r3, [pc, #232]	; (8007a48 <LCD_Init+0x3980>)
 800795e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007962:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8007964:	4b38      	ldr	r3, [pc, #224]	; (8007a48 <LCD_Init+0x3980>)
 8007966:	f44f 7280 	mov.w	r2, #256	; 0x100
 800796a:	611a      	str	r2, [r3, #16]
 800796c:	4b36      	ldr	r3, [pc, #216]	; (8007a48 <LCD_Init+0x3980>)
 800796e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007972:	615a      	str	r2, [r3, #20]
 8007974:	4b35      	ldr	r3, [pc, #212]	; (8007a4c <LCD_Init+0x3984>)
 8007976:	2200      	movs	r2, #0
 8007978:	60da      	str	r2, [r3, #12]
 800797a:	4b33      	ldr	r3, [pc, #204]	; (8007a48 <LCD_Init+0x3980>)
 800797c:	2280      	movs	r2, #128	; 0x80
 800797e:	615a      	str	r2, [r3, #20]
 8007980:	4b31      	ldr	r3, [pc, #196]	; (8007a48 <LCD_Init+0x3980>)
 8007982:	2280      	movs	r2, #128	; 0x80
 8007984:	611a      	str	r2, [r3, #16]
 8007986:	4b30      	ldr	r3, [pc, #192]	; (8007a48 <LCD_Init+0x3980>)
 8007988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800798c:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 800798e:	4b2e      	ldr	r3, [pc, #184]	; (8007a48 <LCD_Init+0x3980>)
 8007990:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007994:	611a      	str	r2, [r3, #16]
 8007996:	4b2c      	ldr	r3, [pc, #176]	; (8007a48 <LCD_Init+0x3980>)
 8007998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800799c:	615a      	str	r2, [r3, #20]
 800799e:	4b2b      	ldr	r3, [pc, #172]	; (8007a4c <LCD_Init+0x3984>)
 80079a0:	2203      	movs	r2, #3
 80079a2:	60da      	str	r2, [r3, #12]
 80079a4:	4b28      	ldr	r3, [pc, #160]	; (8007a48 <LCD_Init+0x3980>)
 80079a6:	2280      	movs	r2, #128	; 0x80
 80079a8:	615a      	str	r2, [r3, #20]
 80079aa:	4b27      	ldr	r3, [pc, #156]	; (8007a48 <LCD_Init+0x3980>)
 80079ac:	2280      	movs	r2, #128	; 0x80
 80079ae:	611a      	str	r2, [r3, #16]
 80079b0:	4b25      	ldr	r3, [pc, #148]	; (8007a48 <LCD_Init+0x3980>)
 80079b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079b6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 80079b8:	4b23      	ldr	r3, [pc, #140]	; (8007a48 <LCD_Init+0x3980>)
 80079ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079be:	611a      	str	r2, [r3, #16]
 80079c0:	4b21      	ldr	r3, [pc, #132]	; (8007a48 <LCD_Init+0x3980>)
 80079c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079c6:	615a      	str	r2, [r3, #20]
 80079c8:	4b20      	ldr	r3, [pc, #128]	; (8007a4c <LCD_Init+0x3984>)
 80079ca:	f240 321f 	movw	r2, #799	; 0x31f
 80079ce:	60da      	str	r2, [r3, #12]
 80079d0:	4b1d      	ldr	r3, [pc, #116]	; (8007a48 <LCD_Init+0x3980>)
 80079d2:	2280      	movs	r2, #128	; 0x80
 80079d4:	615a      	str	r2, [r3, #20]
 80079d6:	4b1c      	ldr	r3, [pc, #112]	; (8007a48 <LCD_Init+0x3980>)
 80079d8:	2280      	movs	r2, #128	; 0x80
 80079da:	611a      	str	r2, [r3, #16]
 80079dc:	4b1a      	ldr	r3, [pc, #104]	; (8007a48 <LCD_Init+0x3980>)
 80079de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079e2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 80079e4:	4b18      	ldr	r3, [pc, #96]	; (8007a48 <LCD_Init+0x3980>)
 80079e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079ea:	611a      	str	r2, [r3, #16]
 80079ec:	4b16      	ldr	r3, [pc, #88]	; (8007a48 <LCD_Init+0x3980>)
 80079ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079f2:	615a      	str	r2, [r3, #20]
 80079f4:	4b15      	ldr	r3, [pc, #84]	; (8007a4c <LCD_Init+0x3984>)
 80079f6:	2201      	movs	r2, #1
 80079f8:	60da      	str	r2, [r3, #12]
 80079fa:	4b13      	ldr	r3, [pc, #76]	; (8007a48 <LCD_Init+0x3980>)
 80079fc:	2280      	movs	r2, #128	; 0x80
 80079fe:	615a      	str	r2, [r3, #20]
 8007a00:	4b11      	ldr	r3, [pc, #68]	; (8007a48 <LCD_Init+0x3980>)
 8007a02:	2280      	movs	r2, #128	; 0x80
 8007a04:	611a      	str	r2, [r3, #16]
 8007a06:	4b10      	ldr	r3, [pc, #64]	; (8007a48 <LCD_Init+0x3980>)
 8007a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a0c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8007a0e:	4b0e      	ldr	r3, [pc, #56]	; (8007a48 <LCD_Init+0x3980>)
 8007a10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a14:	611a      	str	r2, [r3, #16]
 8007a16:	4b0c      	ldr	r3, [pc, #48]	; (8007a48 <LCD_Init+0x3980>)
 8007a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a1c:	615a      	str	r2, [r3, #20]
 8007a1e:	4b0b      	ldr	r3, [pc, #44]	; (8007a4c <LCD_Init+0x3984>)
 8007a20:	f240 12df 	movw	r2, #479	; 0x1df
 8007a24:	60da      	str	r2, [r3, #12]
 8007a26:	4b08      	ldr	r3, [pc, #32]	; (8007a48 <LCD_Init+0x3980>)
 8007a28:	2280      	movs	r2, #128	; 0x80
 8007a2a:	615a      	str	r2, [r3, #20]
 8007a2c:	4b06      	ldr	r3, [pc, #24]	; (8007a48 <LCD_Init+0x3980>)
 8007a2e:	2280      	movs	r2, #128	; 0x80
 8007a30:	611a      	str	r2, [r3, #16]
 8007a32:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <LCD_Init+0x3980>)
 8007a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a38:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8007a3a:	4b03      	ldr	r3, [pc, #12]	; (8007a48 <LCD_Init+0x3980>)
 8007a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a40:	e006      	b.n	8007a50 <LCD_Init+0x3988>
 8007a42:	bf00      	nop
 8007a44:	200007cc 	.word	0x200007cc
 8007a48:	40011000 	.word	0x40011000
 8007a4c:	40010c00 	.word	0x40010c00
 8007a50:	611a      	str	r2, [r3, #16]
 8007a52:	4ba3      	ldr	r3, [pc, #652]	; (8007ce0 <LCD_Init+0x3c18>)
 8007a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a58:	615a      	str	r2, [r3, #20]
 8007a5a:	4ba2      	ldr	r3, [pc, #648]	; (8007ce4 <LCD_Init+0x3c1c>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	60da      	str	r2, [r3, #12]
 8007a60:	4b9f      	ldr	r3, [pc, #636]	; (8007ce0 <LCD_Init+0x3c18>)
 8007a62:	2280      	movs	r2, #128	; 0x80
 8007a64:	615a      	str	r2, [r3, #20]
 8007a66:	4b9e      	ldr	r3, [pc, #632]	; (8007ce0 <LCD_Init+0x3c18>)
 8007a68:	2280      	movs	r2, #128	; 0x80
 8007a6a:	611a      	str	r2, [r3, #16]
 8007a6c:	4b9c      	ldr	r3, [pc, #624]	; (8007ce0 <LCD_Init+0x3c18>)
 8007a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a72:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8007a74:	20b4      	movs	r0, #180	; 0xb4
 8007a76:	f7fa fff7 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8007a7a:	4b99      	ldr	r3, [pc, #612]	; (8007ce0 <LCD_Init+0x3c18>)
 8007a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a80:	611a      	str	r2, [r3, #16]
 8007a82:	4b97      	ldr	r3, [pc, #604]	; (8007ce0 <LCD_Init+0x3c18>)
 8007a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a88:	615a      	str	r2, [r3, #20]
 8007a8a:	4b96      	ldr	r3, [pc, #600]	; (8007ce4 <LCD_Init+0x3c1c>)
 8007a8c:	2204      	movs	r2, #4
 8007a8e:	60da      	str	r2, [r3, #12]
 8007a90:	4b93      	ldr	r3, [pc, #588]	; (8007ce0 <LCD_Init+0x3c18>)
 8007a92:	2280      	movs	r2, #128	; 0x80
 8007a94:	615a      	str	r2, [r3, #20]
 8007a96:	4b92      	ldr	r3, [pc, #584]	; (8007ce0 <LCD_Init+0x3c18>)
 8007a98:	2280      	movs	r2, #128	; 0x80
 8007a9a:	611a      	str	r2, [r3, #16]
 8007a9c:	4b90      	ldr	r3, [pc, #576]	; (8007ce0 <LCD_Init+0x3c18>)
 8007a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aa2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8007aa4:	4b8e      	ldr	r3, [pc, #568]	; (8007ce0 <LCD_Init+0x3c18>)
 8007aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007aaa:	611a      	str	r2, [r3, #16]
 8007aac:	4b8c      	ldr	r3, [pc, #560]	; (8007ce0 <LCD_Init+0x3c18>)
 8007aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ab2:	615a      	str	r2, [r3, #20]
 8007ab4:	4b8b      	ldr	r3, [pc, #556]	; (8007ce4 <LCD_Init+0x3c1c>)
 8007ab6:	f240 421f 	movw	r2, #1055	; 0x41f
 8007aba:	60da      	str	r2, [r3, #12]
 8007abc:	4b88      	ldr	r3, [pc, #544]	; (8007ce0 <LCD_Init+0x3c18>)
 8007abe:	2280      	movs	r2, #128	; 0x80
 8007ac0:	615a      	str	r2, [r3, #20]
 8007ac2:	4b87      	ldr	r3, [pc, #540]	; (8007ce0 <LCD_Init+0x3c18>)
 8007ac4:	2280      	movs	r2, #128	; 0x80
 8007ac6:	611a      	str	r2, [r3, #16]
 8007ac8:	4b85      	ldr	r3, [pc, #532]	; (8007ce0 <LCD_Init+0x3c18>)
 8007aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ace:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8007ad0:	4b83      	ldr	r3, [pc, #524]	; (8007ce0 <LCD_Init+0x3c18>)
 8007ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ad6:	611a      	str	r2, [r3, #16]
 8007ad8:	4b81      	ldr	r3, [pc, #516]	; (8007ce0 <LCD_Init+0x3c18>)
 8007ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ade:	615a      	str	r2, [r3, #20]
 8007ae0:	4b80      	ldr	r3, [pc, #512]	; (8007ce4 <LCD_Init+0x3c1c>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	60da      	str	r2, [r3, #12]
 8007ae6:	4b7e      	ldr	r3, [pc, #504]	; (8007ce0 <LCD_Init+0x3c18>)
 8007ae8:	2280      	movs	r2, #128	; 0x80
 8007aea:	615a      	str	r2, [r3, #20]
 8007aec:	4b7c      	ldr	r3, [pc, #496]	; (8007ce0 <LCD_Init+0x3c18>)
 8007aee:	2280      	movs	r2, #128	; 0x80
 8007af0:	611a      	str	r2, [r3, #16]
 8007af2:	4b7b      	ldr	r3, [pc, #492]	; (8007ce0 <LCD_Init+0x3c18>)
 8007af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007af8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8007afa:	4b79      	ldr	r3, [pc, #484]	; (8007ce0 <LCD_Init+0x3c18>)
 8007afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b00:	611a      	str	r2, [r3, #16]
 8007b02:	4b77      	ldr	r3, [pc, #476]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b08:	615a      	str	r2, [r3, #20]
 8007b0a:	4b76      	ldr	r3, [pc, #472]	; (8007ce4 <LCD_Init+0x3c1c>)
 8007b0c:	222e      	movs	r2, #46	; 0x2e
 8007b0e:	60da      	str	r2, [r3, #12]
 8007b10:	4b73      	ldr	r3, [pc, #460]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b12:	2280      	movs	r2, #128	; 0x80
 8007b14:	615a      	str	r2, [r3, #20]
 8007b16:	4b72      	ldr	r3, [pc, #456]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b18:	2280      	movs	r2, #128	; 0x80
 8007b1a:	611a      	str	r2, [r3, #16]
 8007b1c:	4b70      	ldr	r3, [pc, #448]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b22:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8007b24:	4b6e      	ldr	r3, [pc, #440]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b2a:	611a      	str	r2, [r3, #16]
 8007b2c:	4b6c      	ldr	r3, [pc, #432]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b32:	615a      	str	r2, [r3, #20]
 8007b34:	4b6b      	ldr	r3, [pc, #428]	; (8007ce4 <LCD_Init+0x3c1c>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	60da      	str	r2, [r3, #12]
 8007b3a:	4b69      	ldr	r3, [pc, #420]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b3c:	2280      	movs	r2, #128	; 0x80
 8007b3e:	615a      	str	r2, [r3, #20]
 8007b40:	4b67      	ldr	r3, [pc, #412]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b42:	2280      	movs	r2, #128	; 0x80
 8007b44:	611a      	str	r2, [r3, #16]
 8007b46:	4b66      	ldr	r3, [pc, #408]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b4c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007b4e:	4b64      	ldr	r3, [pc, #400]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b54:	611a      	str	r2, [r3, #16]
 8007b56:	4b62      	ldr	r3, [pc, #392]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b5c:	615a      	str	r2, [r3, #20]
 8007b5e:	4b61      	ldr	r3, [pc, #388]	; (8007ce4 <LCD_Init+0x3c1c>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	60da      	str	r2, [r3, #12]
 8007b64:	4b5e      	ldr	r3, [pc, #376]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b66:	2280      	movs	r2, #128	; 0x80
 8007b68:	615a      	str	r2, [r3, #20]
 8007b6a:	4b5d      	ldr	r3, [pc, #372]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b6c:	2280      	movs	r2, #128	; 0x80
 8007b6e:	611a      	str	r2, [r3, #16]
 8007b70:	4b5b      	ldr	r3, [pc, #364]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b76:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007b78:	4b59      	ldr	r3, [pc, #356]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b7e:	611a      	str	r2, [r3, #16]
 8007b80:	4b57      	ldr	r3, [pc, #348]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b86:	615a      	str	r2, [r3, #20]
 8007b88:	4b56      	ldr	r3, [pc, #344]	; (8007ce4 <LCD_Init+0x3c1c>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	60da      	str	r2, [r3, #12]
 8007b8e:	4b54      	ldr	r3, [pc, #336]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b90:	2280      	movs	r2, #128	; 0x80
 8007b92:	615a      	str	r2, [r3, #20]
 8007b94:	4b52      	ldr	r3, [pc, #328]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b96:	2280      	movs	r2, #128	; 0x80
 8007b98:	611a      	str	r2, [r3, #16]
 8007b9a:	4b51      	ldr	r3, [pc, #324]	; (8007ce0 <LCD_Init+0x3c18>)
 8007b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ba0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007ba2:	4b4f      	ldr	r3, [pc, #316]	; (8007ce0 <LCD_Init+0x3c18>)
 8007ba4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ba8:	611a      	str	r2, [r3, #16]
 8007baa:	4b4d      	ldr	r3, [pc, #308]	; (8007ce0 <LCD_Init+0x3c18>)
 8007bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bb0:	615a      	str	r2, [r3, #20]
 8007bb2:	4b4c      	ldr	r3, [pc, #304]	; (8007ce4 <LCD_Init+0x3c1c>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	60da      	str	r2, [r3, #12]
 8007bb8:	4b49      	ldr	r3, [pc, #292]	; (8007ce0 <LCD_Init+0x3c18>)
 8007bba:	2280      	movs	r2, #128	; 0x80
 8007bbc:	615a      	str	r2, [r3, #20]
 8007bbe:	4b48      	ldr	r3, [pc, #288]	; (8007ce0 <LCD_Init+0x3c18>)
 8007bc0:	2280      	movs	r2, #128	; 0x80
 8007bc2:	611a      	str	r2, [r3, #16]
 8007bc4:	4b46      	ldr	r3, [pc, #280]	; (8007ce0 <LCD_Init+0x3c18>)
 8007bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bca:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8007bcc:	20b6      	movs	r0, #182	; 0xb6
 8007bce:	f7fa ff4b 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8007bd2:	4b43      	ldr	r3, [pc, #268]	; (8007ce0 <LCD_Init+0x3c18>)
 8007bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bd8:	611a      	str	r2, [r3, #16]
 8007bda:	4b41      	ldr	r3, [pc, #260]	; (8007ce0 <LCD_Init+0x3c18>)
 8007bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007be0:	615a      	str	r2, [r3, #20]
 8007be2:	4b40      	ldr	r3, [pc, #256]	; (8007ce4 <LCD_Init+0x3c1c>)
 8007be4:	2202      	movs	r2, #2
 8007be6:	60da      	str	r2, [r3, #12]
 8007be8:	4b3d      	ldr	r3, [pc, #244]	; (8007ce0 <LCD_Init+0x3c18>)
 8007bea:	2280      	movs	r2, #128	; 0x80
 8007bec:	615a      	str	r2, [r3, #20]
 8007bee:	4b3c      	ldr	r3, [pc, #240]	; (8007ce0 <LCD_Init+0x3c18>)
 8007bf0:	2280      	movs	r2, #128	; 0x80
 8007bf2:	611a      	str	r2, [r3, #16]
 8007bf4:	4b3a      	ldr	r3, [pc, #232]	; (8007ce0 <LCD_Init+0x3c18>)
 8007bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bfa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8007bfc:	4b38      	ldr	r3, [pc, #224]	; (8007ce0 <LCD_Init+0x3c18>)
 8007bfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c02:	611a      	str	r2, [r3, #16]
 8007c04:	4b36      	ldr	r3, [pc, #216]	; (8007ce0 <LCD_Init+0x3c18>)
 8007c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c0a:	615a      	str	r2, [r3, #20]
 8007c0c:	4b35      	ldr	r3, [pc, #212]	; (8007ce4 <LCD_Init+0x3c1c>)
 8007c0e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8007c12:	60da      	str	r2, [r3, #12]
 8007c14:	4b32      	ldr	r3, [pc, #200]	; (8007ce0 <LCD_Init+0x3c18>)
 8007c16:	2280      	movs	r2, #128	; 0x80
 8007c18:	615a      	str	r2, [r3, #20]
 8007c1a:	4b31      	ldr	r3, [pc, #196]	; (8007ce0 <LCD_Init+0x3c18>)
 8007c1c:	2280      	movs	r2, #128	; 0x80
 8007c1e:	611a      	str	r2, [r3, #16]
 8007c20:	4b2f      	ldr	r3, [pc, #188]	; (8007ce0 <LCD_Init+0x3c18>)
 8007c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c26:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8007c28:	4b2d      	ldr	r3, [pc, #180]	; (8007ce0 <LCD_Init+0x3c18>)
 8007c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c2e:	611a      	str	r2, [r3, #16]
 8007c30:	4b2b      	ldr	r3, [pc, #172]	; (8007ce0 <LCD_Init+0x3c18>)
 8007c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c36:	615a      	str	r2, [r3, #20]
 8007c38:	4b2a      	ldr	r3, [pc, #168]	; (8007ce4 <LCD_Init+0x3c1c>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	60da      	str	r2, [r3, #12]
 8007c3e:	4b28      	ldr	r3, [pc, #160]	; (8007ce0 <LCD_Init+0x3c18>)
 8007c40:	2280      	movs	r2, #128	; 0x80
 8007c42:	615a      	str	r2, [r3, #20]
 8007c44:	4b26      	ldr	r3, [pc, #152]	; (8007ce0 <LCD_Init+0x3c18>)
 8007c46:	2280      	movs	r2, #128	; 0x80
 8007c48:	611a      	str	r2, [r3, #16]
 8007c4a:	4b25      	ldr	r3, [pc, #148]	; (8007ce0 <LCD_Init+0x3c18>)
 8007c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c50:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8007c52:	4b23      	ldr	r3, [pc, #140]	; (8007ce0 <LCD_Init+0x3c18>)
 8007c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c58:	611a      	str	r2, [r3, #16]
 8007c5a:	4b21      	ldr	r3, [pc, #132]	; (8007ce0 <LCD_Init+0x3c18>)
 8007c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c60:	615a      	str	r2, [r3, #20]
 8007c62:	4b20      	ldr	r3, [pc, #128]	; (8007ce4 <LCD_Init+0x3c1c>)
 8007c64:	2217      	movs	r2, #23
 8007c66:	60da      	str	r2, [r3, #12]
 8007c68:	4b1d      	ldr	r3, [pc, #116]	; (8007ce0 <LCD_Init+0x3c18>)
 8007c6a:	2280      	movs	r2, #128	; 0x80
 8007c6c:	615a      	str	r2, [r3, #20]
 8007c6e:	4b1c      	ldr	r3, [pc, #112]	; (8007ce0 <LCD_Init+0x3c18>)
 8007c70:	2280      	movs	r2, #128	; 0x80
 8007c72:	611a      	str	r2, [r3, #16]
 8007c74:	4b1a      	ldr	r3, [pc, #104]	; (8007ce0 <LCD_Init+0x3c18>)
 8007c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c7a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8007c7c:	4b18      	ldr	r3, [pc, #96]	; (8007ce0 <LCD_Init+0x3c18>)
 8007c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c82:	611a      	str	r2, [r3, #16]
 8007c84:	4b16      	ldr	r3, [pc, #88]	; (8007ce0 <LCD_Init+0x3c18>)
 8007c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c8a:	615a      	str	r2, [r3, #20]
 8007c8c:	4b15      	ldr	r3, [pc, #84]	; (8007ce4 <LCD_Init+0x3c1c>)
 8007c8e:	2215      	movs	r2, #21
 8007c90:	60da      	str	r2, [r3, #12]
 8007c92:	4b13      	ldr	r3, [pc, #76]	; (8007ce0 <LCD_Init+0x3c18>)
 8007c94:	2280      	movs	r2, #128	; 0x80
 8007c96:	615a      	str	r2, [r3, #20]
 8007c98:	4b11      	ldr	r3, [pc, #68]	; (8007ce0 <LCD_Init+0x3c18>)
 8007c9a:	2280      	movs	r2, #128	; 0x80
 8007c9c:	611a      	str	r2, [r3, #16]
 8007c9e:	4b10      	ldr	r3, [pc, #64]	; (8007ce0 <LCD_Init+0x3c18>)
 8007ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ca4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007ca6:	4b0e      	ldr	r3, [pc, #56]	; (8007ce0 <LCD_Init+0x3c18>)
 8007ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cac:	611a      	str	r2, [r3, #16]
 8007cae:	4b0c      	ldr	r3, [pc, #48]	; (8007ce0 <LCD_Init+0x3c18>)
 8007cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cb4:	615a      	str	r2, [r3, #20]
 8007cb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ce4 <LCD_Init+0x3c1c>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	60da      	str	r2, [r3, #12]
 8007cbc:	4b08      	ldr	r3, [pc, #32]	; (8007ce0 <LCD_Init+0x3c18>)
 8007cbe:	2280      	movs	r2, #128	; 0x80
 8007cc0:	615a      	str	r2, [r3, #20]
 8007cc2:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <LCD_Init+0x3c18>)
 8007cc4:	2280      	movs	r2, #128	; 0x80
 8007cc6:	611a      	str	r2, [r3, #16]
 8007cc8:	4b05      	ldr	r3, [pc, #20]	; (8007ce0 <LCD_Init+0x3c18>)
 8007cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cce:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007cd0:	4b03      	ldr	r3, [pc, #12]	; (8007ce0 <LCD_Init+0x3c18>)
 8007cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cd6:	611a      	str	r2, [r3, #16]
 8007cd8:	4b01      	ldr	r3, [pc, #4]	; (8007ce0 <LCD_Init+0x3c18>)
 8007cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cde:	e003      	b.n	8007ce8 <LCD_Init+0x3c20>
 8007ce0:	40011000 	.word	0x40011000
 8007ce4:	40010c00 	.word	0x40010c00
 8007ce8:	615a      	str	r2, [r3, #20]
 8007cea:	4b8b      	ldr	r3, [pc, #556]	; (8007f18 <LCD_Init+0x3e50>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	60da      	str	r2, [r3, #12]
 8007cf0:	4b8a      	ldr	r3, [pc, #552]	; (8007f1c <LCD_Init+0x3e54>)
 8007cf2:	2280      	movs	r2, #128	; 0x80
 8007cf4:	615a      	str	r2, [r3, #20]
 8007cf6:	4b89      	ldr	r3, [pc, #548]	; (8007f1c <LCD_Init+0x3e54>)
 8007cf8:	2280      	movs	r2, #128	; 0x80
 8007cfa:	611a      	str	r2, [r3, #16]
 8007cfc:	4b87      	ldr	r3, [pc, #540]	; (8007f1c <LCD_Init+0x3e54>)
 8007cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d02:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8007d04:	20f0      	movs	r0, #240	; 0xf0
 8007d06:	f7fa feaf 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8007d0a:	4b84      	ldr	r3, [pc, #528]	; (8007f1c <LCD_Init+0x3e54>)
 8007d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d10:	611a      	str	r2, [r3, #16]
 8007d12:	4b82      	ldr	r3, [pc, #520]	; (8007f1c <LCD_Init+0x3e54>)
 8007d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d18:	615a      	str	r2, [r3, #20]
 8007d1a:	4b7f      	ldr	r3, [pc, #508]	; (8007f18 <LCD_Init+0x3e50>)
 8007d1c:	2203      	movs	r2, #3
 8007d1e:	60da      	str	r2, [r3, #12]
 8007d20:	4b7e      	ldr	r3, [pc, #504]	; (8007f1c <LCD_Init+0x3e54>)
 8007d22:	2280      	movs	r2, #128	; 0x80
 8007d24:	615a      	str	r2, [r3, #20]
 8007d26:	4b7d      	ldr	r3, [pc, #500]	; (8007f1c <LCD_Init+0x3e54>)
 8007d28:	2280      	movs	r2, #128	; 0x80
 8007d2a:	611a      	str	r2, [r3, #16]
 8007d2c:	4b7b      	ldr	r3, [pc, #492]	; (8007f1c <LCD_Init+0x3e54>)
 8007d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d32:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8007d34:	2029      	movs	r0, #41	; 0x29
 8007d36:	f7fa fe97 	bl	8002a68 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8007d3a:	20d0      	movs	r0, #208	; 0xd0
 8007d3c:	f7fa fe94 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8007d40:	4b76      	ldr	r3, [pc, #472]	; (8007f1c <LCD_Init+0x3e54>)
 8007d42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d46:	611a      	str	r2, [r3, #16]
 8007d48:	4b74      	ldr	r3, [pc, #464]	; (8007f1c <LCD_Init+0x3e54>)
 8007d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d4e:	615a      	str	r2, [r3, #20]
 8007d50:	4b71      	ldr	r3, [pc, #452]	; (8007f18 <LCD_Init+0x3e50>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	60da      	str	r2, [r3, #12]
 8007d56:	4b71      	ldr	r3, [pc, #452]	; (8007f1c <LCD_Init+0x3e54>)
 8007d58:	2280      	movs	r2, #128	; 0x80
 8007d5a:	615a      	str	r2, [r3, #20]
 8007d5c:	4b6f      	ldr	r3, [pc, #444]	; (8007f1c <LCD_Init+0x3e54>)
 8007d5e:	2280      	movs	r2, #128	; 0x80
 8007d60:	611a      	str	r2, [r3, #16]
 8007d62:	4b6e      	ldr	r3, [pc, #440]	; (8007f1c <LCD_Init+0x3e54>)
 8007d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d68:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8007d6a:	20be      	movs	r0, #190	; 0xbe
 8007d6c:	f7fa fe7c 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8007d70:	4b6a      	ldr	r3, [pc, #424]	; (8007f1c <LCD_Init+0x3e54>)
 8007d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d76:	611a      	str	r2, [r3, #16]
 8007d78:	4b68      	ldr	r3, [pc, #416]	; (8007f1c <LCD_Init+0x3e54>)
 8007d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d7e:	615a      	str	r2, [r3, #20]
 8007d80:	4b65      	ldr	r3, [pc, #404]	; (8007f18 <LCD_Init+0x3e50>)
 8007d82:	2205      	movs	r2, #5
 8007d84:	60da      	str	r2, [r3, #12]
 8007d86:	4b65      	ldr	r3, [pc, #404]	; (8007f1c <LCD_Init+0x3e54>)
 8007d88:	2280      	movs	r2, #128	; 0x80
 8007d8a:	615a      	str	r2, [r3, #20]
 8007d8c:	4b63      	ldr	r3, [pc, #396]	; (8007f1c <LCD_Init+0x3e54>)
 8007d8e:	2280      	movs	r2, #128	; 0x80
 8007d90:	611a      	str	r2, [r3, #16]
 8007d92:	4b62      	ldr	r3, [pc, #392]	; (8007f1c <LCD_Init+0x3e54>)
 8007d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d98:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8007d9a:	4b60      	ldr	r3, [pc, #384]	; (8007f1c <LCD_Init+0x3e54>)
 8007d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007da0:	611a      	str	r2, [r3, #16]
 8007da2:	4b5e      	ldr	r3, [pc, #376]	; (8007f1c <LCD_Init+0x3e54>)
 8007da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007da8:	615a      	str	r2, [r3, #20]
 8007daa:	4b5b      	ldr	r3, [pc, #364]	; (8007f18 <LCD_Init+0x3e50>)
 8007dac:	22fe      	movs	r2, #254	; 0xfe
 8007dae:	60da      	str	r2, [r3, #12]
 8007db0:	4b5a      	ldr	r3, [pc, #360]	; (8007f1c <LCD_Init+0x3e54>)
 8007db2:	2280      	movs	r2, #128	; 0x80
 8007db4:	615a      	str	r2, [r3, #20]
 8007db6:	4b59      	ldr	r3, [pc, #356]	; (8007f1c <LCD_Init+0x3e54>)
 8007db8:	2280      	movs	r2, #128	; 0x80
 8007dba:	611a      	str	r2, [r3, #16]
 8007dbc:	4b57      	ldr	r3, [pc, #348]	; (8007f1c <LCD_Init+0x3e54>)
 8007dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dc2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8007dc4:	4b55      	ldr	r3, [pc, #340]	; (8007f1c <LCD_Init+0x3e54>)
 8007dc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dca:	611a      	str	r2, [r3, #16]
 8007dcc:	4b53      	ldr	r3, [pc, #332]	; (8007f1c <LCD_Init+0x3e54>)
 8007dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dd2:	615a      	str	r2, [r3, #20]
 8007dd4:	4b50      	ldr	r3, [pc, #320]	; (8007f18 <LCD_Init+0x3e50>)
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	60da      	str	r2, [r3, #12]
 8007dda:	4b50      	ldr	r3, [pc, #320]	; (8007f1c <LCD_Init+0x3e54>)
 8007ddc:	2280      	movs	r2, #128	; 0x80
 8007dde:	615a      	str	r2, [r3, #20]
 8007de0:	4b4e      	ldr	r3, [pc, #312]	; (8007f1c <LCD_Init+0x3e54>)
 8007de2:	2280      	movs	r2, #128	; 0x80
 8007de4:	611a      	str	r2, [r3, #16]
 8007de6:	4b4d      	ldr	r3, [pc, #308]	; (8007f1c <LCD_Init+0x3e54>)
 8007de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dec:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8007dee:	4b4b      	ldr	r3, [pc, #300]	; (8007f1c <LCD_Init+0x3e54>)
 8007df0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007df4:	611a      	str	r2, [r3, #16]
 8007df6:	4b49      	ldr	r3, [pc, #292]	; (8007f1c <LCD_Init+0x3e54>)
 8007df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dfc:	615a      	str	r2, [r3, #20]
 8007dfe:	4b46      	ldr	r3, [pc, #280]	; (8007f18 <LCD_Init+0x3e50>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	60da      	str	r2, [r3, #12]
 8007e04:	4b45      	ldr	r3, [pc, #276]	; (8007f1c <LCD_Init+0x3e54>)
 8007e06:	2280      	movs	r2, #128	; 0x80
 8007e08:	615a      	str	r2, [r3, #20]
 8007e0a:	4b44      	ldr	r3, [pc, #272]	; (8007f1c <LCD_Init+0x3e54>)
 8007e0c:	2280      	movs	r2, #128	; 0x80
 8007e0e:	611a      	str	r2, [r3, #16]
 8007e10:	4b42      	ldr	r3, [pc, #264]	; (8007f1c <LCD_Init+0x3e54>)
 8007e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e16:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8007e18:	4b40      	ldr	r3, [pc, #256]	; (8007f1c <LCD_Init+0x3e54>)
 8007e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e1e:	611a      	str	r2, [r3, #16]
 8007e20:	4b3e      	ldr	r3, [pc, #248]	; (8007f1c <LCD_Init+0x3e54>)
 8007e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e26:	615a      	str	r2, [r3, #20]
 8007e28:	4b3b      	ldr	r3, [pc, #236]	; (8007f18 <LCD_Init+0x3e50>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	60da      	str	r2, [r3, #12]
 8007e2e:	4b3b      	ldr	r3, [pc, #236]	; (8007f1c <LCD_Init+0x3e54>)
 8007e30:	2280      	movs	r2, #128	; 0x80
 8007e32:	615a      	str	r2, [r3, #20]
 8007e34:	4b39      	ldr	r3, [pc, #228]	; (8007f1c <LCD_Init+0x3e54>)
 8007e36:	2280      	movs	r2, #128	; 0x80
 8007e38:	611a      	str	r2, [r3, #16]
 8007e3a:	4b38      	ldr	r3, [pc, #224]	; (8007f1c <LCD_Init+0x3e54>)
 8007e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e40:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8007e42:	4b36      	ldr	r3, [pc, #216]	; (8007f1c <LCD_Init+0x3e54>)
 8007e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e48:	611a      	str	r2, [r3, #16]
 8007e4a:	4b34      	ldr	r3, [pc, #208]	; (8007f1c <LCD_Init+0x3e54>)
 8007e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e50:	615a      	str	r2, [r3, #20]
 8007e52:	4b31      	ldr	r3, [pc, #196]	; (8007f18 <LCD_Init+0x3e50>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	60da      	str	r2, [r3, #12]
 8007e58:	4b30      	ldr	r3, [pc, #192]	; (8007f1c <LCD_Init+0x3e54>)
 8007e5a:	2280      	movs	r2, #128	; 0x80
 8007e5c:	615a      	str	r2, [r3, #20]
 8007e5e:	4b2f      	ldr	r3, [pc, #188]	; (8007f1c <LCD_Init+0x3e54>)
 8007e60:	2280      	movs	r2, #128	; 0x80
 8007e62:	611a      	str	r2, [r3, #16]
 8007e64:	4b2d      	ldr	r3, [pc, #180]	; (8007f1c <LCD_Init+0x3e54>)
 8007e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e6a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8007e6c:	20b8      	movs	r0, #184	; 0xb8
 8007e6e:	f7fa fdfb 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8007e72:	4b2a      	ldr	r3, [pc, #168]	; (8007f1c <LCD_Init+0x3e54>)
 8007e74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e78:	611a      	str	r2, [r3, #16]
 8007e7a:	4b28      	ldr	r3, [pc, #160]	; (8007f1c <LCD_Init+0x3e54>)
 8007e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e80:	615a      	str	r2, [r3, #20]
 8007e82:	4b25      	ldr	r3, [pc, #148]	; (8007f18 <LCD_Init+0x3e50>)
 8007e84:	2203      	movs	r2, #3
 8007e86:	60da      	str	r2, [r3, #12]
 8007e88:	4b24      	ldr	r3, [pc, #144]	; (8007f1c <LCD_Init+0x3e54>)
 8007e8a:	2280      	movs	r2, #128	; 0x80
 8007e8c:	615a      	str	r2, [r3, #20]
 8007e8e:	4b23      	ldr	r3, [pc, #140]	; (8007f1c <LCD_Init+0x3e54>)
 8007e90:	2280      	movs	r2, #128	; 0x80
 8007e92:	611a      	str	r2, [r3, #16]
 8007e94:	4b21      	ldr	r3, [pc, #132]	; (8007f1c <LCD_Init+0x3e54>)
 8007e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e9a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8007e9c:	4b1f      	ldr	r3, [pc, #124]	; (8007f1c <LCD_Init+0x3e54>)
 8007e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ea2:	611a      	str	r2, [r3, #16]
 8007ea4:	4b1d      	ldr	r3, [pc, #116]	; (8007f1c <LCD_Init+0x3e54>)
 8007ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eaa:	615a      	str	r2, [r3, #20]
 8007eac:	4b1a      	ldr	r3, [pc, #104]	; (8007f18 <LCD_Init+0x3e50>)
 8007eae:	2201      	movs	r2, #1
 8007eb0:	60da      	str	r2, [r3, #12]
 8007eb2:	4b1a      	ldr	r3, [pc, #104]	; (8007f1c <LCD_Init+0x3e54>)
 8007eb4:	2280      	movs	r2, #128	; 0x80
 8007eb6:	615a      	str	r2, [r3, #20]
 8007eb8:	4b18      	ldr	r3, [pc, #96]	; (8007f1c <LCD_Init+0x3e54>)
 8007eba:	2280      	movs	r2, #128	; 0x80
 8007ebc:	611a      	str	r2, [r3, #16]
 8007ebe:	4b17      	ldr	r3, [pc, #92]	; (8007f1c <LCD_Init+0x3e54>)
 8007ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ec4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8007ec6:	20ba      	movs	r0, #186	; 0xba
 8007ec8:	f7fa fdce 	bl	8002a68 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8007ecc:	4b13      	ldr	r3, [pc, #76]	; (8007f1c <LCD_Init+0x3e54>)
 8007ece:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ed2:	611a      	str	r2, [r3, #16]
 8007ed4:	4b11      	ldr	r3, [pc, #68]	; (8007f1c <LCD_Init+0x3e54>)
 8007ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eda:	615a      	str	r2, [r3, #20]
 8007edc:	4b0e      	ldr	r3, [pc, #56]	; (8007f18 <LCD_Init+0x3e50>)
 8007ede:	2201      	movs	r2, #1
 8007ee0:	60da      	str	r2, [r3, #12]
 8007ee2:	4b0e      	ldr	r3, [pc, #56]	; (8007f1c <LCD_Init+0x3e54>)
 8007ee4:	2280      	movs	r2, #128	; 0x80
 8007ee6:	615a      	str	r2, [r3, #20]
 8007ee8:	4b0c      	ldr	r3, [pc, #48]	; (8007f1c <LCD_Init+0x3e54>)
 8007eea:	2280      	movs	r2, #128	; 0x80
 8007eec:	611a      	str	r2, [r3, #16]
 8007eee:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <LCD_Init+0x3e54>)
 8007ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ef4:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8007ef6:	2064      	movs	r0, #100	; 0x64
 8007ef8:	f7fb ff36 	bl	8003d68 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8007efc:	2000      	movs	r0, #0
 8007efe:	f7fb ffd7 	bl	8003eb0 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8007f02:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <LCD_Init+0x3e58>)
 8007f04:	2201      	movs	r2, #1
 8007f06:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8007f08:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007f0c:	f000 f80a 	bl	8007f24 <LCD_Clear>
}
 8007f10:	bf00      	nop
 8007f12:	3718      	adds	r7, #24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	40010c00 	.word	0x40010c00
 8007f1c:	40011000 	.word	0x40011000
 8007f20:	422201a8 	.word	0x422201a8

08007f24 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8007f32:	4b2a      	ldr	r3, [pc, #168]	; (8007fdc <LCD_Clear+0xb8>)
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8007f38:	4b28      	ldr	r3, [pc, #160]	; (8007fdc <LCD_Clear+0xb8>)
 8007f3a:	885b      	ldrh	r3, [r3, #2]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	fb02 f303 	mul.w	r3, r2, r3
 8007f44:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8007f46:	4b25      	ldr	r3, [pc, #148]	; (8007fdc <LCD_Clear+0xb8>)
 8007f48:	889b      	ldrh	r3, [r3, #4]
 8007f4a:	f646 0204 	movw	r2, #26628	; 0x6804
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d11a      	bne.n	8007f88 <LCD_Clear+0x64>
 8007f52:	4b22      	ldr	r3, [pc, #136]	; (8007fdc <LCD_Clear+0xb8>)
 8007f54:	799b      	ldrb	r3, [r3, #6]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d116      	bne.n	8007f88 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8007f5a:	4b20      	ldr	r3, [pc, #128]	; (8007fdc <LCD_Clear+0xb8>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8007f60:	4b1e      	ldr	r3, [pc, #120]	; (8007fdc <LCD_Clear+0xb8>)
 8007f62:	222a      	movs	r2, #42	; 0x2a
 8007f64:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8007f66:	4b1d      	ldr	r3, [pc, #116]	; (8007fdc <LCD_Clear+0xb8>)
 8007f68:	222b      	movs	r2, #43	; 0x2b
 8007f6a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	2000      	movs	r0, #0
 8007f70:	f7fa fe4c 	bl	8002c0c <LCD_SetCursor>
		lcddev.dir = 1;
 8007f74:	4b19      	ldr	r3, [pc, #100]	; (8007fdc <LCD_Clear+0xb8>)
 8007f76:	2201      	movs	r2, #1
 8007f78:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8007f7a:	4b18      	ldr	r3, [pc, #96]	; (8007fdc <LCD_Clear+0xb8>)
 8007f7c:	222b      	movs	r2, #43	; 0x2b
 8007f7e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8007f80:	4b16      	ldr	r3, [pc, #88]	; (8007fdc <LCD_Clear+0xb8>)
 8007f82:	222a      	movs	r2, #42	; 0x2a
 8007f84:	819a      	strh	r2, [r3, #12]
 8007f86:	e003      	b.n	8007f90 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8007f88:	2100      	movs	r1, #0
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	f7fa fe3e 	bl	8002c0c <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8007f90:	f7fa fe30 	bl	8002bf4 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8007f94:	2300      	movs	r3, #0
 8007f96:	60fb      	str	r3, [r7, #12]
 8007f98:	e017      	b.n	8007fca <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8007f9a:	4b11      	ldr	r3, [pc, #68]	; (8007fe0 <LCD_Clear+0xbc>)
 8007f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fa0:	611a      	str	r2, [r3, #16]
 8007fa2:	4b0f      	ldr	r3, [pc, #60]	; (8007fe0 <LCD_Clear+0xbc>)
 8007fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fa8:	615a      	str	r2, [r3, #20]
 8007faa:	4a0e      	ldr	r2, [pc, #56]	; (8007fe4 <LCD_Clear+0xc0>)
 8007fac:	88fb      	ldrh	r3, [r7, #6]
 8007fae:	60d3      	str	r3, [r2, #12]
 8007fb0:	4b0b      	ldr	r3, [pc, #44]	; (8007fe0 <LCD_Clear+0xbc>)
 8007fb2:	2280      	movs	r2, #128	; 0x80
 8007fb4:	615a      	str	r2, [r3, #20]
 8007fb6:	4b0a      	ldr	r3, [pc, #40]	; (8007fe0 <LCD_Clear+0xbc>)
 8007fb8:	2280      	movs	r2, #128	; 0x80
 8007fba:	611a      	str	r2, [r3, #16]
 8007fbc:	4b08      	ldr	r3, [pc, #32]	; (8007fe0 <LCD_Clear+0xbc>)
 8007fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fc2:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d3e3      	bcc.n	8007f9a <LCD_Clear+0x76>
}
 8007fd2:	bf00      	nop
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	200007cc 	.word	0x200007cc
 8007fe0:	40011000 	.word	0x40011000
 8007fe4:	40010c00 	.word	0x40010c00

08007fe8 <LCD_Fill>:
// Fill the area with color
// :(xend-xsta+1)*(yend-ysta+1)
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t color) {
 8007fe8:	b590      	push	{r4, r7, lr}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af02      	add	r7, sp, #8
 8007fee:	4604      	mov	r4, r0
 8007ff0:	4608      	mov	r0, r1
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	4623      	mov	r3, r4
 8007ff8:	80fb      	strh	r3, [r7, #6]
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	80bb      	strh	r3, [r7, #4]
 8007ffe:	460b      	mov	r3, r1
 8008000:	807b      	strh	r3, [r7, #2]
 8008002:	4613      	mov	r3, r2
 8008004:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 8008006:	2300      	movs	r3, #0
 8008008:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1))	//6804横屏的时候特殊处理
 800800a:	4b3a      	ldr	r3, [pc, #232]	; (80080f4 <LCD_Fill+0x10c>)
 800800c:	889b      	ldrh	r3, [r3, #4]
 800800e:	f646 0204 	movw	r2, #26628	; 0x6804
 8008012:	4293      	cmp	r3, r2
 8008014:	d133      	bne.n	800807e <LCD_Fill+0x96>
 8008016:	4b37      	ldr	r3, [pc, #220]	; (80080f4 <LCD_Fill+0x10c>)
 8008018:	799b      	ldrb	r3, [r3, #6]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d12f      	bne.n	800807e <LCD_Fill+0x96>
			{
		temp = sx;
 800801e:	88fb      	ldrh	r3, [r7, #6]
 8008020:	813b      	strh	r3, [r7, #8]
		sx = sy;
 8008022:	88bb      	ldrh	r3, [r7, #4]
 8008024:	80fb      	strh	r3, [r7, #6]
		sy = lcddev.width - ex - 1;
 8008026:	4b33      	ldr	r3, [pc, #204]	; (80080f4 <LCD_Fill+0x10c>)
 8008028:	881a      	ldrh	r2, [r3, #0]
 800802a:	887b      	ldrh	r3, [r7, #2]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	b29b      	uxth	r3, r3
 8008030:	3b01      	subs	r3, #1
 8008032:	80bb      	strh	r3, [r7, #4]
		ex = ey;
 8008034:	883b      	ldrh	r3, [r7, #0]
 8008036:	807b      	strh	r3, [r7, #2]
		ey = lcddev.width - temp - 1;
 8008038:	4b2e      	ldr	r3, [pc, #184]	; (80080f4 <LCD_Fill+0x10c>)
 800803a:	881a      	ldrh	r2, [r3, #0]
 800803c:	893b      	ldrh	r3, [r7, #8]
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	b29b      	uxth	r3, r3
 8008042:	3b01      	subs	r3, #1
 8008044:	803b      	strh	r3, [r7, #0]
		lcddev.dir = 0;
 8008046:	4b2b      	ldr	r3, [pc, #172]	; (80080f4 <LCD_Fill+0x10c>)
 8008048:	2200      	movs	r2, #0
 800804a:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 800804c:	4b29      	ldr	r3, [pc, #164]	; (80080f4 <LCD_Fill+0x10c>)
 800804e:	222a      	movs	r2, #42	; 0x2a
 8008050:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8008052:	4b28      	ldr	r3, [pc, #160]	; (80080f4 <LCD_Fill+0x10c>)
 8008054:	222b      	movs	r2, #43	; 0x2b
 8008056:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx, sy, ex, ey, color);
 8008058:	883c      	ldrh	r4, [r7, #0]
 800805a:	887a      	ldrh	r2, [r7, #2]
 800805c:	88b9      	ldrh	r1, [r7, #4]
 800805e:	88f8      	ldrh	r0, [r7, #6]
 8008060:	8c3b      	ldrh	r3, [r7, #32]
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	4623      	mov	r3, r4
 8008066:	f7ff ffbf 	bl	8007fe8 <LCD_Fill>
		lcddev.dir = 1;
 800806a:	4b22      	ldr	r3, [pc, #136]	; (80080f4 <LCD_Fill+0x10c>)
 800806c:	2201      	movs	r2, #1
 800806e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8008070:	4b20      	ldr	r3, [pc, #128]	; (80080f4 <LCD_Fill+0x10c>)
 8008072:	222b      	movs	r2, #43	; 0x2b
 8008074:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8008076:	4b1f      	ldr	r3, [pc, #124]	; (80080f4 <LCD_Fill+0x10c>)
 8008078:	222a      	movs	r2, #42	; 0x2a
 800807a:	819a      	strh	r2, [r3, #12]
 800807c:	e036      	b.n	80080ec <LCD_Fill+0x104>
	} else {
		xlen = ex - sx + 1;
 800807e:	887a      	ldrh	r2, [r7, #2]
 8008080:	88fb      	ldrh	r3, [r7, #6]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	b29b      	uxth	r3, r3
 8008086:	3301      	adds	r3, #1
 8008088:	817b      	strh	r3, [r7, #10]
		for (i = sy; i <= ey; i++) {
 800808a:	88bb      	ldrh	r3, [r7, #4]
 800808c:	81fb      	strh	r3, [r7, #14]
 800808e:	e029      	b.n	80080e4 <LCD_Fill+0xfc>
			LCD_SetCursor(sx, i);      				//设置光标位置
 8008090:	89fa      	ldrh	r2, [r7, #14]
 8008092:	88fb      	ldrh	r3, [r7, #6]
 8008094:	4611      	mov	r1, r2
 8008096:	4618      	mov	r0, r3
 8008098:	f7fa fdb8 	bl	8002c0c <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM	  
 800809c:	f7fa fdaa 	bl	8002bf4 <LCD_WriteRAM_Prepare>
			for (j = 0; j < xlen; j++)
 80080a0:	2300      	movs	r3, #0
 80080a2:	81bb      	strh	r3, [r7, #12]
 80080a4:	e017      	b.n	80080d6 <LCD_Fill+0xee>
				LCD_WR_DATA(color);	//设置光标位置
 80080a6:	4b14      	ldr	r3, [pc, #80]	; (80080f8 <LCD_Fill+0x110>)
 80080a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080ac:	611a      	str	r2, [r3, #16]
 80080ae:	4b12      	ldr	r3, [pc, #72]	; (80080f8 <LCD_Fill+0x110>)
 80080b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080b4:	615a      	str	r2, [r3, #20]
 80080b6:	4a11      	ldr	r2, [pc, #68]	; (80080fc <LCD_Fill+0x114>)
 80080b8:	8c3b      	ldrh	r3, [r7, #32]
 80080ba:	60d3      	str	r3, [r2, #12]
 80080bc:	4b0e      	ldr	r3, [pc, #56]	; (80080f8 <LCD_Fill+0x110>)
 80080be:	2280      	movs	r2, #128	; 0x80
 80080c0:	615a      	str	r2, [r3, #20]
 80080c2:	4b0d      	ldr	r3, [pc, #52]	; (80080f8 <LCD_Fill+0x110>)
 80080c4:	2280      	movs	r2, #128	; 0x80
 80080c6:	611a      	str	r2, [r3, #16]
 80080c8:	4b0b      	ldr	r3, [pc, #44]	; (80080f8 <LCD_Fill+0x110>)
 80080ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080ce:	611a      	str	r2, [r3, #16]
			for (j = 0; j < xlen; j++)
 80080d0:	89bb      	ldrh	r3, [r7, #12]
 80080d2:	3301      	adds	r3, #1
 80080d4:	81bb      	strh	r3, [r7, #12]
 80080d6:	89ba      	ldrh	r2, [r7, #12]
 80080d8:	897b      	ldrh	r3, [r7, #10]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d3e3      	bcc.n	80080a6 <LCD_Fill+0xbe>
		for (i = sy; i <= ey; i++) {
 80080de:	89fb      	ldrh	r3, [r7, #14]
 80080e0:	3301      	adds	r3, #1
 80080e2:	81fb      	strh	r3, [r7, #14]
 80080e4:	89fa      	ldrh	r2, [r7, #14]
 80080e6:	883b      	ldrh	r3, [r7, #0]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d9d1      	bls.n	8008090 <LCD_Fill+0xa8>
		}
	}
}
 80080ec:	bf00      	nop
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd90      	pop	{r4, r7, pc}
 80080f4:	200007cc 	.word	0x200007cc
 80080f8:	40011000 	.word	0x40011000
 80080fc:	40010c00 	.word	0x40010c00

08008100 <LCD_DrawLine>:
	}
}
// Draw a line
//x1,y1: coordinate of starting point
//x2,y2: coordinate of terminal point
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8008100:	b590      	push	{r4, r7, lr}
 8008102:	b08d      	sub	sp, #52	; 0x34
 8008104:	af00      	add	r7, sp, #0
 8008106:	4604      	mov	r4, r0
 8008108:	4608      	mov	r0, r1
 800810a:	4611      	mov	r1, r2
 800810c:	461a      	mov	r2, r3
 800810e:	4623      	mov	r3, r4
 8008110:	80fb      	strh	r3, [r7, #6]
 8008112:	4603      	mov	r3, r0
 8008114:	80bb      	strh	r3, [r7, #4]
 8008116:	460b      	mov	r3, r1
 8008118:	807b      	strh	r3, [r7, #2]
 800811a:	4613      	mov	r3, r2
 800811c:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 800811e:	2300      	movs	r3, #0
 8008120:	62bb      	str	r3, [r7, #40]	; 0x28
 8008122:	2300      	movs	r3, #0
 8008124:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1; //计算坐标增量
 8008126:	887a      	ldrh	r2, [r7, #2]
 8008128:	88fb      	ldrh	r3, [r7, #6]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 800812e:	883a      	ldrh	r2, [r7, #0]
 8008130:	88bb      	ldrh	r3, [r7, #4]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8008136:	88fb      	ldrh	r3, [r7, #6]
 8008138:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 800813a:	88bb      	ldrh	r3, [r7, #4]
 800813c:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	2b00      	cmp	r3, #0
 8008142:	dd02      	ble.n	800814a <LCD_DrawLine+0x4a>
		incx = 1; //设置单步方向
 8008144:	2301      	movs	r3, #1
 8008146:	617b      	str	r3, [r7, #20]
 8008148:	e00b      	b.n	8008162 <LCD_DrawLine+0x62>
	else if (delta_x == 0)
 800814a:	6a3b      	ldr	r3, [r7, #32]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d102      	bne.n	8008156 <LCD_DrawLine+0x56>
		incx = 0; //垂直线
 8008150:	2300      	movs	r3, #0
 8008152:	617b      	str	r3, [r7, #20]
 8008154:	e005      	b.n	8008162 <LCD_DrawLine+0x62>
	else {
		incx = -1;
 8008156:	f04f 33ff 	mov.w	r3, #4294967295
 800815a:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 800815c:	6a3b      	ldr	r3, [r7, #32]
 800815e:	425b      	negs	r3, r3
 8008160:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	2b00      	cmp	r3, #0
 8008166:	dd02      	ble.n	800816e <LCD_DrawLine+0x6e>
		incy = 1;
 8008168:	2301      	movs	r3, #1
 800816a:	613b      	str	r3, [r7, #16]
 800816c:	e00b      	b.n	8008186 <LCD_DrawLine+0x86>
	else if (delta_y == 0)
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d102      	bne.n	800817a <LCD_DrawLine+0x7a>
		incy = 0; //水平线
 8008174:	2300      	movs	r3, #0
 8008176:	613b      	str	r3, [r7, #16]
 8008178:	e005      	b.n	8008186 <LCD_DrawLine+0x86>
	else {
		incy = -1;
 800817a:	f04f 33ff 	mov.w	r3, #4294967295
 800817e:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	425b      	negs	r3, r3
 8008184:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 8008186:	6a3a      	ldr	r2, [r7, #32]
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	429a      	cmp	r2, r3
 800818c:	dd02      	ble.n	8008194 <LCD_DrawLine+0x94>
		distance = delta_x; //选取基本增量坐标轴
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	61bb      	str	r3, [r7, #24]
 8008192:	e001      	b.n	8008198 <LCD_DrawLine+0x98>
	else
		distance = delta_y;
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	61bb      	str	r3, [r7, #24]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8008198:	2300      	movs	r3, #0
 800819a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800819c:	e02a      	b.n	80081f4 <LCD_DrawLine+0xf4>
			{
		LCD_DrawPoint(uRow, uCol); //画点
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	b292      	uxth	r2, r2
 80081a6:	4611      	mov	r1, r2
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fb fb0d 	bl	80037c8 <LCD_DrawPoint>
		xerr += delta_x;
 80081ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	4413      	add	r3, r2
 80081b4:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 80081b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	4413      	add	r3, r2
 80081bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (xerr > distance) {
 80081be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	dd07      	ble.n	80081d6 <LCD_DrawLine+0xd6>
			xerr -= distance;
 80081c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	4413      	add	r3, r2
 80081d4:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 80081d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	429a      	cmp	r2, r3
 80081dc:	dd07      	ble.n	80081ee <LCD_DrawLine+0xee>
			yerr -= distance;
 80081de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 80081e6:	68ba      	ldr	r2, [r7, #8]
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	4413      	add	r3, r2
 80081ec:	60bb      	str	r3, [r7, #8]
	for (t = 0; t <= distance + 1; t++) //画线输出
 80081ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80081f0:	3301      	adds	r3, #1
 80081f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80081f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	3301      	adds	r3, #1
 80081fa:	429a      	cmp	r2, r3
 80081fc:	ddcf      	ble.n	800819e <LCD_DrawLine+0x9e>
		}
	}
}
 80081fe:	bf00      	nop
 8008200:	3734      	adds	r7, #52	; 0x34
 8008202:	46bd      	mov	sp, r7
 8008204:	bd90      	pop	{r4, r7, pc}

08008206 <LCD_DrawRectangle>:
//Draw a rectangle
//(x1,y1),(x2,y2): coordinates of the upper left point and bottom right point of a rectangle
void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8008206:	b590      	push	{r4, r7, lr}
 8008208:	b083      	sub	sp, #12
 800820a:	af00      	add	r7, sp, #0
 800820c:	4604      	mov	r4, r0
 800820e:	4608      	mov	r0, r1
 8008210:	4611      	mov	r1, r2
 8008212:	461a      	mov	r2, r3
 8008214:	4623      	mov	r3, r4
 8008216:	80fb      	strh	r3, [r7, #6]
 8008218:	4603      	mov	r3, r0
 800821a:	80bb      	strh	r3, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	807b      	strh	r3, [r7, #2]
 8008220:	4613      	mov	r3, r2
 8008222:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1, y1, x2, y1);
 8008224:	88bb      	ldrh	r3, [r7, #4]
 8008226:	887a      	ldrh	r2, [r7, #2]
 8008228:	88b9      	ldrh	r1, [r7, #4]
 800822a:	88f8      	ldrh	r0, [r7, #6]
 800822c:	f7ff ff68 	bl	8008100 <LCD_DrawLine>
	LCD_DrawLine(x1, y1, x1, y2);
 8008230:	883b      	ldrh	r3, [r7, #0]
 8008232:	88fa      	ldrh	r2, [r7, #6]
 8008234:	88b9      	ldrh	r1, [r7, #4]
 8008236:	88f8      	ldrh	r0, [r7, #6]
 8008238:	f7ff ff62 	bl	8008100 <LCD_DrawLine>
	LCD_DrawLine(x1, y2, x2, y2);
 800823c:	883b      	ldrh	r3, [r7, #0]
 800823e:	887a      	ldrh	r2, [r7, #2]
 8008240:	8839      	ldrh	r1, [r7, #0]
 8008242:	88f8      	ldrh	r0, [r7, #6]
 8008244:	f7ff ff5c 	bl	8008100 <LCD_DrawLine>
	LCD_DrawLine(x2, y1, x2, y2);
 8008248:	883b      	ldrh	r3, [r7, #0]
 800824a:	887a      	ldrh	r2, [r7, #2]
 800824c:	88b9      	ldrh	r1, [r7, #4]
 800824e:	8878      	ldrh	r0, [r7, #2]
 8008250:	f7ff ff56 	bl	8008100 <LCD_DrawLine>
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	bd90      	pop	{r4, r7, pc}

0800825c <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 800825c:	b590      	push	{r4, r7, lr}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	4604      	mov	r4, r0
 8008264:	4608      	mov	r0, r1
 8008266:	4611      	mov	r1, r2
 8008268:	461a      	mov	r2, r3
 800826a:	4623      	mov	r3, r4
 800826c:	80fb      	strh	r3, [r7, #6]
 800826e:	4603      	mov	r3, r0
 8008270:	80bb      	strh	r3, [r7, #4]
 8008272:	460b      	mov	r3, r1
 8008274:	70fb      	strb	r3, [r7, #3]
 8008276:	4613      	mov	r3, r2
 8008278:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 800827a:	88bb      	ldrh	r3, [r7, #4]
 800827c:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 800827e:	78bb      	ldrb	r3, [r7, #2]
 8008280:	08db      	lsrs	r3, r3, #3
 8008282:	b2db      	uxtb	r3, r3
 8008284:	461a      	mov	r2, r3
 8008286:	78bb      	ldrb	r3, [r7, #2]
 8008288:	f003 0307 	and.w	r3, r3, #7
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b00      	cmp	r3, #0
 8008290:	bf14      	ite	ne
 8008292:	2301      	movne	r3, #1
 8008294:	2300      	moveq	r3, #0
 8008296:	b2db      	uxtb	r3, r3
 8008298:	4413      	add	r3, r2
 800829a:	b2db      	uxtb	r3, r3
 800829c:	78ba      	ldrb	r2, [r7, #2]
 800829e:	0852      	lsrs	r2, r2, #1
 80082a0:	b2d2      	uxtb	r2, r2
 80082a2:	fb02 f303 	mul.w	r3, r2, r3
 80082a6:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 80082a8:	78fb      	ldrb	r3, [r7, #3]
 80082aa:	3b20      	subs	r3, #32
 80082ac:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 80082ae:	2300      	movs	r3, #0
 80082b0:	737b      	strb	r3, [r7, #13]
 80082b2:	e069      	b.n	8008388 <LCD_ShowChar+0x12c>
		if (size == 12)
 80082b4:	78bb      	ldrb	r3, [r7, #2]
 80082b6:	2b0c      	cmp	r3, #12
 80082b8:	d10b      	bne.n	80082d2 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 80082ba:	78fa      	ldrb	r2, [r7, #3]
 80082bc:	7b79      	ldrb	r1, [r7, #13]
 80082be:	4838      	ldr	r0, [pc, #224]	; (80083a0 <LCD_ShowChar+0x144>)
 80082c0:	4613      	mov	r3, r2
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	4413      	add	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4403      	add	r3, r0
 80082ca:	440b      	add	r3, r1
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	73fb      	strb	r3, [r7, #15]
 80082d0:	e019      	b.n	8008306 <LCD_ShowChar+0xaa>
		else if (size == 16)
 80082d2:	78bb      	ldrb	r3, [r7, #2]
 80082d4:	2b10      	cmp	r3, #16
 80082d6:	d108      	bne.n	80082ea <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 80082d8:	78fa      	ldrb	r2, [r7, #3]
 80082da:	7b7b      	ldrb	r3, [r7, #13]
 80082dc:	4931      	ldr	r1, [pc, #196]	; (80083a4 <LCD_ShowChar+0x148>)
 80082de:	0112      	lsls	r2, r2, #4
 80082e0:	440a      	add	r2, r1
 80082e2:	4413      	add	r3, r2
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	73fb      	strb	r3, [r7, #15]
 80082e8:	e00d      	b.n	8008306 <LCD_ShowChar+0xaa>
		else if (size == 24)
 80082ea:	78bb      	ldrb	r3, [r7, #2]
 80082ec:	2b18      	cmp	r3, #24
 80082ee:	d150      	bne.n	8008392 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 80082f0:	78fa      	ldrb	r2, [r7, #3]
 80082f2:	7b79      	ldrb	r1, [r7, #13]
 80082f4:	482c      	ldr	r0, [pc, #176]	; (80083a8 <LCD_ShowChar+0x14c>)
 80082f6:	4613      	mov	r3, r2
 80082f8:	00db      	lsls	r3, r3, #3
 80082fa:	4413      	add	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4403      	add	r3, r0
 8008300:	440b      	add	r3, r1
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 8008306:	2300      	movs	r3, #0
 8008308:	73bb      	strb	r3, [r7, #14]
 800830a:	e035      	b.n	8008378 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 800830c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008310:	2b00      	cmp	r3, #0
 8008312:	da07      	bge.n	8008324 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8008314:	4b25      	ldr	r3, [pc, #148]	; (80083ac <LCD_ShowChar+0x150>)
 8008316:	881a      	ldrh	r2, [r3, #0]
 8008318:	88b9      	ldrh	r1, [r7, #4]
 800831a:	88fb      	ldrh	r3, [r7, #6]
 800831c:	4618      	mov	r0, r3
 800831e:	f7fb fa83 	bl	8003828 <LCD_Fast_DrawPoint>
 8008322:	e00a      	b.n	800833a <LCD_ShowChar+0xde>
			else if (mode == 0)
 8008324:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d106      	bne.n	800833a <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 800832c:	4b20      	ldr	r3, [pc, #128]	; (80083b0 <LCD_ShowChar+0x154>)
 800832e:	881a      	ldrh	r2, [r3, #0]
 8008330:	88b9      	ldrh	r1, [r7, #4]
 8008332:	88fb      	ldrh	r3, [r7, #6]
 8008334:	4618      	mov	r0, r3
 8008336:	f7fb fa77 	bl	8003828 <LCD_Fast_DrawPoint>
			temp <<= 1;
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	73fb      	strb	r3, [r7, #15]
			y++;
 8008340:	88bb      	ldrh	r3, [r7, #4]
 8008342:	3301      	adds	r3, #1
 8008344:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8008346:	4b1b      	ldr	r3, [pc, #108]	; (80083b4 <LCD_ShowChar+0x158>)
 8008348:	885b      	ldrh	r3, [r3, #2]
 800834a:	88ba      	ldrh	r2, [r7, #4]
 800834c:	429a      	cmp	r2, r3
 800834e:	d222      	bcs.n	8008396 <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8008350:	88ba      	ldrh	r2, [r7, #4]
 8008352:	897b      	ldrh	r3, [r7, #10]
 8008354:	1ad2      	subs	r2, r2, r3
 8008356:	78bb      	ldrb	r3, [r7, #2]
 8008358:	429a      	cmp	r2, r3
 800835a:	d10a      	bne.n	8008372 <LCD_ShowChar+0x116>
				y = y0;
 800835c:	897b      	ldrh	r3, [r7, #10]
 800835e:	80bb      	strh	r3, [r7, #4]
				x++;
 8008360:	88fb      	ldrh	r3, [r7, #6]
 8008362:	3301      	adds	r3, #1
 8008364:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8008366:	4b13      	ldr	r3, [pc, #76]	; (80083b4 <LCD_ShowChar+0x158>)
 8008368:	881b      	ldrh	r3, [r3, #0]
 800836a:	88fa      	ldrh	r2, [r7, #6]
 800836c:	429a      	cmp	r2, r3
 800836e:	d307      	bcc.n	8008380 <LCD_ShowChar+0x124>
					return;	//超区域了
 8008370:	e012      	b.n	8008398 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8008372:	7bbb      	ldrb	r3, [r7, #14]
 8008374:	3301      	adds	r3, #1
 8008376:	73bb      	strb	r3, [r7, #14]
 8008378:	7bbb      	ldrb	r3, [r7, #14]
 800837a:	2b07      	cmp	r3, #7
 800837c:	d9c6      	bls.n	800830c <LCD_ShowChar+0xb0>
 800837e:	e000      	b.n	8008382 <LCD_ShowChar+0x126>
				break;
 8008380:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8008382:	7b7b      	ldrb	r3, [r7, #13]
 8008384:	3301      	adds	r3, #1
 8008386:	737b      	strb	r3, [r7, #13]
 8008388:	7b7a      	ldrb	r2, [r7, #13]
 800838a:	7a7b      	ldrb	r3, [r7, #9]
 800838c:	429a      	cmp	r2, r3
 800838e:	d391      	bcc.n	80082b4 <LCD_ShowChar+0x58>
 8008390:	e002      	b.n	8008398 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8008392:	bf00      	nop
 8008394:	e000      	b.n	8008398 <LCD_ShowChar+0x13c>
				return;		//超区域了
 8008396:	bf00      	nop
			}
		}
	}
}
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	bd90      	pop	{r4, r7, pc}
 800839e:	bf00      	nop
 80083a0:	080300a8 	.word	0x080300a8
 80083a4:	0803051c 	.word	0x0803051c
 80083a8:	08030b0c 	.word	0x08030b0c
 80083ac:	20000090 	.word	0x20000090
 80083b0:	20000006 	.word	0x20000006
 80083b4:	200007cc 	.word	0x200007cc

080083b8 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 80083b8:	b590      	push	{r4, r7, lr}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af02      	add	r7, sp, #8
 80083be:	4604      	mov	r4, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	4611      	mov	r1, r2
 80083c4:	461a      	mov	r2, r3
 80083c6:	4623      	mov	r3, r4
 80083c8:	80fb      	strh	r3, [r7, #6]
 80083ca:	4603      	mov	r3, r0
 80083cc:	80bb      	strh	r3, [r7, #4]
 80083ce:	460b      	mov	r3, r1
 80083d0:	807b      	strh	r3, [r7, #2]
 80083d2:	4613      	mov	r3, r2
 80083d4:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 80083d6:	88fb      	ldrh	r3, [r7, #6]
 80083d8:	73fb      	strb	r3, [r7, #15]
	width += x;
 80083da:	887a      	ldrh	r2, [r7, #2]
 80083dc:	88fb      	ldrh	r3, [r7, #6]
 80083de:	4413      	add	r3, r2
 80083e0:	807b      	strh	r3, [r7, #2]
	height += y;
 80083e2:	883a      	ldrh	r2, [r7, #0]
 80083e4:	88bb      	ldrh	r3, [r7, #4]
 80083e6:	4413      	add	r3, r2
 80083e8:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 80083ea:	e025      	b.n	8008438 <LCD_ShowString+0x80>
	{
		if (x >= width) {
 80083ec:	88fa      	ldrh	r2, [r7, #6]
 80083ee:	887b      	ldrh	r3, [r7, #2]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d307      	bcc.n	8008404 <LCD_ShowString+0x4c>
			x = x0;
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	80fb      	strh	r3, [r7, #6]
			y += size;
 80083f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	88bb      	ldrh	r3, [r7, #4]
 8008400:	4413      	add	r3, r2
 8008402:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8008404:	88ba      	ldrh	r2, [r7, #4]
 8008406:	883b      	ldrh	r3, [r7, #0]
 8008408:	429a      	cmp	r2, r3
 800840a:	d21e      	bcs.n	800844a <LCD_ShowString+0x92>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	781a      	ldrb	r2, [r3, #0]
 8008410:	f897 4020 	ldrb.w	r4, [r7, #32]
 8008414:	88b9      	ldrh	r1, [r7, #4]
 8008416:	88f8      	ldrh	r0, [r7, #6]
 8008418:	2300      	movs	r3, #0
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	4623      	mov	r3, r4
 800841e:	f7ff ff1d 	bl	800825c <LCD_ShowChar>
		x += size / 2;
 8008422:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008426:	085b      	lsrs	r3, r3, #1
 8008428:	b2db      	uxtb	r3, r3
 800842a:	b29a      	uxth	r2, r3
 800842c:	88fb      	ldrh	r3, [r7, #6]
 800842e:	4413      	add	r3, r2
 8008430:	80fb      	strh	r3, [r7, #6]
		p++;
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	3301      	adds	r3, #1
 8008436:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	2b7e      	cmp	r3, #126	; 0x7e
 800843e:	d805      	bhi.n	800844c <LCD_ShowString+0x94>
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	2b1f      	cmp	r3, #31
 8008446:	d8d1      	bhi.n	80083ec <LCD_ShowString+0x34>
	}
}
 8008448:	e000      	b.n	800844c <LCD_ShowString+0x94>
			break;	//退出
 800844a:	bf00      	nop
}
 800844c:	bf00      	nop
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	bd90      	pop	{r4, r7, pc}

08008454 <LCD_ShowImage>:

// Xiao-Ming
// draw back ground
void LCD_ShowImage() {
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
	uint16_t x;
	uint16_t y;
	uint32_t p = 0;
 800845a:	2300      	movs	r3, #0
 800845c:	60bb      	str	r3, [r7, #8]
	for (y=0;y<320;y++) {
 800845e:	2300      	movs	r3, #0
 8008460:	81bb      	strh	r3, [r7, #12]
 8008462:	e03b      	b.n	80084dc <LCD_ShowImage+0x88>
		for (x=0;x<240;x++) {
 8008464:	2300      	movs	r3, #0
 8008466:	81fb      	strh	r3, [r7, #14]
 8008468:	e032      	b.n	80084d0 <LCD_ShowImage+0x7c>
			uint32_t data = tetris_bmp[p+1];
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	3301      	adds	r3, #1
 800846e:	4a1f      	ldr	r2, [pc, #124]	; (80084ec <LCD_ShowImage+0x98>)
 8008470:	5cd3      	ldrb	r3, [r2, r3]
 8008472:	607b      	str	r3, [r7, #4]
			data=data<<8;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	021b      	lsls	r3, r3, #8
 8008478:	607b      	str	r3, [r7, #4]
			data=data+tetris_bmp[p];
 800847a:	4a1c      	ldr	r2, [pc, #112]	; (80084ec <LCD_ShowImage+0x98>)
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	4413      	add	r3, r2
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4413      	add	r3, r2
 8008488:	607b      	str	r3, [r7, #4]
			p=p+2;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	3302      	adds	r3, #2
 800848e:	60bb      	str	r3, [r7, #8]
			LCD_SetCursor(x, y);
 8008490:	89ba      	ldrh	r2, [r7, #12]
 8008492:	89fb      	ldrh	r3, [r7, #14]
 8008494:	4611      	mov	r1, r2
 8008496:	4618      	mov	r0, r3
 8008498:	f7fa fbb8 	bl	8002c0c <LCD_SetCursor>
			LCD_WriteRAM_Prepare();
 800849c:	f7fa fbaa 	bl	8002bf4 <LCD_WriteRAM_Prepare>
			LCD_RS_SET;
 80084a0:	4b13      	ldr	r3, [pc, #76]	; (80084f0 <LCD_ShowImage+0x9c>)
 80084a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084a6:	611a      	str	r2, [r3, #16]
			LCD_CS_CLR;
 80084a8:	4b11      	ldr	r3, [pc, #68]	; (80084f0 <LCD_ShowImage+0x9c>)
 80084aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084ae:	615a      	str	r2, [r3, #20]
			DATAOUT(data);
 80084b0:	4a10      	ldr	r2, [pc, #64]	; (80084f4 <LCD_ShowImage+0xa0>)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	60d3      	str	r3, [r2, #12]
			LCD_WR_CLR;
 80084b6:	4b0e      	ldr	r3, [pc, #56]	; (80084f0 <LCD_ShowImage+0x9c>)
 80084b8:	2280      	movs	r2, #128	; 0x80
 80084ba:	615a      	str	r2, [r3, #20]
			LCD_WR_SET;
 80084bc:	4b0c      	ldr	r3, [pc, #48]	; (80084f0 <LCD_ShowImage+0x9c>)
 80084be:	2280      	movs	r2, #128	; 0x80
 80084c0:	611a      	str	r2, [r3, #16]
			LCD_CS_SET;
 80084c2:	4b0b      	ldr	r3, [pc, #44]	; (80084f0 <LCD_ShowImage+0x9c>)
 80084c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084c8:	611a      	str	r2, [r3, #16]
		for (x=0;x<240;x++) {
 80084ca:	89fb      	ldrh	r3, [r7, #14]
 80084cc:	3301      	adds	r3, #1
 80084ce:	81fb      	strh	r3, [r7, #14]
 80084d0:	89fb      	ldrh	r3, [r7, #14]
 80084d2:	2bef      	cmp	r3, #239	; 0xef
 80084d4:	d9c9      	bls.n	800846a <LCD_ShowImage+0x16>
	for (y=0;y<320;y++) {
 80084d6:	89bb      	ldrh	r3, [r7, #12]
 80084d8:	3301      	adds	r3, #1
 80084da:	81bb      	strh	r3, [r7, #12]
 80084dc:	89bb      	ldrh	r3, [r7, #12]
 80084de:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80084e2:	d3bf      	bcc.n	8008464 <LCD_ShowImage+0x10>
		}
	}
}
 80084e4:	bf00      	nop
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	0800a8a8 	.word	0x0800a8a8
 80084f0:	40011000 	.word	0x40011000
 80084f4:	40010c00 	.word	0x40010c00

080084f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80084fc:	f7f8 fa82 	bl	8000a04 <HAL_Init>

  /* USER CODE BEGIN Init */
  LCD_Init();
 8008500:	f7fb fde2 	bl	80040c8 <LCD_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008504:	f000 f809 	bl	800851a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008508:	f000 f84c 	bl	80085a4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  game_start();
 800850c:	f000 fd76 	bl	8008ffc <game_start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    button_update();
 8008510:	f7f9 ffa8 	bl	8002464 <button_update>
    game_update();
 8008514:	f7fa f88c 	bl	8002630 <game_update>
    button_update();
 8008518:	e7fa      	b.n	8008510 <main+0x18>

0800851a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b090      	sub	sp, #64	; 0x40
 800851e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008520:	f107 0318 	add.w	r3, r7, #24
 8008524:	2228      	movs	r2, #40	; 0x28
 8008526:	2100      	movs	r1, #0
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fff5 	bl	8009518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800852e:	1d3b      	adds	r3, r7, #4
 8008530:	2200      	movs	r2, #0
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	605a      	str	r2, [r3, #4]
 8008536:	609a      	str	r2, [r3, #8]
 8008538:	60da      	str	r2, [r3, #12]
 800853a:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800853c:	2301      	movs	r3, #1
 800853e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008544:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008546:	2300      	movs	r3, #0
 8008548:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800854a:	2301      	movs	r3, #1
 800854c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800854e:	2302      	movs	r3, #2
 8008550:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008556:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008558:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800855c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800855e:	f107 0318 	add.w	r3, r7, #24
 8008562:	4618      	mov	r0, r3
 8008564:	f7f8 fd50 	bl	8001008 <HAL_RCC_OscConfig>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800856e:	f000 f8a1 	bl	80086b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008572:	230f      	movs	r3, #15
 8008574:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008576:	2302      	movs	r3, #2
 8008578:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800857a:	2300      	movs	r3, #0
 800857c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800857e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008582:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008584:	2300      	movs	r3, #0
 8008586:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008588:	1d3b      	adds	r3, r7, #4
 800858a:	2102      	movs	r1, #2
 800858c:	4618      	mov	r0, r3
 800858e:	f7f8 ffbb 	bl	8001508 <HAL_RCC_ClockConfig>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008598:	f000 f88c 	bl	80086b4 <Error_Handler>
  }
}
 800859c:	bf00      	nop
 800859e:	3740      	adds	r7, #64	; 0x40
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b088      	sub	sp, #32
 80085a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085aa:	f107 0310 	add.w	r3, r7, #16
 80085ae:	2200      	movs	r2, #0
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	605a      	str	r2, [r3, #4]
 80085b4:	609a      	str	r2, [r3, #8]
 80085b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80085b8:	4b3a      	ldr	r3, [pc, #232]	; (80086a4 <MX_GPIO_Init+0x100>)
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	4a39      	ldr	r2, [pc, #228]	; (80086a4 <MX_GPIO_Init+0x100>)
 80085be:	f043 0320 	orr.w	r3, r3, #32
 80085c2:	6193      	str	r3, [r2, #24]
 80085c4:	4b37      	ldr	r3, [pc, #220]	; (80086a4 <MX_GPIO_Init+0x100>)
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	f003 0320 	and.w	r3, r3, #32
 80085cc:	60fb      	str	r3, [r7, #12]
 80085ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80085d0:	4b34      	ldr	r3, [pc, #208]	; (80086a4 <MX_GPIO_Init+0x100>)
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	4a33      	ldr	r2, [pc, #204]	; (80086a4 <MX_GPIO_Init+0x100>)
 80085d6:	f043 0304 	orr.w	r3, r3, #4
 80085da:	6193      	str	r3, [r2, #24]
 80085dc:	4b31      	ldr	r3, [pc, #196]	; (80086a4 <MX_GPIO_Init+0x100>)
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	60bb      	str	r3, [r7, #8]
 80085e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80085e8:	4b2e      	ldr	r3, [pc, #184]	; (80086a4 <MX_GPIO_Init+0x100>)
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	4a2d      	ldr	r2, [pc, #180]	; (80086a4 <MX_GPIO_Init+0x100>)
 80085ee:	f043 0310 	orr.w	r3, r3, #16
 80085f2:	6193      	str	r3, [r2, #24]
 80085f4:	4b2b      	ldr	r3, [pc, #172]	; (80086a4 <MX_GPIO_Init+0x100>)
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	607b      	str	r3, [r7, #4]
 80085fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8008600:	2200      	movs	r2, #0
 8008602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008606:	4828      	ldr	r0, [pc, #160]	; (80086a8 <MX_GPIO_Init+0x104>)
 8008608:	f7f8 fce5 	bl	8000fd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800860c:	2200      	movs	r2, #0
 800860e:	2104      	movs	r1, #4
 8008610:	4826      	ldr	r0, [pc, #152]	; (80086ac <MX_GPIO_Init+0x108>)
 8008612:	f7f8 fce0 	bl	8000fd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 8008616:	2301      	movs	r3, #1
 8008618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800861a:	2300      	movs	r3, #0
 800861c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800861e:	2302      	movs	r3, #2
 8008620:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8008622:	f107 0310 	add.w	r3, r7, #16
 8008626:	4619      	mov	r1, r3
 8008628:	481f      	ldr	r0, [pc, #124]	; (80086a8 <MX_GPIO_Init+0x104>)
 800862a:	f7f8 fb53 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY0_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 800862e:	2320      	movs	r3, #32
 8008630:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008632:	2300      	movs	r3, #0
 8008634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008636:	2301      	movs	r3, #1
 8008638:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 800863a:	f107 0310 	add.w	r3, r7, #16
 800863e:	4619      	mov	r1, r3
 8008640:	481b      	ldr	r0, [pc, #108]	; (80086b0 <MX_GPIO_Init+0x10c>)
 8008642:	f7f8 fb47 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8008646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800864a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800864c:	2301      	movs	r3, #1
 800864e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008650:	2300      	movs	r3, #0
 8008652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008654:	2302      	movs	r3, #2
 8008656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8008658:	f107 0310 	add.w	r3, r7, #16
 800865c:	4619      	mov	r1, r3
 800865e:	4812      	ldr	r0, [pc, #72]	; (80086a8 <MX_GPIO_Init+0x104>)
 8008660:	f7f8 fb38 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8008664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800866a:	2300      	movs	r3, #0
 800866c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800866e:	2301      	movs	r3, #1
 8008670:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8008672:	f107 0310 	add.w	r3, r7, #16
 8008676:	4619      	mov	r1, r3
 8008678:	480b      	ldr	r0, [pc, #44]	; (80086a8 <MX_GPIO_Init+0x104>)
 800867a:	f7f8 fb2b 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800867e:	2304      	movs	r3, #4
 8008680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008682:	2301      	movs	r3, #1
 8008684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008686:	2300      	movs	r3, #0
 8008688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800868a:	2302      	movs	r3, #2
 800868c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800868e:	f107 0310 	add.w	r3, r7, #16
 8008692:	4619      	mov	r1, r3
 8008694:	4805      	ldr	r0, [pc, #20]	; (80086ac <MX_GPIO_Init+0x108>)
 8008696:	f7f8 fb1d 	bl	8000cd4 <HAL_GPIO_Init>

}
 800869a:	bf00      	nop
 800869c:	3720      	adds	r7, #32
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	40021000 	.word	0x40021000
 80086a8:	40010800 	.word	0x40010800
 80086ac:	40011400 	.word	0x40011400
 80086b0:	40011000 	.word	0x40011000

080086b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80086b4:	b480      	push	{r7}
 80086b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80086b8:	bf00      	nop
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bc80      	pop	{r7}
 80086be:	4770      	bx	lr

080086c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80086c6:	4b15      	ldr	r3, [pc, #84]	; (800871c <HAL_MspInit+0x5c>)
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	4a14      	ldr	r2, [pc, #80]	; (800871c <HAL_MspInit+0x5c>)
 80086cc:	f043 0301 	orr.w	r3, r3, #1
 80086d0:	6193      	str	r3, [r2, #24]
 80086d2:	4b12      	ldr	r3, [pc, #72]	; (800871c <HAL_MspInit+0x5c>)
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	60bb      	str	r3, [r7, #8]
 80086dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80086de:	4b0f      	ldr	r3, [pc, #60]	; (800871c <HAL_MspInit+0x5c>)
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	4a0e      	ldr	r2, [pc, #56]	; (800871c <HAL_MspInit+0x5c>)
 80086e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086e8:	61d3      	str	r3, [r2, #28]
 80086ea:	4b0c      	ldr	r3, [pc, #48]	; (800871c <HAL_MspInit+0x5c>)
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086f2:	607b      	str	r3, [r7, #4]
 80086f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80086f6:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <HAL_MspInit+0x60>)
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	4a04      	ldr	r2, [pc, #16]	; (8008720 <HAL_MspInit+0x60>)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008712:	bf00      	nop
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	bc80      	pop	{r7}
 800871a:	4770      	bx	lr
 800871c:	40021000 	.word	0x40021000
 8008720:	40010000 	.word	0x40010000

08008724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008724:	b480      	push	{r7}
 8008726:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008728:	bf00      	nop
 800872a:	46bd      	mov	sp, r7
 800872c:	bc80      	pop	{r7}
 800872e:	4770      	bx	lr

08008730 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008734:	e7fe      	b.n	8008734 <HardFault_Handler+0x4>

08008736 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008736:	b480      	push	{r7}
 8008738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800873a:	e7fe      	b.n	800873a <MemManage_Handler+0x4>

0800873c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008740:	e7fe      	b.n	8008740 <BusFault_Handler+0x4>

08008742 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008742:	b480      	push	{r7}
 8008744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008746:	e7fe      	b.n	8008746 <UsageFault_Handler+0x4>

08008748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008748:	b480      	push	{r7}
 800874a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800874c:	bf00      	nop
 800874e:	46bd      	mov	sp, r7
 8008750:	bc80      	pop	{r7}
 8008752:	4770      	bx	lr

08008754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008754:	b480      	push	{r7}
 8008756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008758:	bf00      	nop
 800875a:	46bd      	mov	sp, r7
 800875c:	bc80      	pop	{r7}
 800875e:	4770      	bx	lr

08008760 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008760:	b480      	push	{r7}
 8008762:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008764:	bf00      	nop
 8008766:	46bd      	mov	sp, r7
 8008768:	bc80      	pop	{r7}
 800876a:	4770      	bx	lr

0800876c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008770:	f7f8 f98e 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008774:	bf00      	nop
 8008776:	bd80      	pop	{r7, pc}

08008778 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008784:	2300      	movs	r3, #0
 8008786:	617b      	str	r3, [r7, #20]
 8008788:	e00a      	b.n	80087a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800878a:	f3af 8000 	nop.w
 800878e:	4601      	mov	r1, r0
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	60ba      	str	r2, [r7, #8]
 8008796:	b2ca      	uxtb	r2, r1
 8008798:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	3301      	adds	r3, #1
 800879e:	617b      	str	r3, [r7, #20]
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	dbf0      	blt.n	800878a <_read+0x12>
	}

return len;
 80087a8:	687b      	ldr	r3, [r7, #4]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b086      	sub	sp, #24
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087be:	2300      	movs	r3, #0
 80087c0:	617b      	str	r3, [r7, #20]
 80087c2:	e009      	b.n	80087d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	1c5a      	adds	r2, r3, #1
 80087c8:	60ba      	str	r2, [r7, #8]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	3301      	adds	r3, #1
 80087d6:	617b      	str	r3, [r7, #20]
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	429a      	cmp	r2, r3
 80087de:	dbf1      	blt.n	80087c4 <_write+0x12>
	}
	return len;
 80087e0:	687b      	ldr	r3, [r7, #4]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <_close>:

int _close(int file)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b083      	sub	sp, #12
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
	return -1;
 80087f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bc80      	pop	{r7}
 80087fe:	4770      	bx	lr

08008800 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008810:	605a      	str	r2, [r3, #4]
	return 0;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	bc80      	pop	{r7}
 800881c:	4770      	bx	lr

0800881e <_isatty>:

int _isatty(int file)
{
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
	return 1;
 8008826:	2301      	movs	r3, #1
}
 8008828:	4618      	mov	r0, r3
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	bc80      	pop	{r7}
 8008830:	4770      	bx	lr

08008832 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	60f8      	str	r0, [r7, #12]
 800883a:	60b9      	str	r1, [r7, #8]
 800883c:	607a      	str	r2, [r7, #4]
	return 0;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	bc80      	pop	{r7}
 8008848:	4770      	bx	lr
	...

0800884c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008854:	4b11      	ldr	r3, [pc, #68]	; (800889c <_sbrk+0x50>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d102      	bne.n	8008862 <_sbrk+0x16>
		heap_end = &end;
 800885c:	4b0f      	ldr	r3, [pc, #60]	; (800889c <_sbrk+0x50>)
 800885e:	4a10      	ldr	r2, [pc, #64]	; (80088a0 <_sbrk+0x54>)
 8008860:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008862:	4b0e      	ldr	r3, [pc, #56]	; (800889c <_sbrk+0x50>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008868:	4b0c      	ldr	r3, [pc, #48]	; (800889c <_sbrk+0x50>)
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4413      	add	r3, r2
 8008870:	466a      	mov	r2, sp
 8008872:	4293      	cmp	r3, r2
 8008874:	d907      	bls.n	8008886 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008876:	f000 fe25 	bl	80094c4 <__errno>
 800887a:	4602      	mov	r2, r0
 800887c:	230c      	movs	r3, #12
 800887e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008880:	f04f 33ff 	mov.w	r3, #4294967295
 8008884:	e006      	b.n	8008894 <_sbrk+0x48>
	}

	heap_end += incr;
 8008886:	4b05      	ldr	r3, [pc, #20]	; (800889c <_sbrk+0x50>)
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4413      	add	r3, r2
 800888e:	4a03      	ldr	r2, [pc, #12]	; (800889c <_sbrk+0x50>)
 8008890:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008892:	68fb      	ldr	r3, [r7, #12]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	20000094 	.word	0x20000094
 80088a0:	200007e0 	.word	0x200007e0

080088a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80088a8:	4b15      	ldr	r3, [pc, #84]	; (8008900 <SystemInit+0x5c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a14      	ldr	r2, [pc, #80]	; (8008900 <SystemInit+0x5c>)
 80088ae:	f043 0301 	orr.w	r3, r3, #1
 80088b2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80088b4:	4b12      	ldr	r3, [pc, #72]	; (8008900 <SystemInit+0x5c>)
 80088b6:	685a      	ldr	r2, [r3, #4]
 80088b8:	4911      	ldr	r1, [pc, #68]	; (8008900 <SystemInit+0x5c>)
 80088ba:	4b12      	ldr	r3, [pc, #72]	; (8008904 <SystemInit+0x60>)
 80088bc:	4013      	ands	r3, r2
 80088be:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80088c0:	4b0f      	ldr	r3, [pc, #60]	; (8008900 <SystemInit+0x5c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a0e      	ldr	r2, [pc, #56]	; (8008900 <SystemInit+0x5c>)
 80088c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80088ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80088d0:	4b0b      	ldr	r3, [pc, #44]	; (8008900 <SystemInit+0x5c>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a0a      	ldr	r2, [pc, #40]	; (8008900 <SystemInit+0x5c>)
 80088d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80088dc:	4b08      	ldr	r3, [pc, #32]	; (8008900 <SystemInit+0x5c>)
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	4a07      	ldr	r2, [pc, #28]	; (8008900 <SystemInit+0x5c>)
 80088e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80088e6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80088e8:	4b05      	ldr	r3, [pc, #20]	; (8008900 <SystemInit+0x5c>)
 80088ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80088ee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80088f0:	4b05      	ldr	r3, [pc, #20]	; (8008908 <SystemInit+0x64>)
 80088f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80088f6:	609a      	str	r2, [r3, #8]
#endif 
}
 80088f8:	bf00      	nop
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bc80      	pop	{r7}
 80088fe:	4770      	bx	lr
 8008900:	40021000 	.word	0x40021000
 8008904:	f8ff0000 	.word	0xf8ff0000
 8008908:	e000ed00 	.word	0xe000ed00

0800890c <draw_background>:
#include "ui.h"

uint8_t pattern = 0;

void draw_background()
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af02      	add	r7, sp, #8
    POINT_COLOR = BLACK;
 8008912:	4b2b      	ldr	r3, [pc, #172]	; (80089c0 <draw_background+0xb4>)
 8008914:	2200      	movs	r2, #0
 8008916:	801a      	strh	r2, [r3, #0]
    //main window
    LCD_DrawRectangle(main_origin_x - 1, main_origin_y - 1, main_origin_x + main_width + 1, main_origin_y + main_height + 1);
 8008918:	f240 1337 	movw	r3, #311	; 0x137
 800891c:	22a1      	movs	r2, #161	; 0xa1
 800891e:	2109      	movs	r1, #9
 8008920:	2009      	movs	r0, #9
 8008922:	f7ff fc70 	bl	8008206 <LCD_DrawRectangle>
    //sub window
    LCD_DrawRectangle(sub_origin_x - 1, sub_origin_y - 1, sub_origin_x + sub_width + 1, sub_origin_y + sub_height + 1);
 8008926:	2347      	movs	r3, #71	; 0x47
 8008928:	22e7      	movs	r2, #231	; 0xe7
 800892a:	2109      	movs	r1, #9
 800892c:	20a9      	movs	r0, #169	; 0xa9
 800892e:	f7ff fc6a 	bl	8008206 <LCD_DrawRectangle>
    LCD_ShowString(sub_origin_x, sub_origin_y + sub_height + 10, screen_width, font_size, (uint8_t) font_size, (uint8_t *) "1st Next");
 8008932:	4b24      	ldr	r3, [pc, #144]	; (80089c4 <draw_background+0xb8>)
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	2310      	movs	r3, #16
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	2310      	movs	r3, #16
 800893c:	22f0      	movs	r2, #240	; 0xf0
 800893e:	2150      	movs	r1, #80	; 0x50
 8008940:	20aa      	movs	r0, #170	; 0xaa
 8008942:	f7ff fd39 	bl	80083b8 <LCD_ShowString>
    LCD_DrawRectangle(sub_origin_x - 1, sub_origin_y + sub_height + font_size + 20 - 1, sub_origin_x + sub_width + 1, sub_origin_y + 2 * sub_height + font_size + 20 + 1);
 8008946:	23a7      	movs	r3, #167	; 0xa7
 8008948:	22e7      	movs	r2, #231	; 0xe7
 800894a:	2169      	movs	r1, #105	; 0x69
 800894c:	20a9      	movs	r0, #169	; 0xa9
 800894e:	f7ff fc5a 	bl	8008206 <LCD_DrawRectangle>
    LCD_ShowString(sub_origin_x, sub_origin_y + 2 * sub_height + font_size + 30, screen_width, font_size, (uint8_t) font_size, (uint8_t *) "2nd Next");
 8008952:	4b1d      	ldr	r3, [pc, #116]	; (80089c8 <draw_background+0xbc>)
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	2310      	movs	r3, #16
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	2310      	movs	r3, #16
 800895c:	22f0      	movs	r2, #240	; 0xf0
 800895e:	21b0      	movs	r1, #176	; 0xb0
 8008960:	20aa      	movs	r0, #170	; 0xaa
 8008962:	f7ff fd29 	bl	80083b8 <LCD_ShowString>
    LCD_ShowString(sub_origin_x, sub_origin_y + 2 * sub_height + 80, screen_width, font_size, (uint8_t) font_size, (uint8_t *) "Level:");
 8008966:	4b19      	ldr	r3, [pc, #100]	; (80089cc <draw_background+0xc0>)
 8008968:	9301      	str	r3, [sp, #4]
 800896a:	2310      	movs	r3, #16
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	2310      	movs	r3, #16
 8008970:	22f0      	movs	r2, #240	; 0xf0
 8008972:	21d2      	movs	r1, #210	; 0xd2
 8008974:	20aa      	movs	r0, #170	; 0xaa
 8008976:	f7ff fd1f 	bl	80083b8 <LCD_ShowString>
    LCD_ShowString(sub_origin_x, sub_origin_y + 2 * sub_height + 100, screen_width, font_size, (uint8_t) font_size, (uint8_t *) "Easy1");
 800897a:	4b15      	ldr	r3, [pc, #84]	; (80089d0 <draw_background+0xc4>)
 800897c:	9301      	str	r3, [sp, #4]
 800897e:	2310      	movs	r3, #16
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	2310      	movs	r3, #16
 8008984:	22f0      	movs	r2, #240	; 0xf0
 8008986:	21e6      	movs	r1, #230	; 0xe6
 8008988:	20aa      	movs	r0, #170	; 0xaa
 800898a:	f7ff fd15 	bl	80083b8 <LCD_ShowString>
    LCD_ShowString(sub_origin_x, sub_origin_y + 2 * sub_height + 140, screen_width, font_size, (uint8_t) font_size, (uint8_t *) "Score:");
 800898e:	4b11      	ldr	r3, [pc, #68]	; (80089d4 <draw_background+0xc8>)
 8008990:	9301      	str	r3, [sp, #4]
 8008992:	2310      	movs	r3, #16
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	2310      	movs	r3, #16
 8008998:	22f0      	movs	r2, #240	; 0xf0
 800899a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800899e:	20aa      	movs	r0, #170	; 0xaa
 80089a0:	f7ff fd0a 	bl	80083b8 <LCD_ShowString>
    LCD_ShowString(sub_origin_x, sub_origin_y + 2 * sub_height + 160, screen_width, font_size, (uint8_t) font_size, (uint8_t *) "     0");
 80089a4:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <draw_background+0xcc>)
 80089a6:	9301      	str	r3, [sp, #4]
 80089a8:	2310      	movs	r3, #16
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	2310      	movs	r3, #16
 80089ae:	22f0      	movs	r2, #240	; 0xf0
 80089b0:	f44f 7191 	mov.w	r1, #290	; 0x122
 80089b4:	20aa      	movs	r0, #170	; 0xaa
 80089b6:	f7ff fcff 	bl	80083b8 <LCD_ShowString>
    // char msg[30];
	// sprintf(msg, "%ds", (int) uwTick/1000);
    // LCD_ShowString(170, 170, 200, 16, 16, (uint8_t*) msg);

    // LCD_Fill(10,10,25,25,BLUE);
}
 80089ba:	bf00      	nop
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	20000090 	.word	0x20000090
 80089c4:	0800a778 	.word	0x0800a778
 80089c8:	0800a784 	.word	0x0800a784
 80089cc:	0800a790 	.word	0x0800a790
 80089d0:	0800a798 	.word	0x0800a798
 80089d4:	0800a7a0 	.word	0x0800a7a0
 80089d8:	0800a7a8 	.word	0x0800a7a8

080089dc <draw_block>:
* 0: main
* 1: next1
* 2: next2
*/
void draw_block(uint8_t x, uint8_t y, uint16_t color, uint8_t mode)
{
 80089dc:	b590      	push	{r4, r7, lr}
 80089de:	b087      	sub	sp, #28
 80089e0:	af02      	add	r7, sp, #8
 80089e2:	4604      	mov	r4, r0
 80089e4:	4608      	mov	r0, r1
 80089e6:	4611      	mov	r1, r2
 80089e8:	461a      	mov	r2, r3
 80089ea:	4623      	mov	r3, r4
 80089ec:	71fb      	strb	r3, [r7, #7]
 80089ee:	4603      	mov	r3, r0
 80089f0:	71bb      	strb	r3, [r7, #6]
 80089f2:	460b      	mov	r3, r1
 80089f4:	80bb      	strh	r3, [r7, #4]
 80089f6:	4613      	mov	r3, r2
 80089f8:	70fb      	strb	r3, [r7, #3]
    uint16_t rx, ry;

    if (mode == 0)
 80089fa:	78fb      	ldrb	r3, [r7, #3]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d112      	bne.n	8008a26 <draw_block+0x4a>
    {
        rx = main_origin_x + x * cell_length;
 8008a00:	79fb      	ldrb	r3, [r7, #7]
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	461a      	mov	r2, r3
 8008a06:	0112      	lsls	r2, r2, #4
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	330a      	adds	r3, #10
 8008a0e:	81fb      	strh	r3, [r7, #14]
        ry = main_origin_y + main_height - (y+1) * cell_length;
 8008a10:	79bb      	ldrb	r3, [r7, #6]
 8008a12:	3301      	adds	r3, #1
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	461a      	mov	r2, r3
 8008a18:	011b      	lsls	r3, r3, #4
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	f503 739b 	add.w	r3, r3, #310	; 0x136
 8008a22:	81bb      	strh	r3, [r7, #12]
 8008a24:	e028      	b.n	8008a78 <draw_block+0x9c>
    }
    else if(mode == 1)
 8008a26:	78fb      	ldrb	r3, [r7, #3]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d111      	bne.n	8008a50 <draw_block+0x74>
    {
        rx = sub_origin_x + x * cell_length;
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	461a      	mov	r2, r3
 8008a32:	0112      	lsls	r2, r2, #4
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	33aa      	adds	r3, #170	; 0xaa
 8008a3a:	81fb      	strh	r3, [r7, #14]
        ry = sub_origin_y + sub_height - (y+1) * cell_length;
 8008a3c:	79bb      	ldrb	r3, [r7, #6]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	461a      	mov	r2, r3
 8008a44:	011b      	lsls	r3, r3, #4
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	3346      	adds	r3, #70	; 0x46
 8008a4c:	81bb      	strh	r3, [r7, #12]
 8008a4e:	e013      	b.n	8008a78 <draw_block+0x9c>
    }else if(mode == 2)
 8008a50:	78fb      	ldrb	r3, [r7, #3]
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d110      	bne.n	8008a78 <draw_block+0x9c>
    {
        rx = sub_origin_x + x * cell_length;
 8008a56:	79fb      	ldrb	r3, [r7, #7]
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	0112      	lsls	r2, r2, #4
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	33aa      	adds	r3, #170	; 0xaa
 8008a64:	81fb      	strh	r3, [r7, #14]
        ry = sub_origin_y + 2 * sub_height + font_size + 20 - (y+1) * cell_length;
 8008a66:	79bb      	ldrb	r3, [r7, #6]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	011b      	lsls	r3, r3, #4
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	33a6      	adds	r3, #166	; 0xa6
 8008a76:	81bb      	strh	r3, [r7, #12]
    }
    POINT_COLOR = color;
 8008a78:	4a55      	ldr	r2, [pc, #340]	; (8008bd0 <draw_block+0x1f4>)
 8008a7a:	88bb      	ldrh	r3, [r7, #4]
 8008a7c:	8013      	strh	r3, [r2, #0]
    LCD_DrawRectangle(rx, ry, rx + cell_length - 1, ry + cell_length - 1);
 8008a7e:	89fb      	ldrh	r3, [r7, #14]
 8008a80:	330e      	adds	r3, #14
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	89bb      	ldrh	r3, [r7, #12]
 8008a86:	330e      	adds	r3, #14
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	89b9      	ldrh	r1, [r7, #12]
 8008a8c:	89f8      	ldrh	r0, [r7, #14]
 8008a8e:	f7ff fbba 	bl	8008206 <LCD_DrawRectangle>
    LCD_Fill(rx + 2, ry + 2, rx + (cell_length - 2), ry + (cell_length - 2), color);
 8008a92:	89fb      	ldrh	r3, [r7, #14]
 8008a94:	3302      	adds	r3, #2
 8008a96:	b298      	uxth	r0, r3
 8008a98:	89bb      	ldrh	r3, [r7, #12]
 8008a9a:	3302      	adds	r3, #2
 8008a9c:	b299      	uxth	r1, r3
 8008a9e:	89fb      	ldrh	r3, [r7, #14]
 8008aa0:	330d      	adds	r3, #13
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	89bb      	ldrh	r3, [r7, #12]
 8008aa6:	330d      	adds	r3, #13
 8008aa8:	b29c      	uxth	r4, r3
 8008aaa:	88bb      	ldrh	r3, [r7, #4]
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	4623      	mov	r3, r4
 8008ab0:	f7ff fa9a 	bl	8007fe8 <LCD_Fill>
    if(color != WHITE){
 8008ab4:	88bb      	ldrh	r3, [r7, #4]
 8008ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d002      	beq.n	8008ac4 <draw_block+0xe8>
        POINT_COLOR = BLACK;
 8008abe:	4b44      	ldr	r3, [pc, #272]	; (8008bd0 <draw_block+0x1f4>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	801a      	strh	r2, [r3, #0]
    }
    if(pattern == 1){
 8008ac4:	4b43      	ldr	r3, [pc, #268]	; (8008bd4 <draw_block+0x1f8>)
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d153      	bne.n	8008b74 <draw_block+0x198>
        // bilibili
        LCD_DrawRectangle(rx + 11, ry + 12, rx + 4, ry + 5);
 8008acc:	89fb      	ldrh	r3, [r7, #14]
 8008ace:	330b      	adds	r3, #11
 8008ad0:	b298      	uxth	r0, r3
 8008ad2:	89bb      	ldrh	r3, [r7, #12]
 8008ad4:	330c      	adds	r3, #12
 8008ad6:	b299      	uxth	r1, r3
 8008ad8:	89fb      	ldrh	r3, [r7, #14]
 8008ada:	3304      	adds	r3, #4
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	89bb      	ldrh	r3, [r7, #12]
 8008ae0:	3305      	adds	r3, #5
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	f7ff fb8f 	bl	8008206 <LCD_DrawRectangle>
        LCD_DrawPoint(rx + 7, ry + 8);
 8008ae8:	89fb      	ldrh	r3, [r7, #14]
 8008aea:	3307      	adds	r3, #7
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	89bb      	ldrh	r3, [r7, #12]
 8008af0:	3308      	adds	r3, #8
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	4619      	mov	r1, r3
 8008af6:	4610      	mov	r0, r2
 8008af8:	f7fa fe66 	bl	80037c8 <LCD_DrawPoint>
        LCD_DrawPoint(rx + 9, ry + 8);
 8008afc:	89fb      	ldrh	r3, [r7, #14]
 8008afe:	3309      	adds	r3, #9
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	89bb      	ldrh	r3, [r7, #12]
 8008b04:	3308      	adds	r3, #8
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	4619      	mov	r1, r3
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	f7fa fe5c 	bl	80037c8 <LCD_DrawPoint>
        LCD_DrawPoint(rx + 8, ry + 10);
 8008b10:	89fb      	ldrh	r3, [r7, #14]
 8008b12:	3308      	adds	r3, #8
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	89bb      	ldrh	r3, [r7, #12]
 8008b18:	330a      	adds	r3, #10
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4610      	mov	r0, r2
 8008b20:	f7fa fe52 	bl	80037c8 <LCD_DrawPoint>
        LCD_DrawPoint(rx + 7, ry + 4);
 8008b24:	89fb      	ldrh	r3, [r7, #14]
 8008b26:	3307      	adds	r3, #7
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	89bb      	ldrh	r3, [r7, #12]
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	4619      	mov	r1, r3
 8008b32:	4610      	mov	r0, r2
 8008b34:	f7fa fe48 	bl	80037c8 <LCD_DrawPoint>
        LCD_DrawPoint(rx + 7, ry + 3);
 8008b38:	89fb      	ldrh	r3, [r7, #14]
 8008b3a:	3307      	adds	r3, #7
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	89bb      	ldrh	r3, [r7, #12]
 8008b40:	3303      	adds	r3, #3
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	4619      	mov	r1, r3
 8008b46:	4610      	mov	r0, r2
 8008b48:	f7fa fe3e 	bl	80037c8 <LCD_DrawPoint>
        LCD_DrawPoint(rx + 9, ry + 4);
 8008b4c:	89fb      	ldrh	r3, [r7, #14]
 8008b4e:	3309      	adds	r3, #9
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	89bb      	ldrh	r3, [r7, #12]
 8008b54:	3304      	adds	r3, #4
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	4619      	mov	r1, r3
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	f7fa fe34 	bl	80037c8 <LCD_DrawPoint>
        LCD_DrawPoint(rx + 9, ry + 3);
 8008b60:	89fb      	ldrh	r3, [r7, #14]
 8008b62:	3309      	adds	r3, #9
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	89bb      	ldrh	r3, [r7, #12]
 8008b68:	3303      	adds	r3, #3
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	4610      	mov	r0, r2
 8008b70:	f7fa fe2a 	bl	80037c8 <LCD_DrawPoint>
    }
    if(pattern == 2){
 8008b74:	4b17      	ldr	r3, [pc, #92]	; (8008bd4 <draw_block+0x1f8>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d125      	bne.n	8008bc8 <draw_block+0x1ec>
        // shadow
        LCD_DrawPoint(rx + (cell_length - 2 - 1), ry + (cell_length - 2 - 1));
 8008b7c:	89fb      	ldrh	r3, [r7, #14]
 8008b7e:	330c      	adds	r3, #12
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	89bb      	ldrh	r3, [r7, #12]
 8008b84:	330c      	adds	r3, #12
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	4619      	mov	r1, r3
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	f7fa fe1c 	bl	80037c8 <LCD_DrawPoint>
        LCD_DrawLine(rx + (cell_length - 2 - 1), ry + (cell_length - 2 - 5), rx + (cell_length - 2 - 5), ry + (cell_length - 2 - 1));
 8008b90:	89fb      	ldrh	r3, [r7, #14]
 8008b92:	330c      	adds	r3, #12
 8008b94:	b298      	uxth	r0, r3
 8008b96:	89bb      	ldrh	r3, [r7, #12]
 8008b98:	3308      	adds	r3, #8
 8008b9a:	b299      	uxth	r1, r3
 8008b9c:	89fb      	ldrh	r3, [r7, #14]
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	89bb      	ldrh	r3, [r7, #12]
 8008ba4:	330c      	adds	r3, #12
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	f7ff faaa 	bl	8008100 <LCD_DrawLine>
        LCD_DrawLine(rx + (cell_length - 2 - 1), ry + (cell_length - 2 - 7), rx + (cell_length - 2 - 7), ry + (cell_length - 2 - 1));
 8008bac:	89fb      	ldrh	r3, [r7, #14]
 8008bae:	330c      	adds	r3, #12
 8008bb0:	b298      	uxth	r0, r3
 8008bb2:	89bb      	ldrh	r3, [r7, #12]
 8008bb4:	3306      	adds	r3, #6
 8008bb6:	b299      	uxth	r1, r3
 8008bb8:	89fb      	ldrh	r3, [r7, #14]
 8008bba:	3306      	adds	r3, #6
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	89bb      	ldrh	r3, [r7, #12]
 8008bc0:	330c      	adds	r3, #12
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	f7ff fa9c 	bl	8008100 <LCD_DrawLine>
    }
}
 8008bc8:	bf00      	nop
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd90      	pop	{r4, r7, pc}
 8008bd0:	20000090 	.word	0x20000090
 8008bd4:	20000098 	.word	0x20000098

08008bd8 <grid_render>:

void grid_render()
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
    int8_t x, y;
    cell _cell;
    for (y = GRID_HEIGHT-1; y >= 0; y--)
 8008bde:	2313      	movs	r3, #19
 8008be0:	71bb      	strb	r3, [r7, #6]
 8008be2:	e032      	b.n	8008c4a <grid_render+0x72>
    {
        for (x = 0; x < GRID_WIDTH; x++)
 8008be4:	2300      	movs	r3, #0
 8008be6:	71fb      	strb	r3, [r7, #7]
 8008be8:	e025      	b.n	8008c36 <grid_render+0x5e>
        {
            _cell = grid[y][x];
 8008bea:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8008bee:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8008bf2:	481a      	ldr	r0, [pc, #104]	; (8008c5c <grid_render+0x84>)
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	005b      	lsls	r3, r3, #1
 8008bfc:	440b      	add	r3, r1
 8008bfe:	463a      	mov	r2, r7
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4403      	add	r3, r0
 8008c04:	6818      	ldr	r0, [r3, #0]
 8008c06:	6010      	str	r0, [r2, #0]
            if (_cell.isEmpty){
 8008c08:	783b      	ldrb	r3, [r7, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d007      	beq.n	8008c1e <grid_render+0x46>
              draw_block(x, y, WHITE, 0);
 8008c0e:	79f8      	ldrb	r0, [r7, #7]
 8008c10:	79b9      	ldrb	r1, [r7, #6]
 8008c12:	2300      	movs	r3, #0
 8008c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c18:	f7ff fee0 	bl	80089dc <draw_block>
 8008c1c:	e005      	b.n	8008c2a <grid_render+0x52>
            } else {
              draw_block(x, y, _cell.color, 0);
 8008c1e:	79f8      	ldrb	r0, [r7, #7]
 8008c20:	79b9      	ldrb	r1, [r7, #6]
 8008c22:	887a      	ldrh	r2, [r7, #2]
 8008c24:	2300      	movs	r3, #0
 8008c26:	f7ff fed9 	bl	80089dc <draw_block>
        for (x = 0; x < GRID_WIDTH; x++)
 8008c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	3301      	adds	r3, #1
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	71fb      	strb	r3, [r7, #7]
 8008c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c3a:	2b09      	cmp	r3, #9
 8008c3c:	ddd5      	ble.n	8008bea <grid_render+0x12>
    for (y = GRID_HEIGHT-1; y >= 0; y--)
 8008c3e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	3b01      	subs	r3, #1
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	71bb      	strb	r3, [r7, #6]
 8008c4a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	dac8      	bge.n	8008be4 <grid_render+0xc>
            }
        }
    }
}
 8008c52:	bf00      	nop
 8008c54:	3708      	adds	r7, #8
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	2000046c 	.word	0x2000046c

08008c60 <draw_main_block>:
        }
    }
}

void draw_main_block(uint8_t clear)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	4603      	mov	r3, r0
 8008c68:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    shapes* it = &shape_list[block.shape];
 8008c6a:	4b22      	ldr	r3, [pc, #136]	; (8008cf4 <draw_main_block+0x94>)
 8008c6c:	789b      	ldrb	r3, [r3, #2]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	4613      	mov	r3, r2
 8008c72:	015b      	lsls	r3, r3, #5
 8008c74:	4413      	add	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4a1f      	ldr	r2, [pc, #124]	; (8008cf8 <draw_main_block+0x98>)
 8008c7a:	4413      	add	r3, r2
 8008c7c:	60bb      	str	r3, [r7, #8]
    uint16_t color = it->color;
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8008c84:	81bb      	strh	r3, [r7, #12]
    if(clear){color = WHITE;}
 8008c86:	79fb      	ldrb	r3, [r7, #7]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d002      	beq.n	8008c92 <draw_main_block+0x32>
 8008c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008c90:	81bb      	strh	r3, [r7, #12]
    for(i = 0; i < 4; i++)
 8008c92:	2300      	movs	r3, #0
 8008c94:	73fb      	strb	r3, [r7, #15]
 8008c96:	e025      	b.n	8008ce4 <draw_main_block+0x84>
    {
        draw_block(it->x[block.direction][i] +  block.x, it->y[block.direction][i] + block.y, color, 0);
 8008c98:	4b16      	ldr	r3, [pc, #88]	; (8008cf4 <draw_main_block+0x94>)
 8008c9a:	78db      	ldrb	r3, [r3, #3]
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ca0:	68b9      	ldr	r1, [r7, #8]
 8008ca2:	0112      	lsls	r2, r2, #4
 8008ca4:	440a      	add	r2, r1
 8008ca6:	4413      	add	r3, r2
 8008ca8:	781a      	ldrb	r2, [r3, #0]
 8008caa:	4b12      	ldr	r3, [pc, #72]	; (8008cf4 <draw_main_block+0x94>)
 8008cac:	f993 3000 	ldrsb.w	r3, [r3]
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	4413      	add	r3, r2
 8008cb4:	b2d8      	uxtb	r0, r3
 8008cb6:	4b0f      	ldr	r3, [pc, #60]	; (8008cf4 <draw_main_block+0x94>)
 8008cb8:	78db      	ldrb	r3, [r3, #3]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
 8008cbe:	68b9      	ldr	r1, [r7, #8]
 8008cc0:	0112      	lsls	r2, r2, #4
 8008cc2:	440a      	add	r2, r1
 8008cc4:	4413      	add	r3, r2
 8008cc6:	3340      	adds	r3, #64	; 0x40
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	4b0a      	ldr	r3, [pc, #40]	; (8008cf4 <draw_main_block+0x94>)
 8008ccc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	4413      	add	r3, r2
 8008cd4:	b2d9      	uxtb	r1, r3
 8008cd6:	89ba      	ldrh	r2, [r7, #12]
 8008cd8:	2300      	movs	r3, #0
 8008cda:	f7ff fe7f 	bl	80089dc <draw_block>
    for(i = 0; i < 4; i++)
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	73fb      	strb	r3, [r7, #15]
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d9d6      	bls.n	8008c98 <draw_main_block+0x38>
    }
    // draw_main_grid();
}
 8008cea:	bf00      	nop
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	20000444 	.word	0x20000444
 8008cf8:	200000a8 	.word	0x200000a8

08008cfc <draw_next_block1>:

void draw_next_block1(uint8_t clear)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	shapes* it = &shape_list[block_next1.shape];
 8008d06:	4b1c      	ldr	r3, [pc, #112]	; (8008d78 <draw_next_block1+0x7c>)
 8008d08:	789b      	ldrb	r3, [r3, #2]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	015b      	lsls	r3, r3, #5
 8008d10:	4413      	add	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4a19      	ldr	r2, [pc, #100]	; (8008d7c <draw_next_block1+0x80>)
 8008d16:	4413      	add	r3, r2
 8008d18:	60bb      	str	r3, [r7, #8]
    uint16_t color = it->color;
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8008d20:	81bb      	strh	r3, [r7, #12]
    if(clear){color = WHITE;}
 8008d22:	79fb      	ldrb	r3, [r7, #7]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d002      	beq.n	8008d2e <draw_next_block1+0x32>
 8008d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d2c:	81bb      	strh	r3, [r7, #12]
    for(i = 0; i < 4; i++)
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73fb      	strb	r3, [r7, #15]
 8008d32:	e019      	b.n	8008d68 <draw_next_block1+0x6c>
	{
	    draw_block(it->x[block_next1.direction][i], it->y[block_next1.direction][i], color, 1);
 8008d34:	4b10      	ldr	r3, [pc, #64]	; (8008d78 <draw_next_block1+0x7c>)
 8008d36:	78db      	ldrb	r3, [r3, #3]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	7bfb      	ldrb	r3, [r7, #15]
 8008d3c:	68b9      	ldr	r1, [r7, #8]
 8008d3e:	0112      	lsls	r2, r2, #4
 8008d40:	440a      	add	r2, r1
 8008d42:	4413      	add	r3, r2
 8008d44:	7818      	ldrb	r0, [r3, #0]
 8008d46:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <draw_next_block1+0x7c>)
 8008d48:	78db      	ldrb	r3, [r3, #3]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
 8008d4e:	68b9      	ldr	r1, [r7, #8]
 8008d50:	0112      	lsls	r2, r2, #4
 8008d52:	440a      	add	r2, r1
 8008d54:	4413      	add	r3, r2
 8008d56:	3340      	adds	r3, #64	; 0x40
 8008d58:	7819      	ldrb	r1, [r3, #0]
 8008d5a:	89ba      	ldrh	r2, [r7, #12]
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	f7ff fe3d 	bl	80089dc <draw_block>
    for(i = 0; i < 4; i++)
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
 8008d64:	3301      	adds	r3, #1
 8008d66:	73fb      	strb	r3, [r7, #15]
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	d9e2      	bls.n	8008d34 <draw_next_block1+0x38>
	}
}
 8008d6e:	bf00      	nop
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	2000044c 	.word	0x2000044c
 8008d7c:	200000a8 	.word	0x200000a8

08008d80 <draw_next_block2>:

void draw_next_block2(uint8_t clear)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	4603      	mov	r3, r0
 8008d88:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	shapes* it = &shape_list[block_next2.shape];
 8008d8a:	4b1c      	ldr	r3, [pc, #112]	; (8008dfc <draw_next_block2+0x7c>)
 8008d8c:	789b      	ldrb	r3, [r3, #2]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	4613      	mov	r3, r2
 8008d92:	015b      	lsls	r3, r3, #5
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4a19      	ldr	r2, [pc, #100]	; (8008e00 <draw_next_block2+0x80>)
 8008d9a:	4413      	add	r3, r2
 8008d9c:	60bb      	str	r3, [r7, #8]
    uint16_t color = it->color;
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8008da4:	81bb      	strh	r3, [r7, #12]
    if(clear){color = WHITE;}
 8008da6:	79fb      	ldrb	r3, [r7, #7]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <draw_next_block2+0x32>
 8008dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008db0:	81bb      	strh	r3, [r7, #12]
    for(i = 0; i < 4; i++)
 8008db2:	2300      	movs	r3, #0
 8008db4:	73fb      	strb	r3, [r7, #15]
 8008db6:	e019      	b.n	8008dec <draw_next_block2+0x6c>
	{
	    draw_block(it->x[block_next2.direction][i], it->y[block_next2.direction][i], color, 2);
 8008db8:	4b10      	ldr	r3, [pc, #64]	; (8008dfc <draw_next_block2+0x7c>)
 8008dba:	78db      	ldrb	r3, [r3, #3]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
 8008dc0:	68b9      	ldr	r1, [r7, #8]
 8008dc2:	0112      	lsls	r2, r2, #4
 8008dc4:	440a      	add	r2, r1
 8008dc6:	4413      	add	r3, r2
 8008dc8:	7818      	ldrb	r0, [r3, #0]
 8008dca:	4b0c      	ldr	r3, [pc, #48]	; (8008dfc <draw_next_block2+0x7c>)
 8008dcc:	78db      	ldrb	r3, [r3, #3]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
 8008dd2:	68b9      	ldr	r1, [r7, #8]
 8008dd4:	0112      	lsls	r2, r2, #4
 8008dd6:	440a      	add	r2, r1
 8008dd8:	4413      	add	r3, r2
 8008dda:	3340      	adds	r3, #64	; 0x40
 8008ddc:	7819      	ldrb	r1, [r3, #0]
 8008dde:	89ba      	ldrh	r2, [r7, #12]
 8008de0:	2302      	movs	r3, #2
 8008de2:	f7ff fdfb 	bl	80089dc <draw_block>
    for(i = 0; i < 4; i++)
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
 8008de8:	3301      	adds	r3, #1
 8008dea:	73fb      	strb	r3, [r7, #15]
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d9e2      	bls.n	8008db8 <draw_next_block2+0x38>
	}
}
 8008df2:	bf00      	nop
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	20000448 	.word	0x20000448
 8008e00:	200000a8 	.word	0x200000a8

08008e04 <update_score>:
        LCD_DrawLine(main_origin_x, main_origin_y + i * cell_length, main_origin_x + main_width, main_origin_y + i * cell_length);
    }
}

void update_score(uint16_t score)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af02      	add	r7, sp, #8
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	80fb      	strh	r3, [r7, #6]
    char str_score[5];
    if (score > 9999)
 8008e0e:	88fb      	ldrh	r3, [r7, #6]
 8008e10:	f242 720f 	movw	r2, #9999	; 0x270f
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d902      	bls.n	8008e1e <update_score+0x1a>
        score = 9999;
 8008e18:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e1c:	80fb      	strh	r3, [r7, #6]
    sprintf(str_score, "%6d", score);
 8008e1e:	88fa      	ldrh	r2, [r7, #6]
 8008e20:	f107 0308 	add.w	r3, r7, #8
 8008e24:	4914      	ldr	r1, [pc, #80]	; (8008e78 <update_score+0x74>)
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 fbee 	bl	8009608 <siprintf>
    printf("score:%d str:%s\n", score, str_score);
 8008e2c:	88fb      	ldrh	r3, [r7, #6]
 8008e2e:	f107 0208 	add.w	r2, r7, #8
 8008e32:	4619      	mov	r1, r3
 8008e34:	4811      	ldr	r0, [pc, #68]	; (8008e7c <update_score+0x78>)
 8008e36:	f000 fb77 	bl	8009528 <iprintf>
    POINT_COLOR = BLACK;
 8008e3a:	4b11      	ldr	r3, [pc, #68]	; (8008e80 <update_score+0x7c>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	801a      	strh	r2, [r3, #0]
    LCD_Fill(sub_origin_x, sub_origin_y + 2 * sub_height + 160, sub_origin_x + screen_width, sub_origin_y + 2 * sub_height + 160 + font_size, WHITE);
 8008e40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	f44f 7399 	mov.w	r3, #306	; 0x132
 8008e4a:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8008e4e:	f44f 7191 	mov.w	r1, #290	; 0x122
 8008e52:	20aa      	movs	r0, #170	; 0xaa
 8008e54:	f7ff f8c8 	bl	8007fe8 <LCD_Fill>
    LCD_ShowString(sub_origin_x, sub_origin_y + 2 * sub_height + 160, screen_width, font_size, font_size, (uint8_t *)str_score);
 8008e58:	f107 0308 	add.w	r3, r7, #8
 8008e5c:	9301      	str	r3, [sp, #4]
 8008e5e:	2310      	movs	r3, #16
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	2310      	movs	r3, #16
 8008e64:	22f0      	movs	r2, #240	; 0xf0
 8008e66:	f44f 7191 	mov.w	r1, #290	; 0x122
 8008e6a:	20aa      	movs	r0, #170	; 0xaa
 8008e6c:	f7ff faa4 	bl	80083b8 <LCD_ShowString>

}
 8008e70:	bf00      	nop
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	0800a7b0 	.word	0x0800a7b0
 8008e7c:	0800a7b4 	.word	0x0800a7b4
 8008e80:	20000090 	.word	0x20000090

08008e84 <update_level>:

void update_level()
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b08c      	sub	sp, #48	; 0x30
 8008e88:	af02      	add	r7, sp, #8
    uint8_t level = (INIT_SPEED -  fall_down_interval) / STEP_SPEED;
 8008e8a:	4b56      	ldr	r3, [pc, #344]	; (8008fe4 <update_level+0x160>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8008e92:	4a55      	ldr	r2, [pc, #340]	; (8008fe8 <update_level+0x164>)
 8008e94:	fba2 2303 	umull	r2, r3, r2, r3
 8008e98:	091b      	lsrs	r3, r3, #4
 8008e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    char level_msg[32];
    if(level / 5 == 0){
 8008e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ea2:	2b04      	cmp	r3, #4
 8008ea4:	d825      	bhi.n	8008ef2 <update_level+0x6e>
        sprintf(level_msg, "Easy%d", level%5+1);
 8008ea6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008eaa:	4b4f      	ldr	r3, [pc, #316]	; (8008fe8 <update_level+0x164>)
 8008eac:	fba3 1302 	umull	r1, r3, r3, r2
 8008eb0:	0899      	lsrs	r1, r3, #2
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	440b      	add	r3, r1
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	1c5a      	adds	r2, r3, #1
 8008ebe:	1d3b      	adds	r3, r7, #4
 8008ec0:	494a      	ldr	r1, [pc, #296]	; (8008fec <update_level+0x168>)
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 fba0 	bl	8009608 <siprintf>
        LCD_Fill(sub_origin_x, sub_origin_y + 2 * sub_height + 100, sub_origin_x + screen_width, sub_origin_y + 2 * sub_height + 100 + font_size, WHITE);
 8008ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	23f6      	movs	r3, #246	; 0xf6
 8008ed0:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8008ed4:	21e6      	movs	r1, #230	; 0xe6
 8008ed6:	20aa      	movs	r0, #170	; 0xaa
 8008ed8:	f7ff f886 	bl	8007fe8 <LCD_Fill>
        LCD_ShowString(sub_origin_x, sub_origin_y + 2 * sub_height + 100, screen_width, font_size, font_size, (uint8_t *)level_msg);
 8008edc:	1d3b      	adds	r3, r7, #4
 8008ede:	9301      	str	r3, [sp, #4]
 8008ee0:	2310      	movs	r3, #16
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	2310      	movs	r3, #16
 8008ee6:	22f0      	movs	r2, #240	; 0xf0
 8008ee8:	21e6      	movs	r1, #230	; 0xe6
 8008eea:	20aa      	movs	r0, #170	; 0xaa
 8008eec:	f7ff fa64 	bl	80083b8 <LCD_ShowString>
    else{
        sprintf(level_msg, "NB");
        LCD_Fill(sub_origin_x, sub_origin_y + 2 * sub_height + 100, sub_origin_x + screen_width, sub_origin_y + 2 * sub_height + 100 + font_size, WHITE);
        LCD_ShowString(sub_origin_x, sub_origin_y + 2 * sub_height + 100, screen_width, font_size, font_size, (uint8_t *)level_msg);
    }
}
 8008ef0:	e073      	b.n	8008fda <update_level+0x156>
    else if(level / 5 == 1){
 8008ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ef6:	3b05      	subs	r3, #5
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	d825      	bhi.n	8008f4a <update_level+0xc6>
        sprintf(level_msg, "Medium%d", level%5+1);
 8008efe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008f02:	4b39      	ldr	r3, [pc, #228]	; (8008fe8 <update_level+0x164>)
 8008f04:	fba3 1302 	umull	r1, r3, r3, r2
 8008f08:	0899      	lsrs	r1, r3, #2
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	440b      	add	r3, r1
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	1c5a      	adds	r2, r3, #1
 8008f16:	1d3b      	adds	r3, r7, #4
 8008f18:	4935      	ldr	r1, [pc, #212]	; (8008ff0 <update_level+0x16c>)
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 fb74 	bl	8009608 <siprintf>
        LCD_Fill(sub_origin_x, sub_origin_y + 2 * sub_height + 100, sub_origin_x + screen_width, sub_origin_y + 2 * sub_height + 100 + font_size, WHITE);
 8008f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	23f6      	movs	r3, #246	; 0xf6
 8008f28:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8008f2c:	21e6      	movs	r1, #230	; 0xe6
 8008f2e:	20aa      	movs	r0, #170	; 0xaa
 8008f30:	f7ff f85a 	bl	8007fe8 <LCD_Fill>
        LCD_ShowString(sub_origin_x, sub_origin_y + 2 * sub_height + 100, screen_width, font_size, font_size, (uint8_t *)level_msg);
 8008f34:	1d3b      	adds	r3, r7, #4
 8008f36:	9301      	str	r3, [sp, #4]
 8008f38:	2310      	movs	r3, #16
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	2310      	movs	r3, #16
 8008f3e:	22f0      	movs	r2, #240	; 0xf0
 8008f40:	21e6      	movs	r1, #230	; 0xe6
 8008f42:	20aa      	movs	r0, #170	; 0xaa
 8008f44:	f7ff fa38 	bl	80083b8 <LCD_ShowString>
}
 8008f48:	e047      	b.n	8008fda <update_level+0x156>
    else if(level / 5 == 2){
 8008f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f4e:	3b0a      	subs	r3, #10
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b04      	cmp	r3, #4
 8008f54:	d825      	bhi.n	8008fa2 <update_level+0x11e>
        sprintf(level_msg, "Hard%d", level%5+1);
 8008f56:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008f5a:	4b23      	ldr	r3, [pc, #140]	; (8008fe8 <update_level+0x164>)
 8008f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8008f60:	0899      	lsrs	r1, r3, #2
 8008f62:	460b      	mov	r3, r1
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	440b      	add	r3, r1
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	1d3b      	adds	r3, r7, #4
 8008f70:	4920      	ldr	r1, [pc, #128]	; (8008ff4 <update_level+0x170>)
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 fb48 	bl	8009608 <siprintf>
        LCD_Fill(sub_origin_x, sub_origin_y + 2 * sub_height + 100, sub_origin_x + screen_width, sub_origin_y + 2 * sub_height + 100 + font_size, WHITE);
 8008f78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	23f6      	movs	r3, #246	; 0xf6
 8008f80:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8008f84:	21e6      	movs	r1, #230	; 0xe6
 8008f86:	20aa      	movs	r0, #170	; 0xaa
 8008f88:	f7ff f82e 	bl	8007fe8 <LCD_Fill>
        LCD_ShowString(sub_origin_x, sub_origin_y + 2 * sub_height + 100, screen_width, font_size, font_size, (uint8_t *)level_msg);
 8008f8c:	1d3b      	adds	r3, r7, #4
 8008f8e:	9301      	str	r3, [sp, #4]
 8008f90:	2310      	movs	r3, #16
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	2310      	movs	r3, #16
 8008f96:	22f0      	movs	r2, #240	; 0xf0
 8008f98:	21e6      	movs	r1, #230	; 0xe6
 8008f9a:	20aa      	movs	r0, #170	; 0xaa
 8008f9c:	f7ff fa0c 	bl	80083b8 <LCD_ShowString>
}
 8008fa0:	e01b      	b.n	8008fda <update_level+0x156>
        sprintf(level_msg, "NB");
 8008fa2:	1d3b      	adds	r3, r7, #4
 8008fa4:	4a14      	ldr	r2, [pc, #80]	; (8008ff8 <update_level+0x174>)
 8008fa6:	6812      	ldr	r2, [r2, #0]
 8008fa8:	4611      	mov	r1, r2
 8008faa:	8019      	strh	r1, [r3, #0]
 8008fac:	3302      	adds	r3, #2
 8008fae:	0c12      	lsrs	r2, r2, #16
 8008fb0:	701a      	strb	r2, [r3, #0]
        LCD_Fill(sub_origin_x, sub_origin_y + 2 * sub_height + 100, sub_origin_x + screen_width, sub_origin_y + 2 * sub_height + 100 + font_size, WHITE);
 8008fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	23f6      	movs	r3, #246	; 0xf6
 8008fba:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8008fbe:	21e6      	movs	r1, #230	; 0xe6
 8008fc0:	20aa      	movs	r0, #170	; 0xaa
 8008fc2:	f7ff f811 	bl	8007fe8 <LCD_Fill>
        LCD_ShowString(sub_origin_x, sub_origin_y + 2 * sub_height + 100, screen_width, font_size, font_size, (uint8_t *)level_msg);
 8008fc6:	1d3b      	adds	r3, r7, #4
 8008fc8:	9301      	str	r3, [sp, #4]
 8008fca:	2310      	movs	r3, #16
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	2310      	movs	r3, #16
 8008fd0:	22f0      	movs	r2, #240	; 0xf0
 8008fd2:	21e6      	movs	r1, #230	; 0xe6
 8008fd4:	20aa      	movs	r0, #170	; 0xaa
 8008fd6:	f7ff f9ef 	bl	80083b8 <LCD_ShowString>
}
 8008fda:	bf00      	nop
 8008fdc:	3728      	adds	r7, #40	; 0x28
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20000468 	.word	0x20000468
 8008fe8:	cccccccd 	.word	0xcccccccd
 8008fec:	0800a7c8 	.word	0x0800a7c8
 8008ff0:	0800a7d0 	.word	0x0800a7d0
 8008ff4:	0800a7dc 	.word	0x0800a7dc
 8008ff8:	0800a7e4 	.word	0x0800a7e4

08008ffc <game_start>:

void game_start()
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af02      	add	r7, sp, #8
    LCD_Clear(WHITE);
 8009002:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009006:	f7fe ff8d 	bl	8007f24 <LCD_Clear>
    LCD_ShowImage();
 800900a:	f7ff fa23 	bl	8008454 <LCD_ShowImage>
    POINT_COLOR = LGRAYBLUE;
 800900e:	4b1e      	ldr	r3, [pc, #120]	; (8009088 <game_start+0x8c>)
 8009010:	f24a 6251 	movw	r2, #42577	; 0xa651
 8009014:	801a      	strh	r2, [r3, #0]
    LCD_Fill(30, 230, 210, 246, BLACK);
 8009016:	2300      	movs	r3, #0
 8009018:	9300      	str	r3, [sp, #0]
 800901a:	23f6      	movs	r3, #246	; 0xf6
 800901c:	22d2      	movs	r2, #210	; 0xd2
 800901e:	21e6      	movs	r1, #230	; 0xe6
 8009020:	201e      	movs	r0, #30
 8009022:	f7fe ffe1 	bl	8007fe8 <LCD_Fill>
    LCD_ShowString(30, 230, 210, 16, 16, (uint8_t*) "Press any key to start.");
 8009026:	4b19      	ldr	r3, [pc, #100]	; (800908c <game_start+0x90>)
 8009028:	9301      	str	r3, [sp, #4]
 800902a:	2310      	movs	r3, #16
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	2310      	movs	r3, #16
 8009030:	22d2      	movs	r2, #210	; 0xd2
 8009032:	21e6      	movs	r1, #230	; 0xe6
 8009034:	201e      	movs	r0, #30
 8009036:	f7ff f9bf 	bl	80083b8 <LCD_ShowString>
    while(1){
        HAL_Delay(21);
 800903a:	2015      	movs	r0, #21
 800903c:	f7f7 fd44 	bl	8000ac8 <HAL_Delay>
        if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) != GPIO_PIN_SET) {break;}
 8009040:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009044:	4812      	ldr	r0, [pc, #72]	; (8009090 <game_start+0x94>)
 8009046:	f7f7 ffaf 	bl	8000fa8 <HAL_GPIO_ReadPin>
 800904a:	4603      	mov	r3, r0
 800904c:	2b01      	cmp	r3, #1
 800904e:	d10e      	bne.n	800906e <game_start+0x72>
        if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) != GPIO_PIN_SET) {break;}
 8009050:	2120      	movs	r1, #32
 8009052:	4810      	ldr	r0, [pc, #64]	; (8009094 <game_start+0x98>)
 8009054:	f7f7 ffa8 	bl	8000fa8 <HAL_GPIO_ReadPin>
 8009058:	4603      	mov	r3, r0
 800905a:	2b01      	cmp	r3, #1
 800905c:	d109      	bne.n	8009072 <game_start+0x76>
        if (HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin) != GPIO_PIN_RESET) {break;}
 800905e:	2101      	movs	r1, #1
 8009060:	480b      	ldr	r0, [pc, #44]	; (8009090 <game_start+0x94>)
 8009062:	f7f7 ffa1 	bl	8000fa8 <HAL_GPIO_ReadPin>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d104      	bne.n	8009076 <game_start+0x7a>
        HAL_Delay(21);
 800906c:	e7e5      	b.n	800903a <game_start+0x3e>
        if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) != GPIO_PIN_SET) {break;}
 800906e:	bf00      	nop
 8009070:	e002      	b.n	8009078 <game_start+0x7c>
        if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) != GPIO_PIN_SET) {break;}
 8009072:	bf00      	nop
 8009074:	e000      	b.n	8009078 <game_start+0x7c>
        if (HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin) != GPIO_PIN_RESET) {break;}
 8009076:	bf00      	nop
    }
    // LCD_Clear(WHITE);
    choose_pattern();
 8009078:	f000 f80e 	bl	8009098 <choose_pattern>
    game_reset();
 800907c:	f7f9 fc00 	bl	8002880 <game_reset>
}
 8009080:	bf00      	nop
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20000090 	.word	0x20000090
 800908c:	0800a7e8 	.word	0x0800a7e8
 8009090:	40010800 	.word	0x40010800
 8009094:	40011000 	.word	0x40011000

08009098 <choose_pattern>:

void choose_pattern()
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af02      	add	r7, sp, #8
    LCD_Clear(BLACK);
 800909e:	2000      	movs	r0, #0
 80090a0:	f7fe ff40 	bl	8007f24 <LCD_Clear>
    // LCD_Fill(0, 0, screen_width, screen_height, BLACK);
    POINT_COLOR = LGRAYBLUE;
 80090a4:	4b8a      	ldr	r3, [pc, #552]	; (80092d0 <choose_pattern+0x238>)
 80090a6:	f24a 6251 	movw	r2, #42577	; 0xa651
 80090aa:	801a      	strh	r2, [r3, #0]
    LCD_ShowString(20, 40, 200, 16, 16, (uint8_t*) "Choose the block pattern:");
 80090ac:	4b89      	ldr	r3, [pc, #548]	; (80092d4 <choose_pattern+0x23c>)
 80090ae:	9301      	str	r3, [sp, #4]
 80090b0:	2310      	movs	r3, #16
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	2310      	movs	r3, #16
 80090b6:	22c8      	movs	r2, #200	; 0xc8
 80090b8:	2128      	movs	r1, #40	; 0x28
 80090ba:	2014      	movs	r0, #20
 80090bc:	f7ff f97c 	bl	80083b8 <LCD_ShowString>
    POINT_COLOR = LGRAY;
 80090c0:	4b83      	ldr	r3, [pc, #524]	; (80092d0 <choose_pattern+0x238>)
 80090c2:	f24c 6218 	movw	r2, #50712	; 0xc618
 80090c6:	801a      	strh	r2, [r3, #0]
    LCD_ShowString(80, 100, 200, 24, 24, (uint8_t*) "Normal");
 80090c8:	4b83      	ldr	r3, [pc, #524]	; (80092d8 <choose_pattern+0x240>)
 80090ca:	9301      	str	r3, [sp, #4]
 80090cc:	2318      	movs	r3, #24
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	2318      	movs	r3, #24
 80090d2:	22c8      	movs	r2, #200	; 0xc8
 80090d4:	2164      	movs	r1, #100	; 0x64
 80090d6:	2050      	movs	r0, #80	; 0x50
 80090d8:	f7ff f96e 	bl	80083b8 <LCD_ShowString>
    LCD_ShowString(70, 150, 200, 24, 24, (uint8_t*) "Bilibili");
 80090dc:	4b7f      	ldr	r3, [pc, #508]	; (80092dc <choose_pattern+0x244>)
 80090de:	9301      	str	r3, [sp, #4]
 80090e0:	2318      	movs	r3, #24
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	2318      	movs	r3, #24
 80090e6:	22c8      	movs	r2, #200	; 0xc8
 80090e8:	2196      	movs	r1, #150	; 0x96
 80090ea:	2046      	movs	r0, #70	; 0x46
 80090ec:	f7ff f964 	bl	80083b8 <LCD_ShowString>
    LCD_ShowString(80, 200, 200, 24, 24, (uint8_t*) "Shadow");
 80090f0:	4b7b      	ldr	r3, [pc, #492]	; (80092e0 <choose_pattern+0x248>)
 80090f2:	9301      	str	r3, [sp, #4]
 80090f4:	2318      	movs	r3, #24
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	2318      	movs	r3, #24
 80090fa:	22c8      	movs	r2, #200	; 0xc8
 80090fc:	21c8      	movs	r1, #200	; 0xc8
 80090fe:	2050      	movs	r0, #80	; 0x50
 8009100:	f7ff f95a 	bl	80083b8 <LCD_ShowString>
    POINT_COLOR = LGRAYBLUE;
 8009104:	4b72      	ldr	r3, [pc, #456]	; (80092d0 <choose_pattern+0x238>)
 8009106:	f24a 6251 	movw	r2, #42577	; 0xa651
 800910a:	801a      	strh	r2, [r3, #0]
    LCD_ShowString(10, 270, 240, 12, 12, (uint8_t*) "WK_UP: OK  |  KEY1: <-  |  KEY0: ->");
 800910c:	4b75      	ldr	r3, [pc, #468]	; (80092e4 <choose_pattern+0x24c>)
 800910e:	9301      	str	r3, [sp, #4]
 8009110:	230c      	movs	r3, #12
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	230c      	movs	r3, #12
 8009116:	22f0      	movs	r2, #240	; 0xf0
 8009118:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800911c:	200a      	movs	r0, #10
 800911e:	f7ff f94b 	bl	80083b8 <LCD_ShowString>
    POINT_COLOR = YELLOW;
 8009122:	4b6b      	ldr	r3, [pc, #428]	; (80092d0 <choose_pattern+0x238>)
 8009124:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8009128:	801a      	strh	r2, [r3, #0]
    LCD_DrawRectangle(70, 100, 160, 124);
 800912a:	237c      	movs	r3, #124	; 0x7c
 800912c:	22a0      	movs	r2, #160	; 0xa0
 800912e:	2164      	movs	r1, #100	; 0x64
 8009130:	2046      	movs	r0, #70	; 0x46
 8009132:	f7ff f868 	bl	8008206 <LCD_DrawRectangle>
    // LCD_DrawRectangle(60, 150, 170, 174);
    // LCD_DrawRectangle(70, 200, 160, 224);
    HAL_Delay(1000);
 8009136:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800913a:	f7f7 fcc5 	bl	8000ac8 <HAL_Delay>
    while(1){
        HAL_Delay(200);
 800913e:	20c8      	movs	r0, #200	; 0xc8
 8009140:	f7f7 fcc2 	bl	8000ac8 <HAL_Delay>
        if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) != GPIO_PIN_SET) {
 8009144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009148:	4867      	ldr	r0, [pc, #412]	; (80092e8 <choose_pattern+0x250>)
 800914a:	f7f7 ff2d 	bl	8000fa8 <HAL_GPIO_ReadPin>
 800914e:	4603      	mov	r3, r0
 8009150:	2b01      	cmp	r3, #1
 8009152:	d050      	beq.n	80091f6 <choose_pattern+0x15e>
            if(pattern == 1){
 8009154:	4b65      	ldr	r3, [pc, #404]	; (80092ec <choose_pattern+0x254>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d116      	bne.n	800918a <choose_pattern+0xf2>
                POINT_COLOR = BLACK;
 800915c:	4b5c      	ldr	r3, [pc, #368]	; (80092d0 <choose_pattern+0x238>)
 800915e:	2200      	movs	r2, #0
 8009160:	801a      	strh	r2, [r3, #0]
                LCD_DrawRectangle(60, 150, 170, 174);
 8009162:	23ae      	movs	r3, #174	; 0xae
 8009164:	22aa      	movs	r2, #170	; 0xaa
 8009166:	2196      	movs	r1, #150	; 0x96
 8009168:	203c      	movs	r0, #60	; 0x3c
 800916a:	f7ff f84c 	bl	8008206 <LCD_DrawRectangle>
                POINT_COLOR = YELLOW;
 800916e:	4b58      	ldr	r3, [pc, #352]	; (80092d0 <choose_pattern+0x238>)
 8009170:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8009174:	801a      	strh	r2, [r3, #0]
                LCD_DrawRectangle(70, 100, 160, 124);
 8009176:	237c      	movs	r3, #124	; 0x7c
 8009178:	22a0      	movs	r2, #160	; 0xa0
 800917a:	2164      	movs	r1, #100	; 0x64
 800917c:	2046      	movs	r0, #70	; 0x46
 800917e:	f7ff f842 	bl	8008206 <LCD_DrawRectangle>
                pattern = 0;
 8009182:	4b5a      	ldr	r3, [pc, #360]	; (80092ec <choose_pattern+0x254>)
 8009184:	2200      	movs	r2, #0
 8009186:	701a      	strb	r2, [r3, #0]
                LCD_DrawRectangle(70, 100, 160, 124);
                POINT_COLOR = YELLOW;
                LCD_DrawRectangle(70, 200, 160, 224);
                pattern = 2;
            }            
            continue;
 8009188:	e095      	b.n	80092b6 <choose_pattern+0x21e>
            else if(pattern == 2){
 800918a:	4b58      	ldr	r3, [pc, #352]	; (80092ec <choose_pattern+0x254>)
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	2b02      	cmp	r3, #2
 8009190:	d116      	bne.n	80091c0 <choose_pattern+0x128>
                POINT_COLOR = BLACK;
 8009192:	4b4f      	ldr	r3, [pc, #316]	; (80092d0 <choose_pattern+0x238>)
 8009194:	2200      	movs	r2, #0
 8009196:	801a      	strh	r2, [r3, #0]
                LCD_DrawRectangle(70, 200, 160, 224);
 8009198:	23e0      	movs	r3, #224	; 0xe0
 800919a:	22a0      	movs	r2, #160	; 0xa0
 800919c:	21c8      	movs	r1, #200	; 0xc8
 800919e:	2046      	movs	r0, #70	; 0x46
 80091a0:	f7ff f831 	bl	8008206 <LCD_DrawRectangle>
                POINT_COLOR = YELLOW;
 80091a4:	4b4a      	ldr	r3, [pc, #296]	; (80092d0 <choose_pattern+0x238>)
 80091a6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80091aa:	801a      	strh	r2, [r3, #0]
                LCD_DrawRectangle(60, 150, 170, 174);
 80091ac:	23ae      	movs	r3, #174	; 0xae
 80091ae:	22aa      	movs	r2, #170	; 0xaa
 80091b0:	2196      	movs	r1, #150	; 0x96
 80091b2:	203c      	movs	r0, #60	; 0x3c
 80091b4:	f7ff f827 	bl	8008206 <LCD_DrawRectangle>
                pattern = 1;
 80091b8:	4b4c      	ldr	r3, [pc, #304]	; (80092ec <choose_pattern+0x254>)
 80091ba:	2201      	movs	r2, #1
 80091bc:	701a      	strb	r2, [r3, #0]
            continue;
 80091be:	e07a      	b.n	80092b6 <choose_pattern+0x21e>
            else if(pattern == 0)
 80091c0:	4b4a      	ldr	r3, [pc, #296]	; (80092ec <choose_pattern+0x254>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d176      	bne.n	80092b6 <choose_pattern+0x21e>
                POINT_COLOR = BLACK;
 80091c8:	4b41      	ldr	r3, [pc, #260]	; (80092d0 <choose_pattern+0x238>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	801a      	strh	r2, [r3, #0]
                LCD_DrawRectangle(70, 100, 160, 124);
 80091ce:	237c      	movs	r3, #124	; 0x7c
 80091d0:	22a0      	movs	r2, #160	; 0xa0
 80091d2:	2164      	movs	r1, #100	; 0x64
 80091d4:	2046      	movs	r0, #70	; 0x46
 80091d6:	f7ff f816 	bl	8008206 <LCD_DrawRectangle>
                POINT_COLOR = YELLOW;
 80091da:	4b3d      	ldr	r3, [pc, #244]	; (80092d0 <choose_pattern+0x238>)
 80091dc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80091e0:	801a      	strh	r2, [r3, #0]
                LCD_DrawRectangle(70, 200, 160, 224);
 80091e2:	23e0      	movs	r3, #224	; 0xe0
 80091e4:	22a0      	movs	r2, #160	; 0xa0
 80091e6:	21c8      	movs	r1, #200	; 0xc8
 80091e8:	2046      	movs	r0, #70	; 0x46
 80091ea:	f7ff f80c 	bl	8008206 <LCD_DrawRectangle>
                pattern = 2;
 80091ee:	4b3f      	ldr	r3, [pc, #252]	; (80092ec <choose_pattern+0x254>)
 80091f0:	2202      	movs	r2, #2
 80091f2:	701a      	strb	r2, [r3, #0]
            continue;
 80091f4:	e05f      	b.n	80092b6 <choose_pattern+0x21e>
        }
        if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) != GPIO_PIN_SET) {
 80091f6:	2120      	movs	r1, #32
 80091f8:	483d      	ldr	r0, [pc, #244]	; (80092f0 <choose_pattern+0x258>)
 80091fa:	f7f7 fed5 	bl	8000fa8 <HAL_GPIO_ReadPin>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b01      	cmp	r3, #1
 8009202:	d050      	beq.n	80092a6 <choose_pattern+0x20e>
            if(pattern == 0){
 8009204:	4b39      	ldr	r3, [pc, #228]	; (80092ec <choose_pattern+0x254>)
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d116      	bne.n	800923a <choose_pattern+0x1a2>
                POINT_COLOR = BLACK;
 800920c:	4b30      	ldr	r3, [pc, #192]	; (80092d0 <choose_pattern+0x238>)
 800920e:	2200      	movs	r2, #0
 8009210:	801a      	strh	r2, [r3, #0]
                LCD_DrawRectangle(70, 100, 160, 124);
 8009212:	237c      	movs	r3, #124	; 0x7c
 8009214:	22a0      	movs	r2, #160	; 0xa0
 8009216:	2164      	movs	r1, #100	; 0x64
 8009218:	2046      	movs	r0, #70	; 0x46
 800921a:	f7fe fff4 	bl	8008206 <LCD_DrawRectangle>
                POINT_COLOR = YELLOW;
 800921e:	4b2c      	ldr	r3, [pc, #176]	; (80092d0 <choose_pattern+0x238>)
 8009220:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8009224:	801a      	strh	r2, [r3, #0]
                LCD_DrawRectangle(60, 150, 170, 174);
 8009226:	23ae      	movs	r3, #174	; 0xae
 8009228:	22aa      	movs	r2, #170	; 0xaa
 800922a:	2196      	movs	r1, #150	; 0x96
 800922c:	203c      	movs	r0, #60	; 0x3c
 800922e:	f7fe ffea 	bl	8008206 <LCD_DrawRectangle>
                pattern = 1;
 8009232:	4b2e      	ldr	r3, [pc, #184]	; (80092ec <choose_pattern+0x254>)
 8009234:	2201      	movs	r2, #1
 8009236:	701a      	strb	r2, [r3, #0]
                LCD_DrawRectangle(70, 200, 160, 224);
                POINT_COLOR = YELLOW;
                LCD_DrawRectangle(70, 100, 160, 124);
                pattern = 0;
            }
            continue;
 8009238:	e03f      	b.n	80092ba <choose_pattern+0x222>
            else if(pattern == 1){
 800923a:	4b2c      	ldr	r3, [pc, #176]	; (80092ec <choose_pattern+0x254>)
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d116      	bne.n	8009270 <choose_pattern+0x1d8>
                POINT_COLOR = BLACK;
 8009242:	4b23      	ldr	r3, [pc, #140]	; (80092d0 <choose_pattern+0x238>)
 8009244:	2200      	movs	r2, #0
 8009246:	801a      	strh	r2, [r3, #0]
                LCD_DrawRectangle(60, 150, 170, 174);
 8009248:	23ae      	movs	r3, #174	; 0xae
 800924a:	22aa      	movs	r2, #170	; 0xaa
 800924c:	2196      	movs	r1, #150	; 0x96
 800924e:	203c      	movs	r0, #60	; 0x3c
 8009250:	f7fe ffd9 	bl	8008206 <LCD_DrawRectangle>
                POINT_COLOR = YELLOW;
 8009254:	4b1e      	ldr	r3, [pc, #120]	; (80092d0 <choose_pattern+0x238>)
 8009256:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800925a:	801a      	strh	r2, [r3, #0]
                LCD_DrawRectangle(70, 200, 160, 224);
 800925c:	23e0      	movs	r3, #224	; 0xe0
 800925e:	22a0      	movs	r2, #160	; 0xa0
 8009260:	21c8      	movs	r1, #200	; 0xc8
 8009262:	2046      	movs	r0, #70	; 0x46
 8009264:	f7fe ffcf 	bl	8008206 <LCD_DrawRectangle>
                pattern = 2;
 8009268:	4b20      	ldr	r3, [pc, #128]	; (80092ec <choose_pattern+0x254>)
 800926a:	2202      	movs	r2, #2
 800926c:	701a      	strb	r2, [r3, #0]
            continue;
 800926e:	e024      	b.n	80092ba <choose_pattern+0x222>
            else if(pattern == 2){
 8009270:	4b1e      	ldr	r3, [pc, #120]	; (80092ec <choose_pattern+0x254>)
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	2b02      	cmp	r3, #2
 8009276:	d120      	bne.n	80092ba <choose_pattern+0x222>
                POINT_COLOR = BLACK;
 8009278:	4b15      	ldr	r3, [pc, #84]	; (80092d0 <choose_pattern+0x238>)
 800927a:	2200      	movs	r2, #0
 800927c:	801a      	strh	r2, [r3, #0]
                LCD_DrawRectangle(70, 200, 160, 224);
 800927e:	23e0      	movs	r3, #224	; 0xe0
 8009280:	22a0      	movs	r2, #160	; 0xa0
 8009282:	21c8      	movs	r1, #200	; 0xc8
 8009284:	2046      	movs	r0, #70	; 0x46
 8009286:	f7fe ffbe 	bl	8008206 <LCD_DrawRectangle>
                POINT_COLOR = YELLOW;
 800928a:	4b11      	ldr	r3, [pc, #68]	; (80092d0 <choose_pattern+0x238>)
 800928c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8009290:	801a      	strh	r2, [r3, #0]
                LCD_DrawRectangle(70, 100, 160, 124);
 8009292:	237c      	movs	r3, #124	; 0x7c
 8009294:	22a0      	movs	r2, #160	; 0xa0
 8009296:	2164      	movs	r1, #100	; 0x64
 8009298:	2046      	movs	r0, #70	; 0x46
 800929a:	f7fe ffb4 	bl	8008206 <LCD_DrawRectangle>
                pattern = 0;
 800929e:	4b13      	ldr	r3, [pc, #76]	; (80092ec <choose_pattern+0x254>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	701a      	strb	r2, [r3, #0]
            continue;
 80092a4:	e009      	b.n	80092ba <choose_pattern+0x222>
        }
        if (HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin) != GPIO_PIN_RESET) {break;}
 80092a6:	2101      	movs	r1, #1
 80092a8:	480f      	ldr	r0, [pc, #60]	; (80092e8 <choose_pattern+0x250>)
 80092aa:	f7f7 fe7d 	bl	8000fa8 <HAL_GPIO_ReadPin>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d104      	bne.n	80092be <choose_pattern+0x226>
 80092b4:	e743      	b.n	800913e <choose_pattern+0xa6>
            continue;
 80092b6:	bf00      	nop
 80092b8:	e741      	b.n	800913e <choose_pattern+0xa6>
            continue;
 80092ba:	bf00      	nop
        HAL_Delay(200);
 80092bc:	e73f      	b.n	800913e <choose_pattern+0xa6>
        if (HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin) != GPIO_PIN_RESET) {break;}
 80092be:	bf00      	nop
    }
    LCD_Clear(WHITE);
 80092c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80092c4:	f7fe fe2e 	bl	8007f24 <LCD_Clear>
}
 80092c8:	bf00      	nop
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	20000090 	.word	0x20000090
 80092d4:	0800a800 	.word	0x0800a800
 80092d8:	0800a81c 	.word	0x0800a81c
 80092dc:	0800a824 	.word	0x0800a824
 80092e0:	0800a830 	.word	0x0800a830
 80092e4:	0800a838 	.word	0x0800a838
 80092e8:	40010800 	.word	0x40010800
 80092ec:	20000098 	.word	0x20000098
 80092f0:	40011000 	.word	0x40011000

080092f4 <game_over>:

void game_over(uint16_t score)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b08c      	sub	sp, #48	; 0x30
 80092f8:	af02      	add	r7, sp, #8
 80092fa:	4603      	mov	r3, r0
 80092fc:	80fb      	strh	r3, [r7, #6]
    POINT_COLOR = BRRED;
 80092fe:	4b56      	ldr	r3, [pc, #344]	; (8009458 <game_over+0x164>)
 8009300:	f64f 4207 	movw	r2, #64519	; 0xfc07
 8009304:	801a      	strh	r2, [r3, #0]
    LCD_ShowString(10, 100, 200, 24, 24, (uint8_t*) "Stackoverflow!");
 8009306:	4b55      	ldr	r3, [pc, #340]	; (800945c <game_over+0x168>)
 8009308:	9301      	str	r3, [sp, #4]
 800930a:	2318      	movs	r3, #24
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	2318      	movs	r3, #24
 8009310:	22c8      	movs	r2, #200	; 0xc8
 8009312:	2164      	movs	r1, #100	; 0x64
 8009314:	200a      	movs	r0, #10
 8009316:	f7ff f84f 	bl	80083b8 <LCD_ShowString>
    uint8_t i;
    for(i = 0; i < 10; i++){
 800931a:	2300      	movs	r3, #0
 800931c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009320:	e020      	b.n	8009364 <game_over+0x70>
        HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8009322:	2200      	movs	r2, #0
 8009324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009328:	484d      	ldr	r0, [pc, #308]	; (8009460 <game_over+0x16c>)
 800932a:	f7f7 fe54 	bl	8000fd6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800932e:	2200      	movs	r2, #0
 8009330:	2104      	movs	r1, #4
 8009332:	484c      	ldr	r0, [pc, #304]	; (8009464 <game_over+0x170>)
 8009334:	f7f7 fe4f 	bl	8000fd6 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8009338:	2064      	movs	r0, #100	; 0x64
 800933a:	f7f7 fbc5 	bl	8000ac8 <HAL_Delay>
        HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 800933e:	2201      	movs	r2, #1
 8009340:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009344:	4846      	ldr	r0, [pc, #280]	; (8009460 <game_over+0x16c>)
 8009346:	f7f7 fe46 	bl	8000fd6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800934a:	2201      	movs	r2, #1
 800934c:	2104      	movs	r1, #4
 800934e:	4845      	ldr	r0, [pc, #276]	; (8009464 <game_over+0x170>)
 8009350:	f7f7 fe41 	bl	8000fd6 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8009354:	2064      	movs	r0, #100	; 0x64
 8009356:	f7f7 fbb7 	bl	8000ac8 <HAL_Delay>
    for(i = 0; i < 10; i++){
 800935a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800935e:	3301      	adds	r3, #1
 8009360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009368:	2b09      	cmp	r3, #9
 800936a:	d9da      	bls.n	8009322 <game_over+0x2e>
    }
    LCD_Clear(BLACK);
 800936c:	2000      	movs	r0, #0
 800936e:	f7fe fdd9 	bl	8007f24 <LCD_Clear>
    // LCD_ShowImage();
    POINT_COLOR = RED;
 8009372:	4b39      	ldr	r3, [pc, #228]	; (8009458 <game_over+0x164>)
 8009374:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8009378:	801a      	strh	r2, [r3, #0]
    LCD_ShowString(60, 60, 200, 24, 24, (uint8_t*) "Game Over!");
 800937a:	4b3b      	ldr	r3, [pc, #236]	; (8009468 <game_over+0x174>)
 800937c:	9301      	str	r3, [sp, #4]
 800937e:	2318      	movs	r3, #24
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	2318      	movs	r3, #24
 8009384:	22c8      	movs	r2, #200	; 0xc8
 8009386:	213c      	movs	r1, #60	; 0x3c
 8009388:	203c      	movs	r0, #60	; 0x3c
 800938a:	f7ff f815 	bl	80083b8 <LCD_ShowString>
    char msg[30];
    sprintf(msg, "Your score is %4d", score);
 800938e:	88fa      	ldrh	r2, [r7, #6]
 8009390:	f107 0308 	add.w	r3, r7, #8
 8009394:	4935      	ldr	r1, [pc, #212]	; (800946c <game_over+0x178>)
 8009396:	4618      	mov	r0, r3
 8009398:	f000 f936 	bl	8009608 <siprintf>
    LCD_ShowString(40, 100, 200, 16, 16, (uint8_t*) msg);
 800939c:	f107 0308 	add.w	r3, r7, #8
 80093a0:	9301      	str	r3, [sp, #4]
 80093a2:	2310      	movs	r3, #16
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	2310      	movs	r3, #16
 80093a8:	22c8      	movs	r2, #200	; 0xc8
 80093aa:	2164      	movs	r1, #100	; 0x64
 80093ac:	2028      	movs	r0, #40	; 0x28
 80093ae:	f7ff f803 	bl	80083b8 <LCD_ShowString>
    POINT_COLOR = LGRAY;
 80093b2:	4b29      	ldr	r3, [pc, #164]	; (8009458 <game_over+0x164>)
 80093b4:	f24c 6218 	movw	r2, #50712	; 0xc618
 80093b8:	801a      	strh	r2, [r3, #0]
    LCD_ShowString(20, 160, 200, 16, 16, (uint8_t*) "Press any key to continue.");
 80093ba:	4b2d      	ldr	r3, [pc, #180]	; (8009470 <game_over+0x17c>)
 80093bc:	9301      	str	r3, [sp, #4]
 80093be:	2310      	movs	r3, #16
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	2310      	movs	r3, #16
 80093c4:	22c8      	movs	r2, #200	; 0xc8
 80093c6:	21a0      	movs	r1, #160	; 0xa0
 80093c8:	2014      	movs	r0, #20
 80093ca:	f7fe fff5 	bl	80083b8 <LCD_ShowString>
    while(1){
        HAL_Delay(21);
 80093ce:	2015      	movs	r0, #21
 80093d0:	f7f7 fb7a 	bl	8000ac8 <HAL_Delay>
        if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) != GPIO_PIN_SET) {break;}
 80093d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80093d8:	4821      	ldr	r0, [pc, #132]	; (8009460 <game_over+0x16c>)
 80093da:	f7f7 fde5 	bl	8000fa8 <HAL_GPIO_ReadPin>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d12a      	bne.n	800943a <game_over+0x146>
        if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) != GPIO_PIN_SET) {break;}
 80093e4:	2120      	movs	r1, #32
 80093e6:	4823      	ldr	r0, [pc, #140]	; (8009474 <game_over+0x180>)
 80093e8:	f7f7 fdde 	bl	8000fa8 <HAL_GPIO_ReadPin>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d125      	bne.n	800943e <game_over+0x14a>
        if (HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin) != GPIO_PIN_RESET) {break;}
 80093f2:	2101      	movs	r1, #1
 80093f4:	481a      	ldr	r0, [pc, #104]	; (8009460 <game_over+0x16c>)
 80093f6:	f7f7 fdd7 	bl	8000fa8 <HAL_GPIO_ReadPin>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d120      	bne.n	8009442 <game_over+0x14e>
        // bling
        HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8009400:	2200      	movs	r2, #0
 8009402:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009406:	4816      	ldr	r0, [pc, #88]	; (8009460 <game_over+0x16c>)
 8009408:	f7f7 fde5 	bl	8000fd6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800940c:	2200      	movs	r2, #0
 800940e:	2104      	movs	r1, #4
 8009410:	4814      	ldr	r0, [pc, #80]	; (8009464 <game_over+0x170>)
 8009412:	f7f7 fde0 	bl	8000fd6 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8009416:	2064      	movs	r0, #100	; 0x64
 8009418:	f7f7 fb56 	bl	8000ac8 <HAL_Delay>
        HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 800941c:	2201      	movs	r2, #1
 800941e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009422:	480f      	ldr	r0, [pc, #60]	; (8009460 <game_over+0x16c>)
 8009424:	f7f7 fdd7 	bl	8000fd6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8009428:	2201      	movs	r2, #1
 800942a:	2104      	movs	r1, #4
 800942c:	480d      	ldr	r0, [pc, #52]	; (8009464 <game_over+0x170>)
 800942e:	f7f7 fdd2 	bl	8000fd6 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8009432:	2064      	movs	r0, #100	; 0x64
 8009434:	f7f7 fb48 	bl	8000ac8 <HAL_Delay>
        HAL_Delay(21);
 8009438:	e7c9      	b.n	80093ce <game_over+0xda>
        if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) != GPIO_PIN_SET) {break;}
 800943a:	bf00      	nop
 800943c:	e002      	b.n	8009444 <game_over+0x150>
        if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) != GPIO_PIN_SET) {break;}
 800943e:	bf00      	nop
 8009440:	e000      	b.n	8009444 <game_over+0x150>
        if (HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin) != GPIO_PIN_RESET) {break;}
 8009442:	bf00      	nop
    }
    LCD_Clear(WHITE);
 8009444:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009448:	f7fe fd6c 	bl	8007f24 <LCD_Clear>
    game_reset();
 800944c:	f7f9 fa18 	bl	8002880 <game_reset>
}
 8009450:	bf00      	nop
 8009452:	3728      	adds	r7, #40	; 0x28
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	20000090 	.word	0x20000090
 800945c:	0800a85c 	.word	0x0800a85c
 8009460:	40010800 	.word	0x40010800
 8009464:	40011400 	.word	0x40011400
 8009468:	0800a86c 	.word	0x0800a86c
 800946c:	0800a878 	.word	0x0800a878
 8009470:	0800a88c 	.word	0x0800a88c
 8009474:	40011000 	.word	0x40011000

08009478 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8009478:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800947a:	e003      	b.n	8009484 <LoopCopyDataInit>

0800947c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800947c:	4b0b      	ldr	r3, [pc, #44]	; (80094ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800947e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8009480:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8009482:	3104      	adds	r1, #4

08009484 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8009484:	480a      	ldr	r0, [pc, #40]	; (80094b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8009486:	4b0b      	ldr	r3, [pc, #44]	; (80094b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8009488:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800948a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800948c:	d3f6      	bcc.n	800947c <CopyDataInit>
  ldr r2, =_sbss
 800948e:	4a0a      	ldr	r2, [pc, #40]	; (80094b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8009490:	e002      	b.n	8009498 <LoopFillZerobss>

08009492 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8009492:	2300      	movs	r3, #0
  str r3, [r2], #4
 8009494:	f842 3b04 	str.w	r3, [r2], #4

08009498 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8009498:	4b08      	ldr	r3, [pc, #32]	; (80094bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800949a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800949c:	d3f9      	bcc.n	8009492 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800949e:	f7ff fa01 	bl	80088a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80094a2:	f000 f815 	bl	80094d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80094a6:	f7ff f827 	bl	80084f8 <main>
  bx lr
 80094aa:	4770      	bx	lr
  ldr r3, =_sidata
 80094ac:	08031918 	.word	0x08031918
  ldr r0, =_sdata
 80094b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80094b4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80094b8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80094bc:	200007e0 	.word	0x200007e0

080094c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80094c0:	e7fe      	b.n	80094c0 <ADC1_2_IRQHandler>
	...

080094c4 <__errno>:
 80094c4:	4b01      	ldr	r3, [pc, #4]	; (80094cc <__errno+0x8>)
 80094c6:	6818      	ldr	r0, [r3, #0]
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	2000000c 	.word	0x2000000c

080094d0 <__libc_init_array>:
 80094d0:	b570      	push	{r4, r5, r6, lr}
 80094d2:	2500      	movs	r5, #0
 80094d4:	4e0c      	ldr	r6, [pc, #48]	; (8009508 <__libc_init_array+0x38>)
 80094d6:	4c0d      	ldr	r4, [pc, #52]	; (800950c <__libc_init_array+0x3c>)
 80094d8:	1ba4      	subs	r4, r4, r6
 80094da:	10a4      	asrs	r4, r4, #2
 80094dc:	42a5      	cmp	r5, r4
 80094de:	d109      	bne.n	80094f4 <__libc_init_array+0x24>
 80094e0:	f001 f934 	bl	800a74c <_init>
 80094e4:	2500      	movs	r5, #0
 80094e6:	4e0a      	ldr	r6, [pc, #40]	; (8009510 <__libc_init_array+0x40>)
 80094e8:	4c0a      	ldr	r4, [pc, #40]	; (8009514 <__libc_init_array+0x44>)
 80094ea:	1ba4      	subs	r4, r4, r6
 80094ec:	10a4      	asrs	r4, r4, #2
 80094ee:	42a5      	cmp	r5, r4
 80094f0:	d105      	bne.n	80094fe <__libc_init_array+0x2e>
 80094f2:	bd70      	pop	{r4, r5, r6, pc}
 80094f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094f8:	4798      	blx	r3
 80094fa:	3501      	adds	r5, #1
 80094fc:	e7ee      	b.n	80094dc <__libc_init_array+0xc>
 80094fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009502:	4798      	blx	r3
 8009504:	3501      	adds	r5, #1
 8009506:	e7f2      	b.n	80094ee <__libc_init_array+0x1e>
 8009508:	08031910 	.word	0x08031910
 800950c:	08031910 	.word	0x08031910
 8009510:	08031910 	.word	0x08031910
 8009514:	08031914 	.word	0x08031914

08009518 <memset>:
 8009518:	4603      	mov	r3, r0
 800951a:	4402      	add	r2, r0
 800951c:	4293      	cmp	r3, r2
 800951e:	d100      	bne.n	8009522 <memset+0xa>
 8009520:	4770      	bx	lr
 8009522:	f803 1b01 	strb.w	r1, [r3], #1
 8009526:	e7f9      	b.n	800951c <memset+0x4>

08009528 <iprintf>:
 8009528:	b40f      	push	{r0, r1, r2, r3}
 800952a:	4b0a      	ldr	r3, [pc, #40]	; (8009554 <iprintf+0x2c>)
 800952c:	b513      	push	{r0, r1, r4, lr}
 800952e:	681c      	ldr	r4, [r3, #0]
 8009530:	b124      	cbz	r4, 800953c <iprintf+0x14>
 8009532:	69a3      	ldr	r3, [r4, #24]
 8009534:	b913      	cbnz	r3, 800953c <iprintf+0x14>
 8009536:	4620      	mov	r0, r4
 8009538:	f000 f8c6 	bl	80096c8 <__sinit>
 800953c:	ab05      	add	r3, sp, #20
 800953e:	9a04      	ldr	r2, [sp, #16]
 8009540:	68a1      	ldr	r1, [r4, #8]
 8009542:	4620      	mov	r0, r4
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	f000 fb71 	bl	8009c2c <_vfiprintf_r>
 800954a:	b002      	add	sp, #8
 800954c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009550:	b004      	add	sp, #16
 8009552:	4770      	bx	lr
 8009554:	2000000c 	.word	0x2000000c

08009558 <srand>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4b0d      	ldr	r3, [pc, #52]	; (8009590 <srand+0x38>)
 800955c:	4605      	mov	r5, r0
 800955e:	681c      	ldr	r4, [r3, #0]
 8009560:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009562:	b97b      	cbnz	r3, 8009584 <srand+0x2c>
 8009564:	2018      	movs	r0, #24
 8009566:	f000 f939 	bl	80097dc <malloc>
 800956a:	4a0a      	ldr	r2, [pc, #40]	; (8009594 <srand+0x3c>)
 800956c:	4b0a      	ldr	r3, [pc, #40]	; (8009598 <srand+0x40>)
 800956e:	63a0      	str	r0, [r4, #56]	; 0x38
 8009570:	e9c0 2300 	strd	r2, r3, [r0]
 8009574:	4b09      	ldr	r3, [pc, #36]	; (800959c <srand+0x44>)
 8009576:	2201      	movs	r2, #1
 8009578:	6083      	str	r3, [r0, #8]
 800957a:	230b      	movs	r3, #11
 800957c:	8183      	strh	r3, [r0, #12]
 800957e:	2300      	movs	r3, #0
 8009580:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009584:	2200      	movs	r2, #0
 8009586:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009588:	611d      	str	r5, [r3, #16]
 800958a:	615a      	str	r2, [r3, #20]
 800958c:	bd38      	pop	{r3, r4, r5, pc}
 800958e:	bf00      	nop
 8009590:	2000000c 	.word	0x2000000c
 8009594:	abcd330e 	.word	0xabcd330e
 8009598:	e66d1234 	.word	0xe66d1234
 800959c:	0005deec 	.word	0x0005deec

080095a0 <rand>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4b13      	ldr	r3, [pc, #76]	; (80095f0 <rand+0x50>)
 80095a4:	681c      	ldr	r4, [r3, #0]
 80095a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80095a8:	b97b      	cbnz	r3, 80095ca <rand+0x2a>
 80095aa:	2018      	movs	r0, #24
 80095ac:	f000 f916 	bl	80097dc <malloc>
 80095b0:	4a10      	ldr	r2, [pc, #64]	; (80095f4 <rand+0x54>)
 80095b2:	4b11      	ldr	r3, [pc, #68]	; (80095f8 <rand+0x58>)
 80095b4:	63a0      	str	r0, [r4, #56]	; 0x38
 80095b6:	e9c0 2300 	strd	r2, r3, [r0]
 80095ba:	4b10      	ldr	r3, [pc, #64]	; (80095fc <rand+0x5c>)
 80095bc:	2201      	movs	r2, #1
 80095be:	6083      	str	r3, [r0, #8]
 80095c0:	230b      	movs	r3, #11
 80095c2:	8183      	strh	r3, [r0, #12]
 80095c4:	2300      	movs	r3, #0
 80095c6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80095ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80095cc:	480c      	ldr	r0, [pc, #48]	; (8009600 <rand+0x60>)
 80095ce:	690a      	ldr	r2, [r1, #16]
 80095d0:	694b      	ldr	r3, [r1, #20]
 80095d2:	4350      	muls	r0, r2
 80095d4:	4c0b      	ldr	r4, [pc, #44]	; (8009604 <rand+0x64>)
 80095d6:	fb04 0003 	mla	r0, r4, r3, r0
 80095da:	fba2 2304 	umull	r2, r3, r2, r4
 80095de:	4403      	add	r3, r0
 80095e0:	1c54      	adds	r4, r2, #1
 80095e2:	f143 0500 	adc.w	r5, r3, #0
 80095e6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80095ea:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80095ee:	bd38      	pop	{r3, r4, r5, pc}
 80095f0:	2000000c 	.word	0x2000000c
 80095f4:	abcd330e 	.word	0xabcd330e
 80095f8:	e66d1234 	.word	0xe66d1234
 80095fc:	0005deec 	.word	0x0005deec
 8009600:	5851f42d 	.word	0x5851f42d
 8009604:	4c957f2d 	.word	0x4c957f2d

08009608 <siprintf>:
 8009608:	b40e      	push	{r1, r2, r3}
 800960a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800960e:	b500      	push	{lr}
 8009610:	b09c      	sub	sp, #112	; 0x70
 8009612:	ab1d      	add	r3, sp, #116	; 0x74
 8009614:	9002      	str	r0, [sp, #8]
 8009616:	9006      	str	r0, [sp, #24]
 8009618:	9107      	str	r1, [sp, #28]
 800961a:	9104      	str	r1, [sp, #16]
 800961c:	4808      	ldr	r0, [pc, #32]	; (8009640 <siprintf+0x38>)
 800961e:	4909      	ldr	r1, [pc, #36]	; (8009644 <siprintf+0x3c>)
 8009620:	f853 2b04 	ldr.w	r2, [r3], #4
 8009624:	9105      	str	r1, [sp, #20]
 8009626:	6800      	ldr	r0, [r0, #0]
 8009628:	a902      	add	r1, sp, #8
 800962a:	9301      	str	r3, [sp, #4]
 800962c:	f000 f9de 	bl	80099ec <_svfiprintf_r>
 8009630:	2200      	movs	r2, #0
 8009632:	9b02      	ldr	r3, [sp, #8]
 8009634:	701a      	strb	r2, [r3, #0]
 8009636:	b01c      	add	sp, #112	; 0x70
 8009638:	f85d eb04 	ldr.w	lr, [sp], #4
 800963c:	b003      	add	sp, #12
 800963e:	4770      	bx	lr
 8009640:	2000000c 	.word	0x2000000c
 8009644:	ffff0208 	.word	0xffff0208

08009648 <std>:
 8009648:	2300      	movs	r3, #0
 800964a:	b510      	push	{r4, lr}
 800964c:	4604      	mov	r4, r0
 800964e:	e9c0 3300 	strd	r3, r3, [r0]
 8009652:	6083      	str	r3, [r0, #8]
 8009654:	8181      	strh	r1, [r0, #12]
 8009656:	6643      	str	r3, [r0, #100]	; 0x64
 8009658:	81c2      	strh	r2, [r0, #14]
 800965a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800965e:	6183      	str	r3, [r0, #24]
 8009660:	4619      	mov	r1, r3
 8009662:	2208      	movs	r2, #8
 8009664:	305c      	adds	r0, #92	; 0x5c
 8009666:	f7ff ff57 	bl	8009518 <memset>
 800966a:	4b05      	ldr	r3, [pc, #20]	; (8009680 <std+0x38>)
 800966c:	6224      	str	r4, [r4, #32]
 800966e:	6263      	str	r3, [r4, #36]	; 0x24
 8009670:	4b04      	ldr	r3, [pc, #16]	; (8009684 <std+0x3c>)
 8009672:	62a3      	str	r3, [r4, #40]	; 0x28
 8009674:	4b04      	ldr	r3, [pc, #16]	; (8009688 <std+0x40>)
 8009676:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009678:	4b04      	ldr	r3, [pc, #16]	; (800968c <std+0x44>)
 800967a:	6323      	str	r3, [r4, #48]	; 0x30
 800967c:	bd10      	pop	{r4, pc}
 800967e:	bf00      	nop
 8009680:	0800a189 	.word	0x0800a189
 8009684:	0800a1ab 	.word	0x0800a1ab
 8009688:	0800a1e3 	.word	0x0800a1e3
 800968c:	0800a207 	.word	0x0800a207

08009690 <_cleanup_r>:
 8009690:	4901      	ldr	r1, [pc, #4]	; (8009698 <_cleanup_r+0x8>)
 8009692:	f000 b885 	b.w	80097a0 <_fwalk_reent>
 8009696:	bf00      	nop
 8009698:	0800a4e1 	.word	0x0800a4e1

0800969c <__sfmoreglue>:
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	2568      	movs	r5, #104	; 0x68
 80096a0:	1e4a      	subs	r2, r1, #1
 80096a2:	4355      	muls	r5, r2
 80096a4:	460e      	mov	r6, r1
 80096a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80096aa:	f000 f8eb 	bl	8009884 <_malloc_r>
 80096ae:	4604      	mov	r4, r0
 80096b0:	b140      	cbz	r0, 80096c4 <__sfmoreglue+0x28>
 80096b2:	2100      	movs	r1, #0
 80096b4:	e9c0 1600 	strd	r1, r6, [r0]
 80096b8:	300c      	adds	r0, #12
 80096ba:	60a0      	str	r0, [r4, #8]
 80096bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80096c0:	f7ff ff2a 	bl	8009518 <memset>
 80096c4:	4620      	mov	r0, r4
 80096c6:	bd70      	pop	{r4, r5, r6, pc}

080096c8 <__sinit>:
 80096c8:	6983      	ldr	r3, [r0, #24]
 80096ca:	b510      	push	{r4, lr}
 80096cc:	4604      	mov	r4, r0
 80096ce:	bb33      	cbnz	r3, 800971e <__sinit+0x56>
 80096d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80096d4:	6503      	str	r3, [r0, #80]	; 0x50
 80096d6:	4b12      	ldr	r3, [pc, #72]	; (8009720 <__sinit+0x58>)
 80096d8:	4a12      	ldr	r2, [pc, #72]	; (8009724 <__sinit+0x5c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	6282      	str	r2, [r0, #40]	; 0x28
 80096de:	4298      	cmp	r0, r3
 80096e0:	bf04      	itt	eq
 80096e2:	2301      	moveq	r3, #1
 80096e4:	6183      	streq	r3, [r0, #24]
 80096e6:	f000 f81f 	bl	8009728 <__sfp>
 80096ea:	6060      	str	r0, [r4, #4]
 80096ec:	4620      	mov	r0, r4
 80096ee:	f000 f81b 	bl	8009728 <__sfp>
 80096f2:	60a0      	str	r0, [r4, #8]
 80096f4:	4620      	mov	r0, r4
 80096f6:	f000 f817 	bl	8009728 <__sfp>
 80096fa:	2200      	movs	r2, #0
 80096fc:	60e0      	str	r0, [r4, #12]
 80096fe:	2104      	movs	r1, #4
 8009700:	6860      	ldr	r0, [r4, #4]
 8009702:	f7ff ffa1 	bl	8009648 <std>
 8009706:	2201      	movs	r2, #1
 8009708:	2109      	movs	r1, #9
 800970a:	68a0      	ldr	r0, [r4, #8]
 800970c:	f7ff ff9c 	bl	8009648 <std>
 8009710:	2202      	movs	r2, #2
 8009712:	2112      	movs	r1, #18
 8009714:	68e0      	ldr	r0, [r4, #12]
 8009716:	f7ff ff97 	bl	8009648 <std>
 800971a:	2301      	movs	r3, #1
 800971c:	61a3      	str	r3, [r4, #24]
 800971e:	bd10      	pop	{r4, pc}
 8009720:	08031878 	.word	0x08031878
 8009724:	08009691 	.word	0x08009691

08009728 <__sfp>:
 8009728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972a:	4b1b      	ldr	r3, [pc, #108]	; (8009798 <__sfp+0x70>)
 800972c:	4607      	mov	r7, r0
 800972e:	681e      	ldr	r6, [r3, #0]
 8009730:	69b3      	ldr	r3, [r6, #24]
 8009732:	b913      	cbnz	r3, 800973a <__sfp+0x12>
 8009734:	4630      	mov	r0, r6
 8009736:	f7ff ffc7 	bl	80096c8 <__sinit>
 800973a:	3648      	adds	r6, #72	; 0x48
 800973c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009740:	3b01      	subs	r3, #1
 8009742:	d503      	bpl.n	800974c <__sfp+0x24>
 8009744:	6833      	ldr	r3, [r6, #0]
 8009746:	b133      	cbz	r3, 8009756 <__sfp+0x2e>
 8009748:	6836      	ldr	r6, [r6, #0]
 800974a:	e7f7      	b.n	800973c <__sfp+0x14>
 800974c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009750:	b16d      	cbz	r5, 800976e <__sfp+0x46>
 8009752:	3468      	adds	r4, #104	; 0x68
 8009754:	e7f4      	b.n	8009740 <__sfp+0x18>
 8009756:	2104      	movs	r1, #4
 8009758:	4638      	mov	r0, r7
 800975a:	f7ff ff9f 	bl	800969c <__sfmoreglue>
 800975e:	6030      	str	r0, [r6, #0]
 8009760:	2800      	cmp	r0, #0
 8009762:	d1f1      	bne.n	8009748 <__sfp+0x20>
 8009764:	230c      	movs	r3, #12
 8009766:	4604      	mov	r4, r0
 8009768:	603b      	str	r3, [r7, #0]
 800976a:	4620      	mov	r0, r4
 800976c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800976e:	4b0b      	ldr	r3, [pc, #44]	; (800979c <__sfp+0x74>)
 8009770:	6665      	str	r5, [r4, #100]	; 0x64
 8009772:	e9c4 5500 	strd	r5, r5, [r4]
 8009776:	60a5      	str	r5, [r4, #8]
 8009778:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800977c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009780:	2208      	movs	r2, #8
 8009782:	4629      	mov	r1, r5
 8009784:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009788:	f7ff fec6 	bl	8009518 <memset>
 800978c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009790:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009794:	e7e9      	b.n	800976a <__sfp+0x42>
 8009796:	bf00      	nop
 8009798:	08031878 	.word	0x08031878
 800979c:	ffff0001 	.word	0xffff0001

080097a0 <_fwalk_reent>:
 80097a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097a4:	4680      	mov	r8, r0
 80097a6:	4689      	mov	r9, r1
 80097a8:	2600      	movs	r6, #0
 80097aa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097ae:	b914      	cbnz	r4, 80097b6 <_fwalk_reent+0x16>
 80097b0:	4630      	mov	r0, r6
 80097b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80097ba:	3f01      	subs	r7, #1
 80097bc:	d501      	bpl.n	80097c2 <_fwalk_reent+0x22>
 80097be:	6824      	ldr	r4, [r4, #0]
 80097c0:	e7f5      	b.n	80097ae <_fwalk_reent+0xe>
 80097c2:	89ab      	ldrh	r3, [r5, #12]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d907      	bls.n	80097d8 <_fwalk_reent+0x38>
 80097c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097cc:	3301      	adds	r3, #1
 80097ce:	d003      	beq.n	80097d8 <_fwalk_reent+0x38>
 80097d0:	4629      	mov	r1, r5
 80097d2:	4640      	mov	r0, r8
 80097d4:	47c8      	blx	r9
 80097d6:	4306      	orrs	r6, r0
 80097d8:	3568      	adds	r5, #104	; 0x68
 80097da:	e7ee      	b.n	80097ba <_fwalk_reent+0x1a>

080097dc <malloc>:
 80097dc:	4b02      	ldr	r3, [pc, #8]	; (80097e8 <malloc+0xc>)
 80097de:	4601      	mov	r1, r0
 80097e0:	6818      	ldr	r0, [r3, #0]
 80097e2:	f000 b84f 	b.w	8009884 <_malloc_r>
 80097e6:	bf00      	nop
 80097e8:	2000000c 	.word	0x2000000c

080097ec <_free_r>:
 80097ec:	b538      	push	{r3, r4, r5, lr}
 80097ee:	4605      	mov	r5, r0
 80097f0:	2900      	cmp	r1, #0
 80097f2:	d043      	beq.n	800987c <_free_r+0x90>
 80097f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097f8:	1f0c      	subs	r4, r1, #4
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	bfb8      	it	lt
 80097fe:	18e4      	addlt	r4, r4, r3
 8009800:	f000 ff40 	bl	800a684 <__malloc_lock>
 8009804:	4a1e      	ldr	r2, [pc, #120]	; (8009880 <_free_r+0x94>)
 8009806:	6813      	ldr	r3, [r2, #0]
 8009808:	4610      	mov	r0, r2
 800980a:	b933      	cbnz	r3, 800981a <_free_r+0x2e>
 800980c:	6063      	str	r3, [r4, #4]
 800980e:	6014      	str	r4, [r2, #0]
 8009810:	4628      	mov	r0, r5
 8009812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009816:	f000 bf36 	b.w	800a686 <__malloc_unlock>
 800981a:	42a3      	cmp	r3, r4
 800981c:	d90b      	bls.n	8009836 <_free_r+0x4a>
 800981e:	6821      	ldr	r1, [r4, #0]
 8009820:	1862      	adds	r2, r4, r1
 8009822:	4293      	cmp	r3, r2
 8009824:	bf01      	itttt	eq
 8009826:	681a      	ldreq	r2, [r3, #0]
 8009828:	685b      	ldreq	r3, [r3, #4]
 800982a:	1852      	addeq	r2, r2, r1
 800982c:	6022      	streq	r2, [r4, #0]
 800982e:	6063      	str	r3, [r4, #4]
 8009830:	6004      	str	r4, [r0, #0]
 8009832:	e7ed      	b.n	8009810 <_free_r+0x24>
 8009834:	4613      	mov	r3, r2
 8009836:	685a      	ldr	r2, [r3, #4]
 8009838:	b10a      	cbz	r2, 800983e <_free_r+0x52>
 800983a:	42a2      	cmp	r2, r4
 800983c:	d9fa      	bls.n	8009834 <_free_r+0x48>
 800983e:	6819      	ldr	r1, [r3, #0]
 8009840:	1858      	adds	r0, r3, r1
 8009842:	42a0      	cmp	r0, r4
 8009844:	d10b      	bne.n	800985e <_free_r+0x72>
 8009846:	6820      	ldr	r0, [r4, #0]
 8009848:	4401      	add	r1, r0
 800984a:	1858      	adds	r0, r3, r1
 800984c:	4282      	cmp	r2, r0
 800984e:	6019      	str	r1, [r3, #0]
 8009850:	d1de      	bne.n	8009810 <_free_r+0x24>
 8009852:	6810      	ldr	r0, [r2, #0]
 8009854:	6852      	ldr	r2, [r2, #4]
 8009856:	4401      	add	r1, r0
 8009858:	6019      	str	r1, [r3, #0]
 800985a:	605a      	str	r2, [r3, #4]
 800985c:	e7d8      	b.n	8009810 <_free_r+0x24>
 800985e:	d902      	bls.n	8009866 <_free_r+0x7a>
 8009860:	230c      	movs	r3, #12
 8009862:	602b      	str	r3, [r5, #0]
 8009864:	e7d4      	b.n	8009810 <_free_r+0x24>
 8009866:	6820      	ldr	r0, [r4, #0]
 8009868:	1821      	adds	r1, r4, r0
 800986a:	428a      	cmp	r2, r1
 800986c:	bf01      	itttt	eq
 800986e:	6811      	ldreq	r1, [r2, #0]
 8009870:	6852      	ldreq	r2, [r2, #4]
 8009872:	1809      	addeq	r1, r1, r0
 8009874:	6021      	streq	r1, [r4, #0]
 8009876:	6062      	str	r2, [r4, #4]
 8009878:	605c      	str	r4, [r3, #4]
 800987a:	e7c9      	b.n	8009810 <_free_r+0x24>
 800987c:	bd38      	pop	{r3, r4, r5, pc}
 800987e:	bf00      	nop
 8009880:	2000009c 	.word	0x2000009c

08009884 <_malloc_r>:
 8009884:	b570      	push	{r4, r5, r6, lr}
 8009886:	1ccd      	adds	r5, r1, #3
 8009888:	f025 0503 	bic.w	r5, r5, #3
 800988c:	3508      	adds	r5, #8
 800988e:	2d0c      	cmp	r5, #12
 8009890:	bf38      	it	cc
 8009892:	250c      	movcc	r5, #12
 8009894:	2d00      	cmp	r5, #0
 8009896:	4606      	mov	r6, r0
 8009898:	db01      	blt.n	800989e <_malloc_r+0x1a>
 800989a:	42a9      	cmp	r1, r5
 800989c:	d903      	bls.n	80098a6 <_malloc_r+0x22>
 800989e:	230c      	movs	r3, #12
 80098a0:	6033      	str	r3, [r6, #0]
 80098a2:	2000      	movs	r0, #0
 80098a4:	bd70      	pop	{r4, r5, r6, pc}
 80098a6:	f000 feed 	bl	800a684 <__malloc_lock>
 80098aa:	4a21      	ldr	r2, [pc, #132]	; (8009930 <_malloc_r+0xac>)
 80098ac:	6814      	ldr	r4, [r2, #0]
 80098ae:	4621      	mov	r1, r4
 80098b0:	b991      	cbnz	r1, 80098d8 <_malloc_r+0x54>
 80098b2:	4c20      	ldr	r4, [pc, #128]	; (8009934 <_malloc_r+0xb0>)
 80098b4:	6823      	ldr	r3, [r4, #0]
 80098b6:	b91b      	cbnz	r3, 80098c0 <_malloc_r+0x3c>
 80098b8:	4630      	mov	r0, r6
 80098ba:	f000 fc55 	bl	800a168 <_sbrk_r>
 80098be:	6020      	str	r0, [r4, #0]
 80098c0:	4629      	mov	r1, r5
 80098c2:	4630      	mov	r0, r6
 80098c4:	f000 fc50 	bl	800a168 <_sbrk_r>
 80098c8:	1c43      	adds	r3, r0, #1
 80098ca:	d124      	bne.n	8009916 <_malloc_r+0x92>
 80098cc:	230c      	movs	r3, #12
 80098ce:	4630      	mov	r0, r6
 80098d0:	6033      	str	r3, [r6, #0]
 80098d2:	f000 fed8 	bl	800a686 <__malloc_unlock>
 80098d6:	e7e4      	b.n	80098a2 <_malloc_r+0x1e>
 80098d8:	680b      	ldr	r3, [r1, #0]
 80098da:	1b5b      	subs	r3, r3, r5
 80098dc:	d418      	bmi.n	8009910 <_malloc_r+0x8c>
 80098de:	2b0b      	cmp	r3, #11
 80098e0:	d90f      	bls.n	8009902 <_malloc_r+0x7e>
 80098e2:	600b      	str	r3, [r1, #0]
 80098e4:	18cc      	adds	r4, r1, r3
 80098e6:	50cd      	str	r5, [r1, r3]
 80098e8:	4630      	mov	r0, r6
 80098ea:	f000 fecc 	bl	800a686 <__malloc_unlock>
 80098ee:	f104 000b 	add.w	r0, r4, #11
 80098f2:	1d23      	adds	r3, r4, #4
 80098f4:	f020 0007 	bic.w	r0, r0, #7
 80098f8:	1ac3      	subs	r3, r0, r3
 80098fa:	d0d3      	beq.n	80098a4 <_malloc_r+0x20>
 80098fc:	425a      	negs	r2, r3
 80098fe:	50e2      	str	r2, [r4, r3]
 8009900:	e7d0      	b.n	80098a4 <_malloc_r+0x20>
 8009902:	684b      	ldr	r3, [r1, #4]
 8009904:	428c      	cmp	r4, r1
 8009906:	bf16      	itet	ne
 8009908:	6063      	strne	r3, [r4, #4]
 800990a:	6013      	streq	r3, [r2, #0]
 800990c:	460c      	movne	r4, r1
 800990e:	e7eb      	b.n	80098e8 <_malloc_r+0x64>
 8009910:	460c      	mov	r4, r1
 8009912:	6849      	ldr	r1, [r1, #4]
 8009914:	e7cc      	b.n	80098b0 <_malloc_r+0x2c>
 8009916:	1cc4      	adds	r4, r0, #3
 8009918:	f024 0403 	bic.w	r4, r4, #3
 800991c:	42a0      	cmp	r0, r4
 800991e:	d005      	beq.n	800992c <_malloc_r+0xa8>
 8009920:	1a21      	subs	r1, r4, r0
 8009922:	4630      	mov	r0, r6
 8009924:	f000 fc20 	bl	800a168 <_sbrk_r>
 8009928:	3001      	adds	r0, #1
 800992a:	d0cf      	beq.n	80098cc <_malloc_r+0x48>
 800992c:	6025      	str	r5, [r4, #0]
 800992e:	e7db      	b.n	80098e8 <_malloc_r+0x64>
 8009930:	2000009c 	.word	0x2000009c
 8009934:	200000a0 	.word	0x200000a0

08009938 <__ssputs_r>:
 8009938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800993c:	688e      	ldr	r6, [r1, #8]
 800993e:	4682      	mov	sl, r0
 8009940:	429e      	cmp	r6, r3
 8009942:	460c      	mov	r4, r1
 8009944:	4690      	mov	r8, r2
 8009946:	4699      	mov	r9, r3
 8009948:	d837      	bhi.n	80099ba <__ssputs_r+0x82>
 800994a:	898a      	ldrh	r2, [r1, #12]
 800994c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009950:	d031      	beq.n	80099b6 <__ssputs_r+0x7e>
 8009952:	2302      	movs	r3, #2
 8009954:	6825      	ldr	r5, [r4, #0]
 8009956:	6909      	ldr	r1, [r1, #16]
 8009958:	1a6f      	subs	r7, r5, r1
 800995a:	6965      	ldr	r5, [r4, #20]
 800995c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009960:	fb95 f5f3 	sdiv	r5, r5, r3
 8009964:	f109 0301 	add.w	r3, r9, #1
 8009968:	443b      	add	r3, r7
 800996a:	429d      	cmp	r5, r3
 800996c:	bf38      	it	cc
 800996e:	461d      	movcc	r5, r3
 8009970:	0553      	lsls	r3, r2, #21
 8009972:	d530      	bpl.n	80099d6 <__ssputs_r+0x9e>
 8009974:	4629      	mov	r1, r5
 8009976:	f7ff ff85 	bl	8009884 <_malloc_r>
 800997a:	4606      	mov	r6, r0
 800997c:	b950      	cbnz	r0, 8009994 <__ssputs_r+0x5c>
 800997e:	230c      	movs	r3, #12
 8009980:	f04f 30ff 	mov.w	r0, #4294967295
 8009984:	f8ca 3000 	str.w	r3, [sl]
 8009988:	89a3      	ldrh	r3, [r4, #12]
 800998a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800998e:	81a3      	strh	r3, [r4, #12]
 8009990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009994:	463a      	mov	r2, r7
 8009996:	6921      	ldr	r1, [r4, #16]
 8009998:	f000 fe50 	bl	800a63c <memcpy>
 800999c:	89a3      	ldrh	r3, [r4, #12]
 800999e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a6:	81a3      	strh	r3, [r4, #12]
 80099a8:	6126      	str	r6, [r4, #16]
 80099aa:	443e      	add	r6, r7
 80099ac:	6026      	str	r6, [r4, #0]
 80099ae:	464e      	mov	r6, r9
 80099b0:	6165      	str	r5, [r4, #20]
 80099b2:	1bed      	subs	r5, r5, r7
 80099b4:	60a5      	str	r5, [r4, #8]
 80099b6:	454e      	cmp	r6, r9
 80099b8:	d900      	bls.n	80099bc <__ssputs_r+0x84>
 80099ba:	464e      	mov	r6, r9
 80099bc:	4632      	mov	r2, r6
 80099be:	4641      	mov	r1, r8
 80099c0:	6820      	ldr	r0, [r4, #0]
 80099c2:	f000 fe46 	bl	800a652 <memmove>
 80099c6:	68a3      	ldr	r3, [r4, #8]
 80099c8:	2000      	movs	r0, #0
 80099ca:	1b9b      	subs	r3, r3, r6
 80099cc:	60a3      	str	r3, [r4, #8]
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	441e      	add	r6, r3
 80099d2:	6026      	str	r6, [r4, #0]
 80099d4:	e7dc      	b.n	8009990 <__ssputs_r+0x58>
 80099d6:	462a      	mov	r2, r5
 80099d8:	f000 fe56 	bl	800a688 <_realloc_r>
 80099dc:	4606      	mov	r6, r0
 80099de:	2800      	cmp	r0, #0
 80099e0:	d1e2      	bne.n	80099a8 <__ssputs_r+0x70>
 80099e2:	6921      	ldr	r1, [r4, #16]
 80099e4:	4650      	mov	r0, sl
 80099e6:	f7ff ff01 	bl	80097ec <_free_r>
 80099ea:	e7c8      	b.n	800997e <__ssputs_r+0x46>

080099ec <_svfiprintf_r>:
 80099ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f0:	461d      	mov	r5, r3
 80099f2:	898b      	ldrh	r3, [r1, #12]
 80099f4:	b09d      	sub	sp, #116	; 0x74
 80099f6:	061f      	lsls	r7, r3, #24
 80099f8:	4680      	mov	r8, r0
 80099fa:	460c      	mov	r4, r1
 80099fc:	4616      	mov	r6, r2
 80099fe:	d50f      	bpl.n	8009a20 <_svfiprintf_r+0x34>
 8009a00:	690b      	ldr	r3, [r1, #16]
 8009a02:	b96b      	cbnz	r3, 8009a20 <_svfiprintf_r+0x34>
 8009a04:	2140      	movs	r1, #64	; 0x40
 8009a06:	f7ff ff3d 	bl	8009884 <_malloc_r>
 8009a0a:	6020      	str	r0, [r4, #0]
 8009a0c:	6120      	str	r0, [r4, #16]
 8009a0e:	b928      	cbnz	r0, 8009a1c <_svfiprintf_r+0x30>
 8009a10:	230c      	movs	r3, #12
 8009a12:	f8c8 3000 	str.w	r3, [r8]
 8009a16:	f04f 30ff 	mov.w	r0, #4294967295
 8009a1a:	e0c8      	b.n	8009bae <_svfiprintf_r+0x1c2>
 8009a1c:	2340      	movs	r3, #64	; 0x40
 8009a1e:	6163      	str	r3, [r4, #20]
 8009a20:	2300      	movs	r3, #0
 8009a22:	9309      	str	r3, [sp, #36]	; 0x24
 8009a24:	2320      	movs	r3, #32
 8009a26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a2a:	2330      	movs	r3, #48	; 0x30
 8009a2c:	f04f 0b01 	mov.w	fp, #1
 8009a30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a34:	9503      	str	r5, [sp, #12]
 8009a36:	4637      	mov	r7, r6
 8009a38:	463d      	mov	r5, r7
 8009a3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009a3e:	b10b      	cbz	r3, 8009a44 <_svfiprintf_r+0x58>
 8009a40:	2b25      	cmp	r3, #37	; 0x25
 8009a42:	d13e      	bne.n	8009ac2 <_svfiprintf_r+0xd6>
 8009a44:	ebb7 0a06 	subs.w	sl, r7, r6
 8009a48:	d00b      	beq.n	8009a62 <_svfiprintf_r+0x76>
 8009a4a:	4653      	mov	r3, sl
 8009a4c:	4632      	mov	r2, r6
 8009a4e:	4621      	mov	r1, r4
 8009a50:	4640      	mov	r0, r8
 8009a52:	f7ff ff71 	bl	8009938 <__ssputs_r>
 8009a56:	3001      	adds	r0, #1
 8009a58:	f000 80a4 	beq.w	8009ba4 <_svfiprintf_r+0x1b8>
 8009a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a5e:	4453      	add	r3, sl
 8009a60:	9309      	str	r3, [sp, #36]	; 0x24
 8009a62:	783b      	ldrb	r3, [r7, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 809d 	beq.w	8009ba4 <_svfiprintf_r+0x1b8>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a74:	9304      	str	r3, [sp, #16]
 8009a76:	9307      	str	r3, [sp, #28]
 8009a78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a7c:	931a      	str	r3, [sp, #104]	; 0x68
 8009a7e:	462f      	mov	r7, r5
 8009a80:	2205      	movs	r2, #5
 8009a82:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009a86:	4850      	ldr	r0, [pc, #320]	; (8009bc8 <_svfiprintf_r+0x1dc>)
 8009a88:	f000 fdca 	bl	800a620 <memchr>
 8009a8c:	9b04      	ldr	r3, [sp, #16]
 8009a8e:	b9d0      	cbnz	r0, 8009ac6 <_svfiprintf_r+0xda>
 8009a90:	06d9      	lsls	r1, r3, #27
 8009a92:	bf44      	itt	mi
 8009a94:	2220      	movmi	r2, #32
 8009a96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009a9a:	071a      	lsls	r2, r3, #28
 8009a9c:	bf44      	itt	mi
 8009a9e:	222b      	movmi	r2, #43	; 0x2b
 8009aa0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009aa4:	782a      	ldrb	r2, [r5, #0]
 8009aa6:	2a2a      	cmp	r2, #42	; 0x2a
 8009aa8:	d015      	beq.n	8009ad6 <_svfiprintf_r+0xea>
 8009aaa:	462f      	mov	r7, r5
 8009aac:	2000      	movs	r0, #0
 8009aae:	250a      	movs	r5, #10
 8009ab0:	9a07      	ldr	r2, [sp, #28]
 8009ab2:	4639      	mov	r1, r7
 8009ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ab8:	3b30      	subs	r3, #48	; 0x30
 8009aba:	2b09      	cmp	r3, #9
 8009abc:	d94d      	bls.n	8009b5a <_svfiprintf_r+0x16e>
 8009abe:	b1b8      	cbz	r0, 8009af0 <_svfiprintf_r+0x104>
 8009ac0:	e00f      	b.n	8009ae2 <_svfiprintf_r+0xf6>
 8009ac2:	462f      	mov	r7, r5
 8009ac4:	e7b8      	b.n	8009a38 <_svfiprintf_r+0x4c>
 8009ac6:	4a40      	ldr	r2, [pc, #256]	; (8009bc8 <_svfiprintf_r+0x1dc>)
 8009ac8:	463d      	mov	r5, r7
 8009aca:	1a80      	subs	r0, r0, r2
 8009acc:	fa0b f000 	lsl.w	r0, fp, r0
 8009ad0:	4318      	orrs	r0, r3
 8009ad2:	9004      	str	r0, [sp, #16]
 8009ad4:	e7d3      	b.n	8009a7e <_svfiprintf_r+0x92>
 8009ad6:	9a03      	ldr	r2, [sp, #12]
 8009ad8:	1d11      	adds	r1, r2, #4
 8009ada:	6812      	ldr	r2, [r2, #0]
 8009adc:	9103      	str	r1, [sp, #12]
 8009ade:	2a00      	cmp	r2, #0
 8009ae0:	db01      	blt.n	8009ae6 <_svfiprintf_r+0xfa>
 8009ae2:	9207      	str	r2, [sp, #28]
 8009ae4:	e004      	b.n	8009af0 <_svfiprintf_r+0x104>
 8009ae6:	4252      	negs	r2, r2
 8009ae8:	f043 0302 	orr.w	r3, r3, #2
 8009aec:	9207      	str	r2, [sp, #28]
 8009aee:	9304      	str	r3, [sp, #16]
 8009af0:	783b      	ldrb	r3, [r7, #0]
 8009af2:	2b2e      	cmp	r3, #46	; 0x2e
 8009af4:	d10c      	bne.n	8009b10 <_svfiprintf_r+0x124>
 8009af6:	787b      	ldrb	r3, [r7, #1]
 8009af8:	2b2a      	cmp	r3, #42	; 0x2a
 8009afa:	d133      	bne.n	8009b64 <_svfiprintf_r+0x178>
 8009afc:	9b03      	ldr	r3, [sp, #12]
 8009afe:	3702      	adds	r7, #2
 8009b00:	1d1a      	adds	r2, r3, #4
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	9203      	str	r2, [sp, #12]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	bfb8      	it	lt
 8009b0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b0e:	9305      	str	r3, [sp, #20]
 8009b10:	4d2e      	ldr	r5, [pc, #184]	; (8009bcc <_svfiprintf_r+0x1e0>)
 8009b12:	2203      	movs	r2, #3
 8009b14:	7839      	ldrb	r1, [r7, #0]
 8009b16:	4628      	mov	r0, r5
 8009b18:	f000 fd82 	bl	800a620 <memchr>
 8009b1c:	b138      	cbz	r0, 8009b2e <_svfiprintf_r+0x142>
 8009b1e:	2340      	movs	r3, #64	; 0x40
 8009b20:	1b40      	subs	r0, r0, r5
 8009b22:	fa03 f000 	lsl.w	r0, r3, r0
 8009b26:	9b04      	ldr	r3, [sp, #16]
 8009b28:	3701      	adds	r7, #1
 8009b2a:	4303      	orrs	r3, r0
 8009b2c:	9304      	str	r3, [sp, #16]
 8009b2e:	7839      	ldrb	r1, [r7, #0]
 8009b30:	2206      	movs	r2, #6
 8009b32:	4827      	ldr	r0, [pc, #156]	; (8009bd0 <_svfiprintf_r+0x1e4>)
 8009b34:	1c7e      	adds	r6, r7, #1
 8009b36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b3a:	f000 fd71 	bl	800a620 <memchr>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d038      	beq.n	8009bb4 <_svfiprintf_r+0x1c8>
 8009b42:	4b24      	ldr	r3, [pc, #144]	; (8009bd4 <_svfiprintf_r+0x1e8>)
 8009b44:	bb13      	cbnz	r3, 8009b8c <_svfiprintf_r+0x1a0>
 8009b46:	9b03      	ldr	r3, [sp, #12]
 8009b48:	3307      	adds	r3, #7
 8009b4a:	f023 0307 	bic.w	r3, r3, #7
 8009b4e:	3308      	adds	r3, #8
 8009b50:	9303      	str	r3, [sp, #12]
 8009b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b54:	444b      	add	r3, r9
 8009b56:	9309      	str	r3, [sp, #36]	; 0x24
 8009b58:	e76d      	b.n	8009a36 <_svfiprintf_r+0x4a>
 8009b5a:	fb05 3202 	mla	r2, r5, r2, r3
 8009b5e:	2001      	movs	r0, #1
 8009b60:	460f      	mov	r7, r1
 8009b62:	e7a6      	b.n	8009ab2 <_svfiprintf_r+0xc6>
 8009b64:	2300      	movs	r3, #0
 8009b66:	250a      	movs	r5, #10
 8009b68:	4619      	mov	r1, r3
 8009b6a:	3701      	adds	r7, #1
 8009b6c:	9305      	str	r3, [sp, #20]
 8009b6e:	4638      	mov	r0, r7
 8009b70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b74:	3a30      	subs	r2, #48	; 0x30
 8009b76:	2a09      	cmp	r2, #9
 8009b78:	d903      	bls.n	8009b82 <_svfiprintf_r+0x196>
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d0c8      	beq.n	8009b10 <_svfiprintf_r+0x124>
 8009b7e:	9105      	str	r1, [sp, #20]
 8009b80:	e7c6      	b.n	8009b10 <_svfiprintf_r+0x124>
 8009b82:	fb05 2101 	mla	r1, r5, r1, r2
 8009b86:	2301      	movs	r3, #1
 8009b88:	4607      	mov	r7, r0
 8009b8a:	e7f0      	b.n	8009b6e <_svfiprintf_r+0x182>
 8009b8c:	ab03      	add	r3, sp, #12
 8009b8e:	9300      	str	r3, [sp, #0]
 8009b90:	4622      	mov	r2, r4
 8009b92:	4b11      	ldr	r3, [pc, #68]	; (8009bd8 <_svfiprintf_r+0x1ec>)
 8009b94:	a904      	add	r1, sp, #16
 8009b96:	4640      	mov	r0, r8
 8009b98:	f3af 8000 	nop.w
 8009b9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009ba0:	4681      	mov	r9, r0
 8009ba2:	d1d6      	bne.n	8009b52 <_svfiprintf_r+0x166>
 8009ba4:	89a3      	ldrh	r3, [r4, #12]
 8009ba6:	065b      	lsls	r3, r3, #25
 8009ba8:	f53f af35 	bmi.w	8009a16 <_svfiprintf_r+0x2a>
 8009bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bae:	b01d      	add	sp, #116	; 0x74
 8009bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb4:	ab03      	add	r3, sp, #12
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	4622      	mov	r2, r4
 8009bba:	4b07      	ldr	r3, [pc, #28]	; (8009bd8 <_svfiprintf_r+0x1ec>)
 8009bbc:	a904      	add	r1, sp, #16
 8009bbe:	4640      	mov	r0, r8
 8009bc0:	f000 f9c0 	bl	8009f44 <_printf_i>
 8009bc4:	e7ea      	b.n	8009b9c <_svfiprintf_r+0x1b0>
 8009bc6:	bf00      	nop
 8009bc8:	080318dc 	.word	0x080318dc
 8009bcc:	080318e2 	.word	0x080318e2
 8009bd0:	080318e6 	.word	0x080318e6
 8009bd4:	00000000 	.word	0x00000000
 8009bd8:	08009939 	.word	0x08009939

08009bdc <__sfputc_r>:
 8009bdc:	6893      	ldr	r3, [r2, #8]
 8009bde:	b410      	push	{r4}
 8009be0:	3b01      	subs	r3, #1
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	6093      	str	r3, [r2, #8]
 8009be6:	da07      	bge.n	8009bf8 <__sfputc_r+0x1c>
 8009be8:	6994      	ldr	r4, [r2, #24]
 8009bea:	42a3      	cmp	r3, r4
 8009bec:	db01      	blt.n	8009bf2 <__sfputc_r+0x16>
 8009bee:	290a      	cmp	r1, #10
 8009bf0:	d102      	bne.n	8009bf8 <__sfputc_r+0x1c>
 8009bf2:	bc10      	pop	{r4}
 8009bf4:	f000 bb0c 	b.w	800a210 <__swbuf_r>
 8009bf8:	6813      	ldr	r3, [r2, #0]
 8009bfa:	1c58      	adds	r0, r3, #1
 8009bfc:	6010      	str	r0, [r2, #0]
 8009bfe:	7019      	strb	r1, [r3, #0]
 8009c00:	4608      	mov	r0, r1
 8009c02:	bc10      	pop	{r4}
 8009c04:	4770      	bx	lr

08009c06 <__sfputs_r>:
 8009c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c08:	4606      	mov	r6, r0
 8009c0a:	460f      	mov	r7, r1
 8009c0c:	4614      	mov	r4, r2
 8009c0e:	18d5      	adds	r5, r2, r3
 8009c10:	42ac      	cmp	r4, r5
 8009c12:	d101      	bne.n	8009c18 <__sfputs_r+0x12>
 8009c14:	2000      	movs	r0, #0
 8009c16:	e007      	b.n	8009c28 <__sfputs_r+0x22>
 8009c18:	463a      	mov	r2, r7
 8009c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f7ff ffdc 	bl	8009bdc <__sfputc_r>
 8009c24:	1c43      	adds	r3, r0, #1
 8009c26:	d1f3      	bne.n	8009c10 <__sfputs_r+0xa>
 8009c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c2c <_vfiprintf_r>:
 8009c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c30:	460c      	mov	r4, r1
 8009c32:	b09d      	sub	sp, #116	; 0x74
 8009c34:	4617      	mov	r7, r2
 8009c36:	461d      	mov	r5, r3
 8009c38:	4606      	mov	r6, r0
 8009c3a:	b118      	cbz	r0, 8009c44 <_vfiprintf_r+0x18>
 8009c3c:	6983      	ldr	r3, [r0, #24]
 8009c3e:	b90b      	cbnz	r3, 8009c44 <_vfiprintf_r+0x18>
 8009c40:	f7ff fd42 	bl	80096c8 <__sinit>
 8009c44:	4b7c      	ldr	r3, [pc, #496]	; (8009e38 <_vfiprintf_r+0x20c>)
 8009c46:	429c      	cmp	r4, r3
 8009c48:	d158      	bne.n	8009cfc <_vfiprintf_r+0xd0>
 8009c4a:	6874      	ldr	r4, [r6, #4]
 8009c4c:	89a3      	ldrh	r3, [r4, #12]
 8009c4e:	0718      	lsls	r0, r3, #28
 8009c50:	d55e      	bpl.n	8009d10 <_vfiprintf_r+0xe4>
 8009c52:	6923      	ldr	r3, [r4, #16]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d05b      	beq.n	8009d10 <_vfiprintf_r+0xe4>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c5c:	2320      	movs	r3, #32
 8009c5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c62:	2330      	movs	r3, #48	; 0x30
 8009c64:	f04f 0b01 	mov.w	fp, #1
 8009c68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c6c:	9503      	str	r5, [sp, #12]
 8009c6e:	46b8      	mov	r8, r7
 8009c70:	4645      	mov	r5, r8
 8009c72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009c76:	b10b      	cbz	r3, 8009c7c <_vfiprintf_r+0x50>
 8009c78:	2b25      	cmp	r3, #37	; 0x25
 8009c7a:	d154      	bne.n	8009d26 <_vfiprintf_r+0xfa>
 8009c7c:	ebb8 0a07 	subs.w	sl, r8, r7
 8009c80:	d00b      	beq.n	8009c9a <_vfiprintf_r+0x6e>
 8009c82:	4653      	mov	r3, sl
 8009c84:	463a      	mov	r2, r7
 8009c86:	4621      	mov	r1, r4
 8009c88:	4630      	mov	r0, r6
 8009c8a:	f7ff ffbc 	bl	8009c06 <__sfputs_r>
 8009c8e:	3001      	adds	r0, #1
 8009c90:	f000 80c2 	beq.w	8009e18 <_vfiprintf_r+0x1ec>
 8009c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c96:	4453      	add	r3, sl
 8009c98:	9309      	str	r3, [sp, #36]	; 0x24
 8009c9a:	f898 3000 	ldrb.w	r3, [r8]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f000 80ba 	beq.w	8009e18 <_vfiprintf_r+0x1ec>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8009caa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cae:	9304      	str	r3, [sp, #16]
 8009cb0:	9307      	str	r3, [sp, #28]
 8009cb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cb6:	931a      	str	r3, [sp, #104]	; 0x68
 8009cb8:	46a8      	mov	r8, r5
 8009cba:	2205      	movs	r2, #5
 8009cbc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009cc0:	485e      	ldr	r0, [pc, #376]	; (8009e3c <_vfiprintf_r+0x210>)
 8009cc2:	f000 fcad 	bl	800a620 <memchr>
 8009cc6:	9b04      	ldr	r3, [sp, #16]
 8009cc8:	bb78      	cbnz	r0, 8009d2a <_vfiprintf_r+0xfe>
 8009cca:	06d9      	lsls	r1, r3, #27
 8009ccc:	bf44      	itt	mi
 8009cce:	2220      	movmi	r2, #32
 8009cd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009cd4:	071a      	lsls	r2, r3, #28
 8009cd6:	bf44      	itt	mi
 8009cd8:	222b      	movmi	r2, #43	; 0x2b
 8009cda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009cde:	782a      	ldrb	r2, [r5, #0]
 8009ce0:	2a2a      	cmp	r2, #42	; 0x2a
 8009ce2:	d02a      	beq.n	8009d3a <_vfiprintf_r+0x10e>
 8009ce4:	46a8      	mov	r8, r5
 8009ce6:	2000      	movs	r0, #0
 8009ce8:	250a      	movs	r5, #10
 8009cea:	9a07      	ldr	r2, [sp, #28]
 8009cec:	4641      	mov	r1, r8
 8009cee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cf2:	3b30      	subs	r3, #48	; 0x30
 8009cf4:	2b09      	cmp	r3, #9
 8009cf6:	d969      	bls.n	8009dcc <_vfiprintf_r+0x1a0>
 8009cf8:	b360      	cbz	r0, 8009d54 <_vfiprintf_r+0x128>
 8009cfa:	e024      	b.n	8009d46 <_vfiprintf_r+0x11a>
 8009cfc:	4b50      	ldr	r3, [pc, #320]	; (8009e40 <_vfiprintf_r+0x214>)
 8009cfe:	429c      	cmp	r4, r3
 8009d00:	d101      	bne.n	8009d06 <_vfiprintf_r+0xda>
 8009d02:	68b4      	ldr	r4, [r6, #8]
 8009d04:	e7a2      	b.n	8009c4c <_vfiprintf_r+0x20>
 8009d06:	4b4f      	ldr	r3, [pc, #316]	; (8009e44 <_vfiprintf_r+0x218>)
 8009d08:	429c      	cmp	r4, r3
 8009d0a:	bf08      	it	eq
 8009d0c:	68f4      	ldreq	r4, [r6, #12]
 8009d0e:	e79d      	b.n	8009c4c <_vfiprintf_r+0x20>
 8009d10:	4621      	mov	r1, r4
 8009d12:	4630      	mov	r0, r6
 8009d14:	f000 fae0 	bl	800a2d8 <__swsetup_r>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	d09d      	beq.n	8009c58 <_vfiprintf_r+0x2c>
 8009d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d20:	b01d      	add	sp, #116	; 0x74
 8009d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d26:	46a8      	mov	r8, r5
 8009d28:	e7a2      	b.n	8009c70 <_vfiprintf_r+0x44>
 8009d2a:	4a44      	ldr	r2, [pc, #272]	; (8009e3c <_vfiprintf_r+0x210>)
 8009d2c:	4645      	mov	r5, r8
 8009d2e:	1a80      	subs	r0, r0, r2
 8009d30:	fa0b f000 	lsl.w	r0, fp, r0
 8009d34:	4318      	orrs	r0, r3
 8009d36:	9004      	str	r0, [sp, #16]
 8009d38:	e7be      	b.n	8009cb8 <_vfiprintf_r+0x8c>
 8009d3a:	9a03      	ldr	r2, [sp, #12]
 8009d3c:	1d11      	adds	r1, r2, #4
 8009d3e:	6812      	ldr	r2, [r2, #0]
 8009d40:	9103      	str	r1, [sp, #12]
 8009d42:	2a00      	cmp	r2, #0
 8009d44:	db01      	blt.n	8009d4a <_vfiprintf_r+0x11e>
 8009d46:	9207      	str	r2, [sp, #28]
 8009d48:	e004      	b.n	8009d54 <_vfiprintf_r+0x128>
 8009d4a:	4252      	negs	r2, r2
 8009d4c:	f043 0302 	orr.w	r3, r3, #2
 8009d50:	9207      	str	r2, [sp, #28]
 8009d52:	9304      	str	r3, [sp, #16]
 8009d54:	f898 3000 	ldrb.w	r3, [r8]
 8009d58:	2b2e      	cmp	r3, #46	; 0x2e
 8009d5a:	d10e      	bne.n	8009d7a <_vfiprintf_r+0x14e>
 8009d5c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009d60:	2b2a      	cmp	r3, #42	; 0x2a
 8009d62:	d138      	bne.n	8009dd6 <_vfiprintf_r+0x1aa>
 8009d64:	9b03      	ldr	r3, [sp, #12]
 8009d66:	f108 0802 	add.w	r8, r8, #2
 8009d6a:	1d1a      	adds	r2, r3, #4
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	9203      	str	r2, [sp, #12]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	bfb8      	it	lt
 8009d74:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d78:	9305      	str	r3, [sp, #20]
 8009d7a:	4d33      	ldr	r5, [pc, #204]	; (8009e48 <_vfiprintf_r+0x21c>)
 8009d7c:	2203      	movs	r2, #3
 8009d7e:	f898 1000 	ldrb.w	r1, [r8]
 8009d82:	4628      	mov	r0, r5
 8009d84:	f000 fc4c 	bl	800a620 <memchr>
 8009d88:	b140      	cbz	r0, 8009d9c <_vfiprintf_r+0x170>
 8009d8a:	2340      	movs	r3, #64	; 0x40
 8009d8c:	1b40      	subs	r0, r0, r5
 8009d8e:	fa03 f000 	lsl.w	r0, r3, r0
 8009d92:	9b04      	ldr	r3, [sp, #16]
 8009d94:	f108 0801 	add.w	r8, r8, #1
 8009d98:	4303      	orrs	r3, r0
 8009d9a:	9304      	str	r3, [sp, #16]
 8009d9c:	f898 1000 	ldrb.w	r1, [r8]
 8009da0:	2206      	movs	r2, #6
 8009da2:	482a      	ldr	r0, [pc, #168]	; (8009e4c <_vfiprintf_r+0x220>)
 8009da4:	f108 0701 	add.w	r7, r8, #1
 8009da8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dac:	f000 fc38 	bl	800a620 <memchr>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d037      	beq.n	8009e24 <_vfiprintf_r+0x1f8>
 8009db4:	4b26      	ldr	r3, [pc, #152]	; (8009e50 <_vfiprintf_r+0x224>)
 8009db6:	bb1b      	cbnz	r3, 8009e00 <_vfiprintf_r+0x1d4>
 8009db8:	9b03      	ldr	r3, [sp, #12]
 8009dba:	3307      	adds	r3, #7
 8009dbc:	f023 0307 	bic.w	r3, r3, #7
 8009dc0:	3308      	adds	r3, #8
 8009dc2:	9303      	str	r3, [sp, #12]
 8009dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc6:	444b      	add	r3, r9
 8009dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8009dca:	e750      	b.n	8009c6e <_vfiprintf_r+0x42>
 8009dcc:	fb05 3202 	mla	r2, r5, r2, r3
 8009dd0:	2001      	movs	r0, #1
 8009dd2:	4688      	mov	r8, r1
 8009dd4:	e78a      	b.n	8009cec <_vfiprintf_r+0xc0>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	250a      	movs	r5, #10
 8009dda:	4619      	mov	r1, r3
 8009ddc:	f108 0801 	add.w	r8, r8, #1
 8009de0:	9305      	str	r3, [sp, #20]
 8009de2:	4640      	mov	r0, r8
 8009de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009de8:	3a30      	subs	r2, #48	; 0x30
 8009dea:	2a09      	cmp	r2, #9
 8009dec:	d903      	bls.n	8009df6 <_vfiprintf_r+0x1ca>
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d0c3      	beq.n	8009d7a <_vfiprintf_r+0x14e>
 8009df2:	9105      	str	r1, [sp, #20]
 8009df4:	e7c1      	b.n	8009d7a <_vfiprintf_r+0x14e>
 8009df6:	fb05 2101 	mla	r1, r5, r1, r2
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	4680      	mov	r8, r0
 8009dfe:	e7f0      	b.n	8009de2 <_vfiprintf_r+0x1b6>
 8009e00:	ab03      	add	r3, sp, #12
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	4622      	mov	r2, r4
 8009e06:	4b13      	ldr	r3, [pc, #76]	; (8009e54 <_vfiprintf_r+0x228>)
 8009e08:	a904      	add	r1, sp, #16
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f3af 8000 	nop.w
 8009e10:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009e14:	4681      	mov	r9, r0
 8009e16:	d1d5      	bne.n	8009dc4 <_vfiprintf_r+0x198>
 8009e18:	89a3      	ldrh	r3, [r4, #12]
 8009e1a:	065b      	lsls	r3, r3, #25
 8009e1c:	f53f af7e 	bmi.w	8009d1c <_vfiprintf_r+0xf0>
 8009e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e22:	e77d      	b.n	8009d20 <_vfiprintf_r+0xf4>
 8009e24:	ab03      	add	r3, sp, #12
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	4622      	mov	r2, r4
 8009e2a:	4b0a      	ldr	r3, [pc, #40]	; (8009e54 <_vfiprintf_r+0x228>)
 8009e2c:	a904      	add	r1, sp, #16
 8009e2e:	4630      	mov	r0, r6
 8009e30:	f000 f888 	bl	8009f44 <_printf_i>
 8009e34:	e7ec      	b.n	8009e10 <_vfiprintf_r+0x1e4>
 8009e36:	bf00      	nop
 8009e38:	0803189c 	.word	0x0803189c
 8009e3c:	080318dc 	.word	0x080318dc
 8009e40:	080318bc 	.word	0x080318bc
 8009e44:	0803187c 	.word	0x0803187c
 8009e48:	080318e2 	.word	0x080318e2
 8009e4c:	080318e6 	.word	0x080318e6
 8009e50:	00000000 	.word	0x00000000
 8009e54:	08009c07 	.word	0x08009c07

08009e58 <_printf_common>:
 8009e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e5c:	4691      	mov	r9, r2
 8009e5e:	461f      	mov	r7, r3
 8009e60:	688a      	ldr	r2, [r1, #8]
 8009e62:	690b      	ldr	r3, [r1, #16]
 8009e64:	4606      	mov	r6, r0
 8009e66:	4293      	cmp	r3, r2
 8009e68:	bfb8      	it	lt
 8009e6a:	4613      	movlt	r3, r2
 8009e6c:	f8c9 3000 	str.w	r3, [r9]
 8009e70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e74:	460c      	mov	r4, r1
 8009e76:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e7a:	b112      	cbz	r2, 8009e82 <_printf_common+0x2a>
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	f8c9 3000 	str.w	r3, [r9]
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	0699      	lsls	r1, r3, #26
 8009e86:	bf42      	ittt	mi
 8009e88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009e8c:	3302      	addmi	r3, #2
 8009e8e:	f8c9 3000 	strmi.w	r3, [r9]
 8009e92:	6825      	ldr	r5, [r4, #0]
 8009e94:	f015 0506 	ands.w	r5, r5, #6
 8009e98:	d107      	bne.n	8009eaa <_printf_common+0x52>
 8009e9a:	f104 0a19 	add.w	sl, r4, #25
 8009e9e:	68e3      	ldr	r3, [r4, #12]
 8009ea0:	f8d9 2000 	ldr.w	r2, [r9]
 8009ea4:	1a9b      	subs	r3, r3, r2
 8009ea6:	42ab      	cmp	r3, r5
 8009ea8:	dc29      	bgt.n	8009efe <_printf_common+0xa6>
 8009eaa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009eae:	6822      	ldr	r2, [r4, #0]
 8009eb0:	3300      	adds	r3, #0
 8009eb2:	bf18      	it	ne
 8009eb4:	2301      	movne	r3, #1
 8009eb6:	0692      	lsls	r2, r2, #26
 8009eb8:	d42e      	bmi.n	8009f18 <_printf_common+0xc0>
 8009eba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ebe:	4639      	mov	r1, r7
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	47c0      	blx	r8
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	d021      	beq.n	8009f0c <_printf_common+0xb4>
 8009ec8:	6823      	ldr	r3, [r4, #0]
 8009eca:	68e5      	ldr	r5, [r4, #12]
 8009ecc:	f003 0306 	and.w	r3, r3, #6
 8009ed0:	2b04      	cmp	r3, #4
 8009ed2:	bf18      	it	ne
 8009ed4:	2500      	movne	r5, #0
 8009ed6:	f8d9 2000 	ldr.w	r2, [r9]
 8009eda:	f04f 0900 	mov.w	r9, #0
 8009ede:	bf08      	it	eq
 8009ee0:	1aad      	subeq	r5, r5, r2
 8009ee2:	68a3      	ldr	r3, [r4, #8]
 8009ee4:	6922      	ldr	r2, [r4, #16]
 8009ee6:	bf08      	it	eq
 8009ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009eec:	4293      	cmp	r3, r2
 8009eee:	bfc4      	itt	gt
 8009ef0:	1a9b      	subgt	r3, r3, r2
 8009ef2:	18ed      	addgt	r5, r5, r3
 8009ef4:	341a      	adds	r4, #26
 8009ef6:	454d      	cmp	r5, r9
 8009ef8:	d11a      	bne.n	8009f30 <_printf_common+0xd8>
 8009efa:	2000      	movs	r0, #0
 8009efc:	e008      	b.n	8009f10 <_printf_common+0xb8>
 8009efe:	2301      	movs	r3, #1
 8009f00:	4652      	mov	r2, sl
 8009f02:	4639      	mov	r1, r7
 8009f04:	4630      	mov	r0, r6
 8009f06:	47c0      	blx	r8
 8009f08:	3001      	adds	r0, #1
 8009f0a:	d103      	bne.n	8009f14 <_printf_common+0xbc>
 8009f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f14:	3501      	adds	r5, #1
 8009f16:	e7c2      	b.n	8009e9e <_printf_common+0x46>
 8009f18:	2030      	movs	r0, #48	; 0x30
 8009f1a:	18e1      	adds	r1, r4, r3
 8009f1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f20:	1c5a      	adds	r2, r3, #1
 8009f22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f26:	4422      	add	r2, r4
 8009f28:	3302      	adds	r3, #2
 8009f2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f2e:	e7c4      	b.n	8009eba <_printf_common+0x62>
 8009f30:	2301      	movs	r3, #1
 8009f32:	4622      	mov	r2, r4
 8009f34:	4639      	mov	r1, r7
 8009f36:	4630      	mov	r0, r6
 8009f38:	47c0      	blx	r8
 8009f3a:	3001      	adds	r0, #1
 8009f3c:	d0e6      	beq.n	8009f0c <_printf_common+0xb4>
 8009f3e:	f109 0901 	add.w	r9, r9, #1
 8009f42:	e7d8      	b.n	8009ef6 <_printf_common+0x9e>

08009f44 <_printf_i>:
 8009f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009f4c:	460c      	mov	r4, r1
 8009f4e:	7e09      	ldrb	r1, [r1, #24]
 8009f50:	b085      	sub	sp, #20
 8009f52:	296e      	cmp	r1, #110	; 0x6e
 8009f54:	4617      	mov	r7, r2
 8009f56:	4606      	mov	r6, r0
 8009f58:	4698      	mov	r8, r3
 8009f5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f5c:	f000 80b3 	beq.w	800a0c6 <_printf_i+0x182>
 8009f60:	d822      	bhi.n	8009fa8 <_printf_i+0x64>
 8009f62:	2963      	cmp	r1, #99	; 0x63
 8009f64:	d036      	beq.n	8009fd4 <_printf_i+0x90>
 8009f66:	d80a      	bhi.n	8009f7e <_printf_i+0x3a>
 8009f68:	2900      	cmp	r1, #0
 8009f6a:	f000 80b9 	beq.w	800a0e0 <_printf_i+0x19c>
 8009f6e:	2958      	cmp	r1, #88	; 0x58
 8009f70:	f000 8083 	beq.w	800a07a <_printf_i+0x136>
 8009f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009f7c:	e032      	b.n	8009fe4 <_printf_i+0xa0>
 8009f7e:	2964      	cmp	r1, #100	; 0x64
 8009f80:	d001      	beq.n	8009f86 <_printf_i+0x42>
 8009f82:	2969      	cmp	r1, #105	; 0x69
 8009f84:	d1f6      	bne.n	8009f74 <_printf_i+0x30>
 8009f86:	6820      	ldr	r0, [r4, #0]
 8009f88:	6813      	ldr	r3, [r2, #0]
 8009f8a:	0605      	lsls	r5, r0, #24
 8009f8c:	f103 0104 	add.w	r1, r3, #4
 8009f90:	d52a      	bpl.n	8009fe8 <_printf_i+0xa4>
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6011      	str	r1, [r2, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	da03      	bge.n	8009fa2 <_printf_i+0x5e>
 8009f9a:	222d      	movs	r2, #45	; 0x2d
 8009f9c:	425b      	negs	r3, r3
 8009f9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009fa2:	486f      	ldr	r0, [pc, #444]	; (800a160 <_printf_i+0x21c>)
 8009fa4:	220a      	movs	r2, #10
 8009fa6:	e039      	b.n	800a01c <_printf_i+0xd8>
 8009fa8:	2973      	cmp	r1, #115	; 0x73
 8009faa:	f000 809d 	beq.w	800a0e8 <_printf_i+0x1a4>
 8009fae:	d808      	bhi.n	8009fc2 <_printf_i+0x7e>
 8009fb0:	296f      	cmp	r1, #111	; 0x6f
 8009fb2:	d020      	beq.n	8009ff6 <_printf_i+0xb2>
 8009fb4:	2970      	cmp	r1, #112	; 0x70
 8009fb6:	d1dd      	bne.n	8009f74 <_printf_i+0x30>
 8009fb8:	6823      	ldr	r3, [r4, #0]
 8009fba:	f043 0320 	orr.w	r3, r3, #32
 8009fbe:	6023      	str	r3, [r4, #0]
 8009fc0:	e003      	b.n	8009fca <_printf_i+0x86>
 8009fc2:	2975      	cmp	r1, #117	; 0x75
 8009fc4:	d017      	beq.n	8009ff6 <_printf_i+0xb2>
 8009fc6:	2978      	cmp	r1, #120	; 0x78
 8009fc8:	d1d4      	bne.n	8009f74 <_printf_i+0x30>
 8009fca:	2378      	movs	r3, #120	; 0x78
 8009fcc:	4865      	ldr	r0, [pc, #404]	; (800a164 <_printf_i+0x220>)
 8009fce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fd2:	e055      	b.n	800a080 <_printf_i+0x13c>
 8009fd4:	6813      	ldr	r3, [r2, #0]
 8009fd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fda:	1d19      	adds	r1, r3, #4
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	6011      	str	r1, [r2, #0]
 8009fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e08c      	b.n	800a102 <_printf_i+0x1be>
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009fee:	6011      	str	r1, [r2, #0]
 8009ff0:	bf18      	it	ne
 8009ff2:	b21b      	sxthne	r3, r3
 8009ff4:	e7cf      	b.n	8009f96 <_printf_i+0x52>
 8009ff6:	6813      	ldr	r3, [r2, #0]
 8009ff8:	6825      	ldr	r5, [r4, #0]
 8009ffa:	1d18      	adds	r0, r3, #4
 8009ffc:	6010      	str	r0, [r2, #0]
 8009ffe:	0628      	lsls	r0, r5, #24
 800a000:	d501      	bpl.n	800a006 <_printf_i+0xc2>
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	e002      	b.n	800a00c <_printf_i+0xc8>
 800a006:	0668      	lsls	r0, r5, #25
 800a008:	d5fb      	bpl.n	800a002 <_printf_i+0xbe>
 800a00a:	881b      	ldrh	r3, [r3, #0]
 800a00c:	296f      	cmp	r1, #111	; 0x6f
 800a00e:	bf14      	ite	ne
 800a010:	220a      	movne	r2, #10
 800a012:	2208      	moveq	r2, #8
 800a014:	4852      	ldr	r0, [pc, #328]	; (800a160 <_printf_i+0x21c>)
 800a016:	2100      	movs	r1, #0
 800a018:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a01c:	6865      	ldr	r5, [r4, #4]
 800a01e:	2d00      	cmp	r5, #0
 800a020:	60a5      	str	r5, [r4, #8]
 800a022:	f2c0 8095 	blt.w	800a150 <_printf_i+0x20c>
 800a026:	6821      	ldr	r1, [r4, #0]
 800a028:	f021 0104 	bic.w	r1, r1, #4
 800a02c:	6021      	str	r1, [r4, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d13d      	bne.n	800a0ae <_printf_i+0x16a>
 800a032:	2d00      	cmp	r5, #0
 800a034:	f040 808e 	bne.w	800a154 <_printf_i+0x210>
 800a038:	4665      	mov	r5, ip
 800a03a:	2a08      	cmp	r2, #8
 800a03c:	d10b      	bne.n	800a056 <_printf_i+0x112>
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	07db      	lsls	r3, r3, #31
 800a042:	d508      	bpl.n	800a056 <_printf_i+0x112>
 800a044:	6923      	ldr	r3, [r4, #16]
 800a046:	6862      	ldr	r2, [r4, #4]
 800a048:	429a      	cmp	r2, r3
 800a04a:	bfde      	ittt	le
 800a04c:	2330      	movle	r3, #48	; 0x30
 800a04e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a052:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a056:	ebac 0305 	sub.w	r3, ip, r5
 800a05a:	6123      	str	r3, [r4, #16]
 800a05c:	f8cd 8000 	str.w	r8, [sp]
 800a060:	463b      	mov	r3, r7
 800a062:	aa03      	add	r2, sp, #12
 800a064:	4621      	mov	r1, r4
 800a066:	4630      	mov	r0, r6
 800a068:	f7ff fef6 	bl	8009e58 <_printf_common>
 800a06c:	3001      	adds	r0, #1
 800a06e:	d14d      	bne.n	800a10c <_printf_i+0x1c8>
 800a070:	f04f 30ff 	mov.w	r0, #4294967295
 800a074:	b005      	add	sp, #20
 800a076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a07a:	4839      	ldr	r0, [pc, #228]	; (800a160 <_printf_i+0x21c>)
 800a07c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a080:	6813      	ldr	r3, [r2, #0]
 800a082:	6821      	ldr	r1, [r4, #0]
 800a084:	1d1d      	adds	r5, r3, #4
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	6015      	str	r5, [r2, #0]
 800a08a:	060a      	lsls	r2, r1, #24
 800a08c:	d50b      	bpl.n	800a0a6 <_printf_i+0x162>
 800a08e:	07ca      	lsls	r2, r1, #31
 800a090:	bf44      	itt	mi
 800a092:	f041 0120 	orrmi.w	r1, r1, #32
 800a096:	6021      	strmi	r1, [r4, #0]
 800a098:	b91b      	cbnz	r3, 800a0a2 <_printf_i+0x15e>
 800a09a:	6822      	ldr	r2, [r4, #0]
 800a09c:	f022 0220 	bic.w	r2, r2, #32
 800a0a0:	6022      	str	r2, [r4, #0]
 800a0a2:	2210      	movs	r2, #16
 800a0a4:	e7b7      	b.n	800a016 <_printf_i+0xd2>
 800a0a6:	064d      	lsls	r5, r1, #25
 800a0a8:	bf48      	it	mi
 800a0aa:	b29b      	uxthmi	r3, r3
 800a0ac:	e7ef      	b.n	800a08e <_printf_i+0x14a>
 800a0ae:	4665      	mov	r5, ip
 800a0b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0b4:	fb02 3311 	mls	r3, r2, r1, r3
 800a0b8:	5cc3      	ldrb	r3, [r0, r3]
 800a0ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a0be:	460b      	mov	r3, r1
 800a0c0:	2900      	cmp	r1, #0
 800a0c2:	d1f5      	bne.n	800a0b0 <_printf_i+0x16c>
 800a0c4:	e7b9      	b.n	800a03a <_printf_i+0xf6>
 800a0c6:	6813      	ldr	r3, [r2, #0]
 800a0c8:	6825      	ldr	r5, [r4, #0]
 800a0ca:	1d18      	adds	r0, r3, #4
 800a0cc:	6961      	ldr	r1, [r4, #20]
 800a0ce:	6010      	str	r0, [r2, #0]
 800a0d0:	0628      	lsls	r0, r5, #24
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	d501      	bpl.n	800a0da <_printf_i+0x196>
 800a0d6:	6019      	str	r1, [r3, #0]
 800a0d8:	e002      	b.n	800a0e0 <_printf_i+0x19c>
 800a0da:	066a      	lsls	r2, r5, #25
 800a0dc:	d5fb      	bpl.n	800a0d6 <_printf_i+0x192>
 800a0de:	8019      	strh	r1, [r3, #0]
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	4665      	mov	r5, ip
 800a0e4:	6123      	str	r3, [r4, #16]
 800a0e6:	e7b9      	b.n	800a05c <_printf_i+0x118>
 800a0e8:	6813      	ldr	r3, [r2, #0]
 800a0ea:	1d19      	adds	r1, r3, #4
 800a0ec:	6011      	str	r1, [r2, #0]
 800a0ee:	681d      	ldr	r5, [r3, #0]
 800a0f0:	6862      	ldr	r2, [r4, #4]
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	f000 fa93 	bl	800a620 <memchr>
 800a0fa:	b108      	cbz	r0, 800a100 <_printf_i+0x1bc>
 800a0fc:	1b40      	subs	r0, r0, r5
 800a0fe:	6060      	str	r0, [r4, #4]
 800a100:	6863      	ldr	r3, [r4, #4]
 800a102:	6123      	str	r3, [r4, #16]
 800a104:	2300      	movs	r3, #0
 800a106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a10a:	e7a7      	b.n	800a05c <_printf_i+0x118>
 800a10c:	6923      	ldr	r3, [r4, #16]
 800a10e:	462a      	mov	r2, r5
 800a110:	4639      	mov	r1, r7
 800a112:	4630      	mov	r0, r6
 800a114:	47c0      	blx	r8
 800a116:	3001      	adds	r0, #1
 800a118:	d0aa      	beq.n	800a070 <_printf_i+0x12c>
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	079b      	lsls	r3, r3, #30
 800a11e:	d413      	bmi.n	800a148 <_printf_i+0x204>
 800a120:	68e0      	ldr	r0, [r4, #12]
 800a122:	9b03      	ldr	r3, [sp, #12]
 800a124:	4298      	cmp	r0, r3
 800a126:	bfb8      	it	lt
 800a128:	4618      	movlt	r0, r3
 800a12a:	e7a3      	b.n	800a074 <_printf_i+0x130>
 800a12c:	2301      	movs	r3, #1
 800a12e:	464a      	mov	r2, r9
 800a130:	4639      	mov	r1, r7
 800a132:	4630      	mov	r0, r6
 800a134:	47c0      	blx	r8
 800a136:	3001      	adds	r0, #1
 800a138:	d09a      	beq.n	800a070 <_printf_i+0x12c>
 800a13a:	3501      	adds	r5, #1
 800a13c:	68e3      	ldr	r3, [r4, #12]
 800a13e:	9a03      	ldr	r2, [sp, #12]
 800a140:	1a9b      	subs	r3, r3, r2
 800a142:	42ab      	cmp	r3, r5
 800a144:	dcf2      	bgt.n	800a12c <_printf_i+0x1e8>
 800a146:	e7eb      	b.n	800a120 <_printf_i+0x1dc>
 800a148:	2500      	movs	r5, #0
 800a14a:	f104 0919 	add.w	r9, r4, #25
 800a14e:	e7f5      	b.n	800a13c <_printf_i+0x1f8>
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1ac      	bne.n	800a0ae <_printf_i+0x16a>
 800a154:	7803      	ldrb	r3, [r0, #0]
 800a156:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a15a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a15e:	e76c      	b.n	800a03a <_printf_i+0xf6>
 800a160:	080318ed 	.word	0x080318ed
 800a164:	080318fe 	.word	0x080318fe

0800a168 <_sbrk_r>:
 800a168:	b538      	push	{r3, r4, r5, lr}
 800a16a:	2300      	movs	r3, #0
 800a16c:	4c05      	ldr	r4, [pc, #20]	; (800a184 <_sbrk_r+0x1c>)
 800a16e:	4605      	mov	r5, r0
 800a170:	4608      	mov	r0, r1
 800a172:	6023      	str	r3, [r4, #0]
 800a174:	f7fe fb6a 	bl	800884c <_sbrk>
 800a178:	1c43      	adds	r3, r0, #1
 800a17a:	d102      	bne.n	800a182 <_sbrk_r+0x1a>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	b103      	cbz	r3, 800a182 <_sbrk_r+0x1a>
 800a180:	602b      	str	r3, [r5, #0]
 800a182:	bd38      	pop	{r3, r4, r5, pc}
 800a184:	200007dc 	.word	0x200007dc

0800a188 <__sread>:
 800a188:	b510      	push	{r4, lr}
 800a18a:	460c      	mov	r4, r1
 800a18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a190:	f000 faa0 	bl	800a6d4 <_read_r>
 800a194:	2800      	cmp	r0, #0
 800a196:	bfab      	itete	ge
 800a198:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a19a:	89a3      	ldrhlt	r3, [r4, #12]
 800a19c:	181b      	addge	r3, r3, r0
 800a19e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1a2:	bfac      	ite	ge
 800a1a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1a6:	81a3      	strhlt	r3, [r4, #12]
 800a1a8:	bd10      	pop	{r4, pc}

0800a1aa <__swrite>:
 800a1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ae:	461f      	mov	r7, r3
 800a1b0:	898b      	ldrh	r3, [r1, #12]
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	05db      	lsls	r3, r3, #23
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	4616      	mov	r6, r2
 800a1ba:	d505      	bpl.n	800a1c8 <__swrite+0x1e>
 800a1bc:	2302      	movs	r3, #2
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c4:	f000 f9b6 	bl	800a534 <_lseek_r>
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	4632      	mov	r2, r6
 800a1cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1d0:	81a3      	strh	r3, [r4, #12]
 800a1d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1d6:	463b      	mov	r3, r7
 800a1d8:	4628      	mov	r0, r5
 800a1da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1de:	f000 b869 	b.w	800a2b4 <_write_r>

0800a1e2 <__sseek>:
 800a1e2:	b510      	push	{r4, lr}
 800a1e4:	460c      	mov	r4, r1
 800a1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ea:	f000 f9a3 	bl	800a534 <_lseek_r>
 800a1ee:	1c43      	adds	r3, r0, #1
 800a1f0:	89a3      	ldrh	r3, [r4, #12]
 800a1f2:	bf15      	itete	ne
 800a1f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1fe:	81a3      	strheq	r3, [r4, #12]
 800a200:	bf18      	it	ne
 800a202:	81a3      	strhne	r3, [r4, #12]
 800a204:	bd10      	pop	{r4, pc}

0800a206 <__sclose>:
 800a206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a20a:	f000 b8d3 	b.w	800a3b4 <_close_r>
	...

0800a210 <__swbuf_r>:
 800a210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a212:	460e      	mov	r6, r1
 800a214:	4614      	mov	r4, r2
 800a216:	4605      	mov	r5, r0
 800a218:	b118      	cbz	r0, 800a222 <__swbuf_r+0x12>
 800a21a:	6983      	ldr	r3, [r0, #24]
 800a21c:	b90b      	cbnz	r3, 800a222 <__swbuf_r+0x12>
 800a21e:	f7ff fa53 	bl	80096c8 <__sinit>
 800a222:	4b21      	ldr	r3, [pc, #132]	; (800a2a8 <__swbuf_r+0x98>)
 800a224:	429c      	cmp	r4, r3
 800a226:	d12a      	bne.n	800a27e <__swbuf_r+0x6e>
 800a228:	686c      	ldr	r4, [r5, #4]
 800a22a:	69a3      	ldr	r3, [r4, #24]
 800a22c:	60a3      	str	r3, [r4, #8]
 800a22e:	89a3      	ldrh	r3, [r4, #12]
 800a230:	071a      	lsls	r2, r3, #28
 800a232:	d52e      	bpl.n	800a292 <__swbuf_r+0x82>
 800a234:	6923      	ldr	r3, [r4, #16]
 800a236:	b363      	cbz	r3, 800a292 <__swbuf_r+0x82>
 800a238:	6923      	ldr	r3, [r4, #16]
 800a23a:	6820      	ldr	r0, [r4, #0]
 800a23c:	b2f6      	uxtb	r6, r6
 800a23e:	1ac0      	subs	r0, r0, r3
 800a240:	6963      	ldr	r3, [r4, #20]
 800a242:	4637      	mov	r7, r6
 800a244:	4283      	cmp	r3, r0
 800a246:	dc04      	bgt.n	800a252 <__swbuf_r+0x42>
 800a248:	4621      	mov	r1, r4
 800a24a:	4628      	mov	r0, r5
 800a24c:	f000 f948 	bl	800a4e0 <_fflush_r>
 800a250:	bb28      	cbnz	r0, 800a29e <__swbuf_r+0x8e>
 800a252:	68a3      	ldr	r3, [r4, #8]
 800a254:	3001      	adds	r0, #1
 800a256:	3b01      	subs	r3, #1
 800a258:	60a3      	str	r3, [r4, #8]
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	1c5a      	adds	r2, r3, #1
 800a25e:	6022      	str	r2, [r4, #0]
 800a260:	701e      	strb	r6, [r3, #0]
 800a262:	6963      	ldr	r3, [r4, #20]
 800a264:	4283      	cmp	r3, r0
 800a266:	d004      	beq.n	800a272 <__swbuf_r+0x62>
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	07db      	lsls	r3, r3, #31
 800a26c:	d519      	bpl.n	800a2a2 <__swbuf_r+0x92>
 800a26e:	2e0a      	cmp	r6, #10
 800a270:	d117      	bne.n	800a2a2 <__swbuf_r+0x92>
 800a272:	4621      	mov	r1, r4
 800a274:	4628      	mov	r0, r5
 800a276:	f000 f933 	bl	800a4e0 <_fflush_r>
 800a27a:	b190      	cbz	r0, 800a2a2 <__swbuf_r+0x92>
 800a27c:	e00f      	b.n	800a29e <__swbuf_r+0x8e>
 800a27e:	4b0b      	ldr	r3, [pc, #44]	; (800a2ac <__swbuf_r+0x9c>)
 800a280:	429c      	cmp	r4, r3
 800a282:	d101      	bne.n	800a288 <__swbuf_r+0x78>
 800a284:	68ac      	ldr	r4, [r5, #8]
 800a286:	e7d0      	b.n	800a22a <__swbuf_r+0x1a>
 800a288:	4b09      	ldr	r3, [pc, #36]	; (800a2b0 <__swbuf_r+0xa0>)
 800a28a:	429c      	cmp	r4, r3
 800a28c:	bf08      	it	eq
 800a28e:	68ec      	ldreq	r4, [r5, #12]
 800a290:	e7cb      	b.n	800a22a <__swbuf_r+0x1a>
 800a292:	4621      	mov	r1, r4
 800a294:	4628      	mov	r0, r5
 800a296:	f000 f81f 	bl	800a2d8 <__swsetup_r>
 800a29a:	2800      	cmp	r0, #0
 800a29c:	d0cc      	beq.n	800a238 <__swbuf_r+0x28>
 800a29e:	f04f 37ff 	mov.w	r7, #4294967295
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	0803189c 	.word	0x0803189c
 800a2ac:	080318bc 	.word	0x080318bc
 800a2b0:	0803187c 	.word	0x0803187c

0800a2b4 <_write_r>:
 800a2b4:	b538      	push	{r3, r4, r5, lr}
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	4608      	mov	r0, r1
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	2200      	movs	r2, #0
 800a2be:	4c05      	ldr	r4, [pc, #20]	; (800a2d4 <_write_r+0x20>)
 800a2c0:	6022      	str	r2, [r4, #0]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	f7fe fa75 	bl	80087b2 <_write>
 800a2c8:	1c43      	adds	r3, r0, #1
 800a2ca:	d102      	bne.n	800a2d2 <_write_r+0x1e>
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	b103      	cbz	r3, 800a2d2 <_write_r+0x1e>
 800a2d0:	602b      	str	r3, [r5, #0]
 800a2d2:	bd38      	pop	{r3, r4, r5, pc}
 800a2d4:	200007dc 	.word	0x200007dc

0800a2d8 <__swsetup_r>:
 800a2d8:	4b32      	ldr	r3, [pc, #200]	; (800a3a4 <__swsetup_r+0xcc>)
 800a2da:	b570      	push	{r4, r5, r6, lr}
 800a2dc:	681d      	ldr	r5, [r3, #0]
 800a2de:	4606      	mov	r6, r0
 800a2e0:	460c      	mov	r4, r1
 800a2e2:	b125      	cbz	r5, 800a2ee <__swsetup_r+0x16>
 800a2e4:	69ab      	ldr	r3, [r5, #24]
 800a2e6:	b913      	cbnz	r3, 800a2ee <__swsetup_r+0x16>
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	f7ff f9ed 	bl	80096c8 <__sinit>
 800a2ee:	4b2e      	ldr	r3, [pc, #184]	; (800a3a8 <__swsetup_r+0xd0>)
 800a2f0:	429c      	cmp	r4, r3
 800a2f2:	d10f      	bne.n	800a314 <__swsetup_r+0x3c>
 800a2f4:	686c      	ldr	r4, [r5, #4]
 800a2f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	0715      	lsls	r5, r2, #28
 800a2fe:	d42c      	bmi.n	800a35a <__swsetup_r+0x82>
 800a300:	06d0      	lsls	r0, r2, #27
 800a302:	d411      	bmi.n	800a328 <__swsetup_r+0x50>
 800a304:	2209      	movs	r2, #9
 800a306:	6032      	str	r2, [r6, #0]
 800a308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a30c:	81a3      	strh	r3, [r4, #12]
 800a30e:	f04f 30ff 	mov.w	r0, #4294967295
 800a312:	e03e      	b.n	800a392 <__swsetup_r+0xba>
 800a314:	4b25      	ldr	r3, [pc, #148]	; (800a3ac <__swsetup_r+0xd4>)
 800a316:	429c      	cmp	r4, r3
 800a318:	d101      	bne.n	800a31e <__swsetup_r+0x46>
 800a31a:	68ac      	ldr	r4, [r5, #8]
 800a31c:	e7eb      	b.n	800a2f6 <__swsetup_r+0x1e>
 800a31e:	4b24      	ldr	r3, [pc, #144]	; (800a3b0 <__swsetup_r+0xd8>)
 800a320:	429c      	cmp	r4, r3
 800a322:	bf08      	it	eq
 800a324:	68ec      	ldreq	r4, [r5, #12]
 800a326:	e7e6      	b.n	800a2f6 <__swsetup_r+0x1e>
 800a328:	0751      	lsls	r1, r2, #29
 800a32a:	d512      	bpl.n	800a352 <__swsetup_r+0x7a>
 800a32c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a32e:	b141      	cbz	r1, 800a342 <__swsetup_r+0x6a>
 800a330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a334:	4299      	cmp	r1, r3
 800a336:	d002      	beq.n	800a33e <__swsetup_r+0x66>
 800a338:	4630      	mov	r0, r6
 800a33a:	f7ff fa57 	bl	80097ec <_free_r>
 800a33e:	2300      	movs	r3, #0
 800a340:	6363      	str	r3, [r4, #52]	; 0x34
 800a342:	89a3      	ldrh	r3, [r4, #12]
 800a344:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a348:	81a3      	strh	r3, [r4, #12]
 800a34a:	2300      	movs	r3, #0
 800a34c:	6063      	str	r3, [r4, #4]
 800a34e:	6923      	ldr	r3, [r4, #16]
 800a350:	6023      	str	r3, [r4, #0]
 800a352:	89a3      	ldrh	r3, [r4, #12]
 800a354:	f043 0308 	orr.w	r3, r3, #8
 800a358:	81a3      	strh	r3, [r4, #12]
 800a35a:	6923      	ldr	r3, [r4, #16]
 800a35c:	b94b      	cbnz	r3, 800a372 <__swsetup_r+0x9a>
 800a35e:	89a3      	ldrh	r3, [r4, #12]
 800a360:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a368:	d003      	beq.n	800a372 <__swsetup_r+0x9a>
 800a36a:	4621      	mov	r1, r4
 800a36c:	4630      	mov	r0, r6
 800a36e:	f000 f917 	bl	800a5a0 <__smakebuf_r>
 800a372:	89a2      	ldrh	r2, [r4, #12]
 800a374:	f012 0301 	ands.w	r3, r2, #1
 800a378:	d00c      	beq.n	800a394 <__swsetup_r+0xbc>
 800a37a:	2300      	movs	r3, #0
 800a37c:	60a3      	str	r3, [r4, #8]
 800a37e:	6963      	ldr	r3, [r4, #20]
 800a380:	425b      	negs	r3, r3
 800a382:	61a3      	str	r3, [r4, #24]
 800a384:	6923      	ldr	r3, [r4, #16]
 800a386:	b953      	cbnz	r3, 800a39e <__swsetup_r+0xc6>
 800a388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a38c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a390:	d1ba      	bne.n	800a308 <__swsetup_r+0x30>
 800a392:	bd70      	pop	{r4, r5, r6, pc}
 800a394:	0792      	lsls	r2, r2, #30
 800a396:	bf58      	it	pl
 800a398:	6963      	ldrpl	r3, [r4, #20]
 800a39a:	60a3      	str	r3, [r4, #8]
 800a39c:	e7f2      	b.n	800a384 <__swsetup_r+0xac>
 800a39e:	2000      	movs	r0, #0
 800a3a0:	e7f7      	b.n	800a392 <__swsetup_r+0xba>
 800a3a2:	bf00      	nop
 800a3a4:	2000000c 	.word	0x2000000c
 800a3a8:	0803189c 	.word	0x0803189c
 800a3ac:	080318bc 	.word	0x080318bc
 800a3b0:	0803187c 	.word	0x0803187c

0800a3b4 <_close_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	4c05      	ldr	r4, [pc, #20]	; (800a3d0 <_close_r+0x1c>)
 800a3ba:	4605      	mov	r5, r0
 800a3bc:	4608      	mov	r0, r1
 800a3be:	6023      	str	r3, [r4, #0]
 800a3c0:	f7fe fa13 	bl	80087ea <_close>
 800a3c4:	1c43      	adds	r3, r0, #1
 800a3c6:	d102      	bne.n	800a3ce <_close_r+0x1a>
 800a3c8:	6823      	ldr	r3, [r4, #0]
 800a3ca:	b103      	cbz	r3, 800a3ce <_close_r+0x1a>
 800a3cc:	602b      	str	r3, [r5, #0]
 800a3ce:	bd38      	pop	{r3, r4, r5, pc}
 800a3d0:	200007dc 	.word	0x200007dc

0800a3d4 <__sflush_r>:
 800a3d4:	898a      	ldrh	r2, [r1, #12]
 800a3d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3da:	4605      	mov	r5, r0
 800a3dc:	0710      	lsls	r0, r2, #28
 800a3de:	460c      	mov	r4, r1
 800a3e0:	d458      	bmi.n	800a494 <__sflush_r+0xc0>
 800a3e2:	684b      	ldr	r3, [r1, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	dc05      	bgt.n	800a3f4 <__sflush_r+0x20>
 800a3e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	dc02      	bgt.n	800a3f4 <__sflush_r+0x20>
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3f6:	2e00      	cmp	r6, #0
 800a3f8:	d0f9      	beq.n	800a3ee <__sflush_r+0x1a>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a400:	682f      	ldr	r7, [r5, #0]
 800a402:	6a21      	ldr	r1, [r4, #32]
 800a404:	602b      	str	r3, [r5, #0]
 800a406:	d032      	beq.n	800a46e <__sflush_r+0x9a>
 800a408:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a40a:	89a3      	ldrh	r3, [r4, #12]
 800a40c:	075a      	lsls	r2, r3, #29
 800a40e:	d505      	bpl.n	800a41c <__sflush_r+0x48>
 800a410:	6863      	ldr	r3, [r4, #4]
 800a412:	1ac0      	subs	r0, r0, r3
 800a414:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a416:	b10b      	cbz	r3, 800a41c <__sflush_r+0x48>
 800a418:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a41a:	1ac0      	subs	r0, r0, r3
 800a41c:	2300      	movs	r3, #0
 800a41e:	4602      	mov	r2, r0
 800a420:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a422:	6a21      	ldr	r1, [r4, #32]
 800a424:	4628      	mov	r0, r5
 800a426:	47b0      	blx	r6
 800a428:	1c43      	adds	r3, r0, #1
 800a42a:	89a3      	ldrh	r3, [r4, #12]
 800a42c:	d106      	bne.n	800a43c <__sflush_r+0x68>
 800a42e:	6829      	ldr	r1, [r5, #0]
 800a430:	291d      	cmp	r1, #29
 800a432:	d848      	bhi.n	800a4c6 <__sflush_r+0xf2>
 800a434:	4a29      	ldr	r2, [pc, #164]	; (800a4dc <__sflush_r+0x108>)
 800a436:	40ca      	lsrs	r2, r1
 800a438:	07d6      	lsls	r6, r2, #31
 800a43a:	d544      	bpl.n	800a4c6 <__sflush_r+0xf2>
 800a43c:	2200      	movs	r2, #0
 800a43e:	6062      	str	r2, [r4, #4]
 800a440:	6922      	ldr	r2, [r4, #16]
 800a442:	04d9      	lsls	r1, r3, #19
 800a444:	6022      	str	r2, [r4, #0]
 800a446:	d504      	bpl.n	800a452 <__sflush_r+0x7e>
 800a448:	1c42      	adds	r2, r0, #1
 800a44a:	d101      	bne.n	800a450 <__sflush_r+0x7c>
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	b903      	cbnz	r3, 800a452 <__sflush_r+0x7e>
 800a450:	6560      	str	r0, [r4, #84]	; 0x54
 800a452:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a454:	602f      	str	r7, [r5, #0]
 800a456:	2900      	cmp	r1, #0
 800a458:	d0c9      	beq.n	800a3ee <__sflush_r+0x1a>
 800a45a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a45e:	4299      	cmp	r1, r3
 800a460:	d002      	beq.n	800a468 <__sflush_r+0x94>
 800a462:	4628      	mov	r0, r5
 800a464:	f7ff f9c2 	bl	80097ec <_free_r>
 800a468:	2000      	movs	r0, #0
 800a46a:	6360      	str	r0, [r4, #52]	; 0x34
 800a46c:	e7c0      	b.n	800a3f0 <__sflush_r+0x1c>
 800a46e:	2301      	movs	r3, #1
 800a470:	4628      	mov	r0, r5
 800a472:	47b0      	blx	r6
 800a474:	1c41      	adds	r1, r0, #1
 800a476:	d1c8      	bne.n	800a40a <__sflush_r+0x36>
 800a478:	682b      	ldr	r3, [r5, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d0c5      	beq.n	800a40a <__sflush_r+0x36>
 800a47e:	2b1d      	cmp	r3, #29
 800a480:	d001      	beq.n	800a486 <__sflush_r+0xb2>
 800a482:	2b16      	cmp	r3, #22
 800a484:	d101      	bne.n	800a48a <__sflush_r+0xb6>
 800a486:	602f      	str	r7, [r5, #0]
 800a488:	e7b1      	b.n	800a3ee <__sflush_r+0x1a>
 800a48a:	89a3      	ldrh	r3, [r4, #12]
 800a48c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a490:	81a3      	strh	r3, [r4, #12]
 800a492:	e7ad      	b.n	800a3f0 <__sflush_r+0x1c>
 800a494:	690f      	ldr	r7, [r1, #16]
 800a496:	2f00      	cmp	r7, #0
 800a498:	d0a9      	beq.n	800a3ee <__sflush_r+0x1a>
 800a49a:	0793      	lsls	r3, r2, #30
 800a49c:	bf18      	it	ne
 800a49e:	2300      	movne	r3, #0
 800a4a0:	680e      	ldr	r6, [r1, #0]
 800a4a2:	bf08      	it	eq
 800a4a4:	694b      	ldreq	r3, [r1, #20]
 800a4a6:	eba6 0807 	sub.w	r8, r6, r7
 800a4aa:	600f      	str	r7, [r1, #0]
 800a4ac:	608b      	str	r3, [r1, #8]
 800a4ae:	f1b8 0f00 	cmp.w	r8, #0
 800a4b2:	dd9c      	ble.n	800a3ee <__sflush_r+0x1a>
 800a4b4:	4643      	mov	r3, r8
 800a4b6:	463a      	mov	r2, r7
 800a4b8:	6a21      	ldr	r1, [r4, #32]
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4be:	47b0      	blx	r6
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	dc06      	bgt.n	800a4d2 <__sflush_r+0xfe>
 800a4c4:	89a3      	ldrh	r3, [r4, #12]
 800a4c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ca:	81a3      	strh	r3, [r4, #12]
 800a4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d0:	e78e      	b.n	800a3f0 <__sflush_r+0x1c>
 800a4d2:	4407      	add	r7, r0
 800a4d4:	eba8 0800 	sub.w	r8, r8, r0
 800a4d8:	e7e9      	b.n	800a4ae <__sflush_r+0xda>
 800a4da:	bf00      	nop
 800a4dc:	20400001 	.word	0x20400001

0800a4e0 <_fflush_r>:
 800a4e0:	b538      	push	{r3, r4, r5, lr}
 800a4e2:	690b      	ldr	r3, [r1, #16]
 800a4e4:	4605      	mov	r5, r0
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	b1db      	cbz	r3, 800a522 <_fflush_r+0x42>
 800a4ea:	b118      	cbz	r0, 800a4f4 <_fflush_r+0x14>
 800a4ec:	6983      	ldr	r3, [r0, #24]
 800a4ee:	b90b      	cbnz	r3, 800a4f4 <_fflush_r+0x14>
 800a4f0:	f7ff f8ea 	bl	80096c8 <__sinit>
 800a4f4:	4b0c      	ldr	r3, [pc, #48]	; (800a528 <_fflush_r+0x48>)
 800a4f6:	429c      	cmp	r4, r3
 800a4f8:	d109      	bne.n	800a50e <_fflush_r+0x2e>
 800a4fa:	686c      	ldr	r4, [r5, #4]
 800a4fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a500:	b17b      	cbz	r3, 800a522 <_fflush_r+0x42>
 800a502:	4621      	mov	r1, r4
 800a504:	4628      	mov	r0, r5
 800a506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a50a:	f7ff bf63 	b.w	800a3d4 <__sflush_r>
 800a50e:	4b07      	ldr	r3, [pc, #28]	; (800a52c <_fflush_r+0x4c>)
 800a510:	429c      	cmp	r4, r3
 800a512:	d101      	bne.n	800a518 <_fflush_r+0x38>
 800a514:	68ac      	ldr	r4, [r5, #8]
 800a516:	e7f1      	b.n	800a4fc <_fflush_r+0x1c>
 800a518:	4b05      	ldr	r3, [pc, #20]	; (800a530 <_fflush_r+0x50>)
 800a51a:	429c      	cmp	r4, r3
 800a51c:	bf08      	it	eq
 800a51e:	68ec      	ldreq	r4, [r5, #12]
 800a520:	e7ec      	b.n	800a4fc <_fflush_r+0x1c>
 800a522:	2000      	movs	r0, #0
 800a524:	bd38      	pop	{r3, r4, r5, pc}
 800a526:	bf00      	nop
 800a528:	0803189c 	.word	0x0803189c
 800a52c:	080318bc 	.word	0x080318bc
 800a530:	0803187c 	.word	0x0803187c

0800a534 <_lseek_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	4605      	mov	r5, r0
 800a538:	4608      	mov	r0, r1
 800a53a:	4611      	mov	r1, r2
 800a53c:	2200      	movs	r2, #0
 800a53e:	4c05      	ldr	r4, [pc, #20]	; (800a554 <_lseek_r+0x20>)
 800a540:	6022      	str	r2, [r4, #0]
 800a542:	461a      	mov	r2, r3
 800a544:	f7fe f975 	bl	8008832 <_lseek>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	d102      	bne.n	800a552 <_lseek_r+0x1e>
 800a54c:	6823      	ldr	r3, [r4, #0]
 800a54e:	b103      	cbz	r3, 800a552 <_lseek_r+0x1e>
 800a550:	602b      	str	r3, [r5, #0]
 800a552:	bd38      	pop	{r3, r4, r5, pc}
 800a554:	200007dc 	.word	0x200007dc

0800a558 <__swhatbuf_r>:
 800a558:	b570      	push	{r4, r5, r6, lr}
 800a55a:	460e      	mov	r6, r1
 800a55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a560:	b096      	sub	sp, #88	; 0x58
 800a562:	2900      	cmp	r1, #0
 800a564:	4614      	mov	r4, r2
 800a566:	461d      	mov	r5, r3
 800a568:	da07      	bge.n	800a57a <__swhatbuf_r+0x22>
 800a56a:	2300      	movs	r3, #0
 800a56c:	602b      	str	r3, [r5, #0]
 800a56e:	89b3      	ldrh	r3, [r6, #12]
 800a570:	061a      	lsls	r2, r3, #24
 800a572:	d410      	bmi.n	800a596 <__swhatbuf_r+0x3e>
 800a574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a578:	e00e      	b.n	800a598 <__swhatbuf_r+0x40>
 800a57a:	466a      	mov	r2, sp
 800a57c:	f000 f8bc 	bl	800a6f8 <_fstat_r>
 800a580:	2800      	cmp	r0, #0
 800a582:	dbf2      	blt.n	800a56a <__swhatbuf_r+0x12>
 800a584:	9a01      	ldr	r2, [sp, #4]
 800a586:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a58a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a58e:	425a      	negs	r2, r3
 800a590:	415a      	adcs	r2, r3
 800a592:	602a      	str	r2, [r5, #0]
 800a594:	e7ee      	b.n	800a574 <__swhatbuf_r+0x1c>
 800a596:	2340      	movs	r3, #64	; 0x40
 800a598:	2000      	movs	r0, #0
 800a59a:	6023      	str	r3, [r4, #0]
 800a59c:	b016      	add	sp, #88	; 0x58
 800a59e:	bd70      	pop	{r4, r5, r6, pc}

0800a5a0 <__smakebuf_r>:
 800a5a0:	898b      	ldrh	r3, [r1, #12]
 800a5a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5a4:	079d      	lsls	r5, r3, #30
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	460c      	mov	r4, r1
 800a5aa:	d507      	bpl.n	800a5bc <__smakebuf_r+0x1c>
 800a5ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	6123      	str	r3, [r4, #16]
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	6163      	str	r3, [r4, #20]
 800a5b8:	b002      	add	sp, #8
 800a5ba:	bd70      	pop	{r4, r5, r6, pc}
 800a5bc:	ab01      	add	r3, sp, #4
 800a5be:	466a      	mov	r2, sp
 800a5c0:	f7ff ffca 	bl	800a558 <__swhatbuf_r>
 800a5c4:	9900      	ldr	r1, [sp, #0]
 800a5c6:	4605      	mov	r5, r0
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f7ff f95b 	bl	8009884 <_malloc_r>
 800a5ce:	b948      	cbnz	r0, 800a5e4 <__smakebuf_r+0x44>
 800a5d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5d4:	059a      	lsls	r2, r3, #22
 800a5d6:	d4ef      	bmi.n	800a5b8 <__smakebuf_r+0x18>
 800a5d8:	f023 0303 	bic.w	r3, r3, #3
 800a5dc:	f043 0302 	orr.w	r3, r3, #2
 800a5e0:	81a3      	strh	r3, [r4, #12]
 800a5e2:	e7e3      	b.n	800a5ac <__smakebuf_r+0xc>
 800a5e4:	4b0d      	ldr	r3, [pc, #52]	; (800a61c <__smakebuf_r+0x7c>)
 800a5e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	6020      	str	r0, [r4, #0]
 800a5ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5f0:	81a3      	strh	r3, [r4, #12]
 800a5f2:	9b00      	ldr	r3, [sp, #0]
 800a5f4:	6120      	str	r0, [r4, #16]
 800a5f6:	6163      	str	r3, [r4, #20]
 800a5f8:	9b01      	ldr	r3, [sp, #4]
 800a5fa:	b15b      	cbz	r3, 800a614 <__smakebuf_r+0x74>
 800a5fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a600:	4630      	mov	r0, r6
 800a602:	f000 f88b 	bl	800a71c <_isatty_r>
 800a606:	b128      	cbz	r0, 800a614 <__smakebuf_r+0x74>
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	f023 0303 	bic.w	r3, r3, #3
 800a60e:	f043 0301 	orr.w	r3, r3, #1
 800a612:	81a3      	strh	r3, [r4, #12]
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	431d      	orrs	r5, r3
 800a618:	81a5      	strh	r5, [r4, #12]
 800a61a:	e7cd      	b.n	800a5b8 <__smakebuf_r+0x18>
 800a61c:	08009691 	.word	0x08009691

0800a620 <memchr>:
 800a620:	b510      	push	{r4, lr}
 800a622:	b2c9      	uxtb	r1, r1
 800a624:	4402      	add	r2, r0
 800a626:	4290      	cmp	r0, r2
 800a628:	4603      	mov	r3, r0
 800a62a:	d101      	bne.n	800a630 <memchr+0x10>
 800a62c:	2300      	movs	r3, #0
 800a62e:	e003      	b.n	800a638 <memchr+0x18>
 800a630:	781c      	ldrb	r4, [r3, #0]
 800a632:	3001      	adds	r0, #1
 800a634:	428c      	cmp	r4, r1
 800a636:	d1f6      	bne.n	800a626 <memchr+0x6>
 800a638:	4618      	mov	r0, r3
 800a63a:	bd10      	pop	{r4, pc}

0800a63c <memcpy>:
 800a63c:	b510      	push	{r4, lr}
 800a63e:	1e43      	subs	r3, r0, #1
 800a640:	440a      	add	r2, r1
 800a642:	4291      	cmp	r1, r2
 800a644:	d100      	bne.n	800a648 <memcpy+0xc>
 800a646:	bd10      	pop	{r4, pc}
 800a648:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a64c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a650:	e7f7      	b.n	800a642 <memcpy+0x6>

0800a652 <memmove>:
 800a652:	4288      	cmp	r0, r1
 800a654:	b510      	push	{r4, lr}
 800a656:	eb01 0302 	add.w	r3, r1, r2
 800a65a:	d807      	bhi.n	800a66c <memmove+0x1a>
 800a65c:	1e42      	subs	r2, r0, #1
 800a65e:	4299      	cmp	r1, r3
 800a660:	d00a      	beq.n	800a678 <memmove+0x26>
 800a662:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a666:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a66a:	e7f8      	b.n	800a65e <memmove+0xc>
 800a66c:	4283      	cmp	r3, r0
 800a66e:	d9f5      	bls.n	800a65c <memmove+0xa>
 800a670:	1881      	adds	r1, r0, r2
 800a672:	1ad2      	subs	r2, r2, r3
 800a674:	42d3      	cmn	r3, r2
 800a676:	d100      	bne.n	800a67a <memmove+0x28>
 800a678:	bd10      	pop	{r4, pc}
 800a67a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a67e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a682:	e7f7      	b.n	800a674 <memmove+0x22>

0800a684 <__malloc_lock>:
 800a684:	4770      	bx	lr

0800a686 <__malloc_unlock>:
 800a686:	4770      	bx	lr

0800a688 <_realloc_r>:
 800a688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68a:	4607      	mov	r7, r0
 800a68c:	4614      	mov	r4, r2
 800a68e:	460e      	mov	r6, r1
 800a690:	b921      	cbnz	r1, 800a69c <_realloc_r+0x14>
 800a692:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a696:	4611      	mov	r1, r2
 800a698:	f7ff b8f4 	b.w	8009884 <_malloc_r>
 800a69c:	b922      	cbnz	r2, 800a6a8 <_realloc_r+0x20>
 800a69e:	f7ff f8a5 	bl	80097ec <_free_r>
 800a6a2:	4625      	mov	r5, r4
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6a8:	f000 f848 	bl	800a73c <_malloc_usable_size_r>
 800a6ac:	42a0      	cmp	r0, r4
 800a6ae:	d20f      	bcs.n	800a6d0 <_realloc_r+0x48>
 800a6b0:	4621      	mov	r1, r4
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	f7ff f8e6 	bl	8009884 <_malloc_r>
 800a6b8:	4605      	mov	r5, r0
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	d0f2      	beq.n	800a6a4 <_realloc_r+0x1c>
 800a6be:	4631      	mov	r1, r6
 800a6c0:	4622      	mov	r2, r4
 800a6c2:	f7ff ffbb 	bl	800a63c <memcpy>
 800a6c6:	4631      	mov	r1, r6
 800a6c8:	4638      	mov	r0, r7
 800a6ca:	f7ff f88f 	bl	80097ec <_free_r>
 800a6ce:	e7e9      	b.n	800a6a4 <_realloc_r+0x1c>
 800a6d0:	4635      	mov	r5, r6
 800a6d2:	e7e7      	b.n	800a6a4 <_realloc_r+0x1c>

0800a6d4 <_read_r>:
 800a6d4:	b538      	push	{r3, r4, r5, lr}
 800a6d6:	4605      	mov	r5, r0
 800a6d8:	4608      	mov	r0, r1
 800a6da:	4611      	mov	r1, r2
 800a6dc:	2200      	movs	r2, #0
 800a6de:	4c05      	ldr	r4, [pc, #20]	; (800a6f4 <_read_r+0x20>)
 800a6e0:	6022      	str	r2, [r4, #0]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f7fe f848 	bl	8008778 <_read>
 800a6e8:	1c43      	adds	r3, r0, #1
 800a6ea:	d102      	bne.n	800a6f2 <_read_r+0x1e>
 800a6ec:	6823      	ldr	r3, [r4, #0]
 800a6ee:	b103      	cbz	r3, 800a6f2 <_read_r+0x1e>
 800a6f0:	602b      	str	r3, [r5, #0]
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	200007dc 	.word	0x200007dc

0800a6f8 <_fstat_r>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	4c06      	ldr	r4, [pc, #24]	; (800a718 <_fstat_r+0x20>)
 800a6fe:	4605      	mov	r5, r0
 800a700:	4608      	mov	r0, r1
 800a702:	4611      	mov	r1, r2
 800a704:	6023      	str	r3, [r4, #0]
 800a706:	f7fe f87b 	bl	8008800 <_fstat>
 800a70a:	1c43      	adds	r3, r0, #1
 800a70c:	d102      	bne.n	800a714 <_fstat_r+0x1c>
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	b103      	cbz	r3, 800a714 <_fstat_r+0x1c>
 800a712:	602b      	str	r3, [r5, #0]
 800a714:	bd38      	pop	{r3, r4, r5, pc}
 800a716:	bf00      	nop
 800a718:	200007dc 	.word	0x200007dc

0800a71c <_isatty_r>:
 800a71c:	b538      	push	{r3, r4, r5, lr}
 800a71e:	2300      	movs	r3, #0
 800a720:	4c05      	ldr	r4, [pc, #20]	; (800a738 <_isatty_r+0x1c>)
 800a722:	4605      	mov	r5, r0
 800a724:	4608      	mov	r0, r1
 800a726:	6023      	str	r3, [r4, #0]
 800a728:	f7fe f879 	bl	800881e <_isatty>
 800a72c:	1c43      	adds	r3, r0, #1
 800a72e:	d102      	bne.n	800a736 <_isatty_r+0x1a>
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	b103      	cbz	r3, 800a736 <_isatty_r+0x1a>
 800a734:	602b      	str	r3, [r5, #0]
 800a736:	bd38      	pop	{r3, r4, r5, pc}
 800a738:	200007dc 	.word	0x200007dc

0800a73c <_malloc_usable_size_r>:
 800a73c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a740:	1f18      	subs	r0, r3, #4
 800a742:	2b00      	cmp	r3, #0
 800a744:	bfbc      	itt	lt
 800a746:	580b      	ldrlt	r3, [r1, r0]
 800a748:	18c0      	addlt	r0, r0, r3
 800a74a:	4770      	bx	lr

0800a74c <_init>:
 800a74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a74e:	bf00      	nop
 800a750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a752:	bc08      	pop	{r3}
 800a754:	469e      	mov	lr, r3
 800a756:	4770      	bx	lr

0800a758 <_fini>:
 800a758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75a:	bf00      	nop
 800a75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a75e:	bc08      	pop	{r3}
 800a760:	469e      	mov	lr, r3
 800a762:	4770      	bx	lr
